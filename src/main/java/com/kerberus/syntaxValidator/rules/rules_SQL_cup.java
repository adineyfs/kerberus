
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.kerberus.syntaxValidator.rules;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class rules_SQL_cup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public rules_SQL_cup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public rules_SQL_cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public rules_SQL_cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\006\000\002\004\003\000\002\005\004" +
    "\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\016\000\004\004\006\001\002\000\004\002\020\001" +
    "\002\000\004\002\uffff\001\002\000\006\011\011\013\010" +
    "\001\002\000\004\007\016\001\002\000\004\007\ufffd\001" +
    "\002\000\004\007\012\001\002\000\004\013\014\001\002" +
    "\000\004\002\000\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\ufffc\001\002\000\004\013\014\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\016\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\012\001\001\000" +
    "\004\006\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\016\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$rules_SQL_cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$rules_SQL_cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$rules_SQL_cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// This list will hold every error found in the syntax analysis process. SE -> Syntax errors
	public static LinkedList<TError> TableSE = new LinkedList<TError>();

	// Recoverable syntax errors - This method will take case of the errors, and notify about it
	public void syntax_error(Symbol s)
	{
		String lexeme = s.value.toString();
		int row = s.right;
		int column = s.left;
		
		System.out.println("### - Syntax error detected - ###");
		System.out.println("\t\tLexeme:" + lexeme);
		System.out.println("\t\tRow: " + row);
		System.out.println("\t\tColumn: " + column);
		
		TError errors_found = new TError(lexeme,row,column, "Syntax error", "Unexpected character");
		TableSE .add(errors_found);
	}
	
	// Unrecoverable syntax errors - This method will catch any other errors that go beyond our language(exceptions)
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
	{
		String lexeme = s.value.toString();
		int row = s.right;
		int column = s.left;
		
		System.out.println("### Syntax error captured ###");
		System.out.println("### - Unrecoverable syntax error detected - ###");
		System.out.println("\t\tLexeme:" + lexeme);
		System.out.println("\t\tRow: " + row);
		System.out.println("\t\tColumn: " + column);
		
		TError errors_found = new TError(lexeme,row,column, "Unrecoverable syntax error", "Unexpected character");
		TableSE .add(errors_found);
	}	
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$rules_SQL_cup$actions {


	

  private final rules_SQL_cup parser;

  /** Constructor */
  CUP$rules_SQL_cup$actions(rules_SQL_cup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$rules_SQL_cup$do_action_part00000000(
    int                        CUP$rules_SQL_cup$act_num,
    java_cup.runtime.lr_parser CUP$rules_SQL_cup$parser,
    java.util.Stack            CUP$rules_SQL_cup$stack,
    int                        CUP$rules_SQL_cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$rules_SQL_cup$result;

      /* select the action based on the action number */
      switch (CUP$rules_SQL_cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= _SEL1_ EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.elementAt(CUP$rules_SQL_cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.elementAt(CUP$rules_SQL_cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$rules_SQL_cup$stack.elementAt(CUP$rules_SQL_cup$top-1)).value;
		RESULT = start_val;
              CUP$rules_SQL_cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.elementAt(CUP$rules_SQL_cup$top-1)), ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$rules_SQL_cup$parser.done_parsing();
          return CUP$rules_SQL_cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // _SEL1_ ::= SELECT _STAR _FRO_ 
            {
              Object RESULT =null;

              CUP$rules_SQL_cup$result = parser.getSymbolFactory().newSymbol("_SEL1_",0, ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.elementAt(CUP$rules_SQL_cup$top-2)), ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.peek()), RESULT);
            }
          return CUP$rules_SQL_cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // _SEL1_ ::= _SEL2_ 
            {
              Object RESULT =null;

              CUP$rules_SQL_cup$result = parser.getSymbolFactory().newSymbol("_SEL1_",0, ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.peek()), RESULT);
            }
          return CUP$rules_SQL_cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // _SEL2_ ::= SELECT _COLS_ FROM _TABLE_ 
            {
              Object RESULT =null;

              CUP$rules_SQL_cup$result = parser.getSymbolFactory().newSymbol("_SEL2_",1, ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.elementAt(CUP$rules_SQL_cup$top-3)), ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.peek()), RESULT);
            }
          return CUP$rules_SQL_cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // _COLS_ ::= identifier 
            {
              Object RESULT =null;

              CUP$rules_SQL_cup$result = parser.getSymbolFactory().newSymbol("_COLS_",2, ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.peek()), RESULT);
            }
          return CUP$rules_SQL_cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // _FRO_ ::= FROM _TABLE_ 
            {
              Object RESULT =null;

              CUP$rules_SQL_cup$result = parser.getSymbolFactory().newSymbol("_FRO_",3, ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.elementAt(CUP$rules_SQL_cup$top-1)), ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.peek()), RESULT);
            }
          return CUP$rules_SQL_cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // _TABLE_ ::= identifier 
            {
              Object RESULT =null;

              CUP$rules_SQL_cup$result = parser.getSymbolFactory().newSymbol("_TABLE_",4, ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$rules_SQL_cup$stack.peek()), RESULT);
            }
          return CUP$rules_SQL_cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$rules_SQL_cup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$rules_SQL_cup$do_action(
    int                        CUP$rules_SQL_cup$act_num,
    java_cup.runtime.lr_parser CUP$rules_SQL_cup$parser,
    java.util.Stack            CUP$rules_SQL_cup$stack,
    int                        CUP$rules_SQL_cup$top)
    throws java.lang.Exception
    {
              return CUP$rules_SQL_cup$do_action_part00000000(
                               CUP$rules_SQL_cup$act_num,
                               CUP$rules_SQL_cup$parser,
                               CUP$rules_SQL_cup$stack,
                               CUP$rules_SQL_cup$top);
    }
}

}
