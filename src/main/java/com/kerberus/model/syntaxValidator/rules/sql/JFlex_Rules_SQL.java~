/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */

package com.kerberus.model.syntaxValidator.rules.sql;


import java_cup.runtime.*; 		// Required to send lexemas to Cup
import java.util.LinkedList; 	// Required for LinkedList
import com.kerberus.model.syntaxValidator.rules.util.*;
import com.kerberus.model.syntaxValidator.rules.sql.sym;

/**
 * This class is a simple example lexer.
 */


public class JFlex_Rules_SQL implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\2\1\16\1\17\1\1\22\0\1\12\1\56\1\20"+
    "\2\0\1\60\1\61\1\14\1\64\1\65\1\4\1\57\1\67\1\5"+
    "\1\13\1\3\2\10\1\52\7\10\1\0\1\66\1\55\1\53\1\54"+
    "\2\0\1\32\1\46\1\25\1\31\1\23\1\41\1\50\1\44\1\34"+
    "\1\47\1\7\1\24\1\42\1\35\1\37\1\30\1\7\1\36\1\22"+
    "\1\26\1\27\1\40\1\43\1\51\1\45\1\7\1\0\1\15\1\0"+
    "\1\62\1\11\1\0\1\32\1\46\1\25\1\31\1\23\1\41\1\50"+
    "\1\44\1\34\1\47\1\7\1\24\1\42\1\35\1\37\1\30\1\7"+
    "\1\36\1\22\1\26\1\27\1\40\1\43\1\51\1\45\1\7\1\0"+
    "\1\63\10\0\1\16\252\0\2\33\115\0\1\21\u1ea8\0\1\16\1\16"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\4\1\10\6\1\1\12\6\1\10\1\11\1\12\1\1"+
    "\1\13\3\1\1\2\1\14\1\15\1\16\1\17\1\0"+
    "\1\20\1\21\1\22\1\7\1\0\1\23\3\0\1\24"+
    "\5\0\1\25\3\0\17\6\1\0\3\6\1\0\1\6"+
    "\2\26\2\6\1\27\1\0\1\30\1\27\1\6\1\30"+
    "\7\6\1\0\2\6\1\31\1\32\4\6\1\0\1\6"+
    "\1\0\2\6\1\33\1\6\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\2\0\2\22\1\45"+
    "\1\0\1\46\1\47\1\0\1\50\1\51\1\0\1\6"+
    "\1\50\1\51\1\6\1\0\1\6\1\52\5\6\1\0"+
    "\4\6\1\0\3\6\1\0\3\6\1\0\2\6\1\0"+
    "\1\6\2\53\1\54\1\55\1\56\3\0\1\56\5\6"+
    "\1\57\1\60\3\6\1\0\6\6\1\61\2\62\1\0"+
    "\2\6\1\0\1\6\1\0\1\22\2\0\2\6\2\63"+
    "\1\6\1\64\1\0\1\6\1\65\1\6\2\66\3\6"+
    "\2\67\2\6\1\70\1\0\3\6\2\71\1\6\1\0"+
    "\1\6\2\0\1\72\1\0\2\6\1\72\1\6\1\73"+
    "\1\6\1\74\1\6\1\0\1\6\1\75\1\0\4\6"+
    "\1\76\1\77\2\100\1\101\1\6\2\102\2\0\3\6"+
    "\2\103\1\104\1\105\1\6\1\0\3\6\2\106\1\107"+
    "\2\6\1\0\1\6\1\0\1\110\1\111\1\6\1\110"+
    "\1\111\1\0\3\6\2\112\2\113\1\114\1\115\1\6"+
    "\1\116\1\117\1\0\1\117\1\6\1\120\1\121\2\122"+
    "\2\6\1\123\1\124\1\0\1\6\2\125\2\126\2\6"+
    "\2\127\2\130\1\131\1\132\1\0\1\6\1\133\1\134"+
    "\2\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\70\0\160\0\250\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\70"+
    "\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818"+
    "\0\70\0\70\0\70\0\70\0\u0850\0\70\0\70\0\u0888"+
    "\0\u08c0\0\u08c0\0\70\0\u08f8\0\u0930\0\u01c0\0\70\0\u0968"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\70\0\u0a80\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0"+
    "\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70"+
    "\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030"+
    "\0\u1068\0\70\0\u10a0\0\u10d8\0\u0118\0\u1110\0\u1148\0\u1180"+
    "\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340"+
    "\0\u1378\0\u0118\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8"+
    "\0\u1500\0\u1538\0\u1570\0\u15a8\0\u0118\0\u15e0\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\u1618"+
    "\0\u1650\0\u1688\0\70\0\u16c0\0\u16c0\0\u0930\0\70\0\u16f8"+
    "\0\70\0\70\0\u1730\0\u1768\0\u0118\0\u0118\0\u17a0\0\u17d8"+
    "\0\u1810\0\u0118\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960"+
    "\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20"+
    "\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0"+
    "\0\u1d18\0\70\0\u0118\0\u0118\0\u0118\0\70\0\u1d50\0\u1d88"+
    "\0\u1dc0\0\u0118\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u0118"+
    "\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098"+
    "\0\u20d0\0\u2108\0\u2140\0\u0118\0\70\0\u0118\0\u2178\0\u21b0"+
    "\0\u21e8\0\u2220\0\u2258\0\u2290\0\u1618\0\u22c8\0\u2300\0\u2338"+
    "\0\u2370\0\70\0\u0118\0\u23a8\0\u0118\0\u23e0\0\u2418\0\u0118"+
    "\0\u2450\0\70\0\u0118\0\u2488\0\u24c0\0\u24f8\0\70\0\u0118"+
    "\0\u2530\0\u2568\0\u0118\0\u25a0\0\u25d8\0\u2610\0\u2648\0\70"+
    "\0\u0118\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\70\0\u2798"+
    "\0\u27d0\0\u2808\0\u0118\0\u2840\0\u2878\0\u28b0\0\u0118\0\u28e8"+
    "\0\u2920\0\u2958\0\u0118\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70"+
    "\0\u0118\0\u0118\0\70\0\u0118\0\u0118\0\u2aa8\0\70\0\u0118"+
    "\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\70\0\u0118\0\u0118"+
    "\0\u0118\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\70\0\u0118"+
    "\0\u0118\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\70\0\70"+
    "\0\u2e28\0\u0118\0\u0118\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\70"+
    "\0\u0118\0\70\0\u0118\0\u0118\0\u0118\0\u2f40\0\u0118\0\70"+
    "\0\u2f78\0\u0118\0\u2fb0\0\u0118\0\u0118\0\70\0\u0118\0\u2fe8"+
    "\0\u3020\0\u0118\0\u0118\0\u3058\0\u3090\0\70\0\u0118\0\70"+
    "\0\u0118\0\u30c8\0\u3100\0\70\0\u0118\0\70\0\u0118\0\u0118"+
    "\0\u0118\0\u3138\0\u3170\0\u0118\0\u0118\0\70\0\u0118";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\11\1\3\1\2\1\12\2\2\1\3\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\7\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\2\7\1\36\1\37\2\7\1\10\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\74\0\1\55\46\0\1\56"+
    "\67\0\1\57\21\0\1\60\2\0\1\61\1\0\1\62"+
    "\37\0\1\61\1\63\23\0\3\7\1\0\1\64\6\0"+
    "\11\7\1\0\17\7\25\0\1\10\2\0\1\65\36\0"+
    "\1\10\24\0\3\7\10\0\11\7\1\0\17\7\15\0"+
    "\14\66\1\67\1\70\52\66\7\71\1\72\1\71\1\73"+
    "\3\71\1\74\2\71\1\75\1\71\11\72\1\71\16\72"+
    "\16\71\23\0\1\76\3\0\1\77\15\0\1\100\31\0"+
    "\3\7\1\0\1\64\6\0\1\7\1\101\3\7\1\102"+
    "\3\7\1\0\11\7\1\103\5\7\24\0\3\7\1\0"+
    "\1\64\6\0\2\7\1\104\6\7\1\0\1\7\1\105"+
    "\15\7\24\0\3\7\1\0\1\64\6\0\1\7\1\106"+
    "\2\7\1\107\1\7\1\110\2\7\1\0\3\7\1\111"+
    "\13\7\24\0\3\7\1\0\1\64\6\0\10\7\1\112"+
    "\1\0\3\7\1\113\4\7\1\114\6\7\24\0\3\7"+
    "\1\0\1\64\6\0\11\7\1\0\2\7\1\115\1\116"+
    "\4\7\1\117\6\7\24\0\3\7\1\0\1\64\5\0"+
    "\1\120\1\121\5\7\1\122\2\7\1\0\17\7\24\0"+
    "\3\7\1\0\1\64\6\0\1\7\1\123\7\7\1\124"+
    "\1\125\16\7\24\0\3\7\1\0\1\64\5\0\1\126"+
    "\1\127\10\7\1\0\1\7\1\130\2\7\1\131\12\7"+
    "\36\0\2\132\10\0\2\133\1\134\41\0\3\7\1\0"+
    "\1\64\5\0\1\132\1\135\10\7\1\133\1\136\1\137"+
    "\15\7\24\0\3\7\1\0\1\64\6\0\5\7\1\140"+
    "\2\7\1\141\1\0\3\7\1\142\1\143\12\7\24\0"+
    "\3\7\1\0\1\64\6\0\1\7\1\144\2\7\1\145"+
    "\1\7\1\146\2\7\1\147\1\150\16\7\24\0\3\7"+
    "\1\0\1\64\6\0\5\7\1\151\3\7\1\0\1\7"+
    "\1\152\1\153\14\7\24\0\3\7\1\0\1\64\6\0"+
    "\10\7\1\154\1\0\17\7\24\0\3\7\1\0\1\64"+
    "\6\0\5\7\1\155\3\7\1\0\2\7\1\156\14\7"+
    "\24\0\3\7\1\0\1\64\6\0\10\7\1\157\1\160"+
    "\1\161\16\7\24\0\3\7\1\0\1\64\6\0\11\7"+
    "\1\162\1\163\7\7\1\164\6\7\24\0\3\7\1\0"+
    "\1\64\6\0\11\7\1\0\11\7\1\165\5\7\24\0"+
    "\3\7\1\0\1\64\6\0\11\7\1\0\3\7\1\166"+
    "\13\7\70\0\1\167\67\0\1\170\1\171\66\0\1\172"+
    "\67\0\1\173\67\0\1\174\67\0\1\175\67\0\1\176"+
    "\67\0\1\177\14\0\4\200\1\201\63\200\1\60\1\202"+
    "\1\203\65\60\10\0\1\61\41\0\1\61\24\0\1\204"+
    "\1\0\1\205\10\0\11\204\1\0\16\204\26\0\1\206"+
    "\41\0\1\206\15\0\1\66\2\0\13\66\2\0\50\66"+
    "\15\71\1\74\2\71\1\75\56\71\3\72\3\71\1\74"+
    "\2\71\1\207\1\71\11\72\1\71\17\72\24\71\3\72"+
    "\3\71\1\74\2\71\1\75\1\71\11\72\1\71\17\72"+
    "\16\71\2\0\13\71\2\0\50\71\24\0\1\210\1\0"+
    "\1\211\103\0\1\212\46\0\2\213\54\0\3\7\1\0"+
    "\1\64\6\0\2\7\1\214\1\7\1\215\4\7\1\0"+
    "\17\7\24\0\3\7\1\0\1\64\6\0\11\7\1\0"+
    "\6\7\1\216\10\7\24\0\3\7\1\0\1\64\5\0"+
    "\1\213\1\217\10\7\1\0\17\7\24\0\3\7\1\0"+
    "\1\64\5\0\1\220\1\221\10\7\1\0\17\7\24\0"+
    "\3\7\1\0\1\64\6\0\7\7\1\222\1\7\1\0"+
    "\17\7\24\0\3\7\1\0\1\64\6\0\11\7\1\0"+
    "\1\7\1\223\3\7\1\224\11\7\24\0\3\7\1\0"+
    "\1\64\6\0\11\7\1\0\2\7\1\225\14\7\24\0"+
    "\3\7\1\0\1\64\6\0\10\7\1\226\1\0\17\7"+
    "\24\0\3\7\1\0\1\64\6\0\11\7\1\0\7\7"+
    "\1\227\7\7\24\0\3\7\1\0\1\64\5\0\1\230"+
    "\1\231\10\7\1\0\17\7\24\0\3\7\1\0\1\64"+
    "\6\0\5\7\1\232\3\7\1\0\1\7\1\233\15\7"+
    "\24\0\3\7\1\0\1\64\6\0\11\7\1\0\3\7"+
    "\1\234\13\7\24\0\3\7\1\0\1\64\6\0\11\7"+
    "\1\235\1\236\16\7\24\0\2\7\1\237\1\0\1\64"+
    "\6\0\11\7\1\0\17\7\24\0\3\7\1\0\1\64"+
    "\6\0\1\7\1\240\7\7\1\0\17\7\50\0\2\241"+
    "\42\0\3\7\1\0\1\64\6\0\11\7\1\241\1\242"+
    "\16\7\24\0\3\7\1\0\1\64\6\0\6\7\1\243"+
    "\1\244\1\7\1\0\17\7\24\0\3\7\1\0\1\64"+
    "\5\0\1\245\1\246\1\7\1\247\6\7\1\0\17\7"+
    "\36\0\2\250\54\0\3\7\1\0\1\64\5\0\1\250"+
    "\1\251\10\7\1\0\17\7\42\0\1\252\51\0\3\7"+
    "\1\0\1\64\6\0\3\7\1\253\5\7\1\0\17\7"+
    "\24\0\3\7\1\0\1\64\6\0\7\7\1\254\1\7"+
    "\1\0\17\7\24\0\3\7\1\0\1\64\6\0\11\7"+
    "\1\0\14\7\1\255\2\7\56\0\1\256\47\0\2\257"+
    "\3\0\1\260\6\0\1\261\41\0\3\7\1\0\1\64"+
    "\6\0\11\7\1\0\5\7\1\262\11\7\24\0\3\7"+
    "\1\0\1\64\5\0\1\257\1\263\3\7\1\264\4\7"+
    "\1\0\1\7\1\265\15\7\24\0\3\7\1\0\1\64"+
    "\6\0\2\7\1\266\6\7\1\0\17\7\24\0\3\7"+
    "\1\0\1\64\6\0\4\7\1\267\4\7\1\0\17\7"+
    "\24\0\3\7\1\0\1\64\6\0\4\7\1\270\4\7"+
    "\1\0\17\7\24\0\3\7\1\0\1\64\6\0\2\7"+
    "\1\271\6\7\1\0\17\7\24\0\3\7\1\0\1\64"+
    "\6\0\6\7\1\272\2\7\1\0\17\7\24\0\3\7"+
    "\1\0\1\64\6\0\11\7\1\0\2\7\1\273\14\7"+
    "\24\0\3\7\1\0\1\64\6\0\10\7\1\274\1\0"+
    "\17\7\65\0\1\275\26\0\3\7\1\0\1\64\6\0"+
    "\11\7\1\0\14\7\1\276\2\7\24\0\3\7\1\0"+
    "\1\64\6\0\4\7\1\277\4\7\1\0\17\7\24\0"+
    "\3\7\1\0\1\64\6\0\7\7\1\300\1\7\1\0"+
    "\17\7\24\0\3\7\1\0\1\64\6\0\2\7\1\301"+
    "\6\7\1\0\17\7\24\0\3\7\1\0\1\64\6\0"+
    "\2\7\1\302\6\7\1\0\17\7\24\0\3\7\1\0"+
    "\1\64\6\0\11\7\1\0\3\7\1\303\13\7\24\0"+
    "\3\7\1\0\1\64\6\0\11\7\1\0\15\7\1\304"+
    "\1\7\52\0\1\305\41\0\3\7\1\0\1\64\6\0"+
    "\11\7\1\0\1\7\1\306\15\7\43\0\1\307\50\0"+
    "\3\7\1\0\1\64\6\0\4\7\1\310\4\7\1\0"+
    "\17\7\24\0\3\7\1\0\1\64\6\0\1\7\1\311"+
    "\7\7\1\0\17\7\24\0\3\7\1\0\1\64\6\0"+
    "\11\7\1\312\1\313\16\7\15\0\4\200\1\314\66\200"+
    "\1\315\1\314\63\200\2\0\1\203\74\0\3\204\10\0"+
    "\11\204\1\0\17\204\40\0\1\316\75\0\1\317\45\0"+
    "\3\7\1\0\1\64\6\0\1\7\1\320\7\7\1\0"+
    "\17\7\24\0\3\7\1\0\1\64\6\0\7\7\1\321"+
    "\1\7\1\0\17\7\40\0\1\322\53\0\3\7\1\0"+
    "\1\64\6\0\1\7\1\323\7\7\1\0\17\7\24\0"+
    "\3\7\1\0\1\64\6\0\11\7\1\0\14\7\1\324"+
    "\2\7\24\0\3\7\1\0\1\64\6\0\4\7\1\325"+
    "\4\7\1\0\17\7\24\0\3\7\1\0\1\64\6\0"+
    "\11\7\1\326\1\327\16\7\24\0\3\7\1\0\1\64"+
    "\6\0\7\7\1\330\1\7\1\0\17\7\24\0\3\7"+
    "\1\0\1\64\6\0\1\7\1\331\7\7\1\0\17\7"+
    "\40\0\1\332\53\0\3\7\1\0\1\64\6\0\1\7"+
    "\1\333\7\7\1\0\17\7\24\0\3\7\1\0\1\64"+
    "\6\0\11\7\1\0\1\7\1\334\15\7\24\0\3\7"+
    "\1\0\1\64\6\0\3\7\1\335\5\7\1\0\17\7"+
    "\24\0\3\7\1\0\1\64\6\0\11\7\1\0\3\7"+
    "\1\336\13\7\57\0\1\337\34\0\3\7\1\0\1\64"+
    "\6\0\11\7\1\0\6\7\1\340\10\7\24\0\3\7"+
    "\1\0\1\64\6\0\3\7\1\341\3\7\1\342\1\7"+
    "\1\0\17\7\24\0\3\7\1\0\1\64\6\0\11\7"+
    "\1\0\1\7\1\343\15\7\52\0\1\344\41\0\3\7"+
    "\1\0\1\64\6\0\11\7\1\0\1\7\1\345\15\7"+
    "\24\0\3\7\1\0\1\64\6\0\1\7\1\346\7\7"+
    "\1\0\17\7\24\0\3\7\1\0\1\64\6\0\10\7"+
    "\1\347\1\0\17\7\42\0\1\350\51\0\3\7\1\0"+
    "\1\64\6\0\3\7\1\351\5\7\1\0\17\7\24\0"+
    "\3\7\1\0\1\64\6\0\1\7\1\352\7\7\1\0"+
    "\17\7\43\0\1\353\50\0\3\7\1\0\1\64\6\0"+
    "\4\7\1\354\4\7\1\0\17\7\40\0\1\355\2\0"+
    "\1\356\100\0\1\357\53\0\1\360\53\0\3\7\1\0"+
    "\1\64\6\0\1\7\1\361\2\7\1\362\4\7\1\0"+
    "\17\7\24\0\3\7\1\0\1\64\6\0\11\7\1\0"+
    "\3\7\1\363\13\7\24\0\3\7\1\0\1\64\6\0"+
    "\1\7\1\364\7\7\1\0\17\7\24\0\3\7\1\0"+
    "\1\64\6\0\2\7\1\365\6\7\1\0\17\7\24\0"+
    "\3\7\1\0\1\64\6\0\5\7\1\366\3\7\1\0"+
    "\17\7\24\0\3\7\1\0\1\64\6\0\11\7\1\0"+
    "\16\7\1\367\24\0\3\7\1\0\1\64\6\0\2\7"+
    "\1\370\6\7\1\0\17\7\24\0\3\7\1\0\1\64"+
    "\6\0\11\7\1\371\1\372\16\7\24\0\3\7\1\0"+
    "\1\64\6\0\7\7\1\373\1\7\1\0\17\7\61\0"+
    "\1\374\32\0\3\7\1\0\1\64\6\0\11\7\1\0"+
    "\10\7\1\375\6\7\24\0\3\7\1\0\1\64\6\0"+
    "\1\7\1\376\7\7\1\0\17\7\24\0\3\7\1\0"+
    "\1\64\6\0\1\7\1\377\7\7\1\0\17\7\24\0"+
    "\3\7\1\0\1\64\6\0\5\7\1\u0100\3\7\1\0"+
    "\17\7\24\0\3\7\1\0\1\64\6\0\2\7\1\u0101"+
    "\6\7\1\0\17\7\24\0\3\7\1\0\1\64\6\0"+
    "\11\7\1\0\6\7\1\u0102\10\7\61\0\1\u0103\32\0"+
    "\3\7\1\0\1\64\6\0\11\7\1\0\10\7\1\u0104"+
    "\6\7\24\0\3\7\1\0\1\64\6\0\11\7\1\0"+
    "\1\7\1\u0105\1\u0106\14\7\52\0\1\u0107\41\0\3\7"+
    "\1\0\1\64\6\0\11\7\1\0\1\7\1\u0108\15\7"+
    "\15\0\3\200\1\203\1\314\63\200\25\0\1\u0109\74\0"+
    "\1\u010a\44\0\3\7\1\0\1\64\6\0\3\7\1\u010b"+
    "\5\7\1\0\17\7\24\0\3\7\1\0\1\64\6\0"+
    "\10\7\1\u010c\1\0\17\7\24\0\3\7\1\0\1\64"+
    "\6\0\4\7\1\u010d\4\7\1\0\17\7\57\0\1\u010e"+
    "\34\0\3\7\1\0\1\64\6\0\11\7\1\0\6\7"+
    "\1\u010f\10\7\24\0\3\7\1\0\1\64\6\0\11\7"+
    "\1\0\2\7\1\u0110\14\7\24\0\3\7\1\0\1\64"+
    "\6\0\4\7\1\u0111\4\7\1\0\17\7\24\0\3\7"+
    "\1\0\1\64\6\0\10\7\1\u0112\1\0\17\7\24\0"+
    "\3\7\1\0\1\64\5\0\1\u0113\1\u0114\10\7\1\0"+
    "\17\7\24\0\3\7\1\0\1\64\6\0\11\7\1\0"+
    "\10\7\1\u0115\6\7\24\0\3\7\1\0\1\64\6\0"+
    "\10\7\1\u0116\1\0\17\7\65\0\1\u0117\26\0\3\7"+
    "\1\0\1\64\6\0\11\7\1\0\14\7\1\u0118\2\7"+
    "\24\0\3\7\1\0\1\64\6\0\11\7\1\0\2\7"+
    "\1\u0119\14\7\24\0\3\7\1\0\1\64\6\0\4\7"+
    "\1\u011a\4\7\1\0\17\7\24\0\3\7\1\0\1\64"+
    "\6\0\4\7\1\u011b\4\7\1\0\17\7\50\0\2\u011c"+
    "\42\0\3\7\1\0\1\64\6\0\11\7\1\u011c\1\u011d"+
    "\16\7\53\0\1\u011e\67\0\1\u011f\67\0\1\u0120\40\0"+
    "\3\7\1\0\1\64\6\0\11\7\1\0\2\7\1\u0121"+
    "\14\7\24\0\3\7\1\0\1\64\6\0\11\7\1\0"+
    "\2\7\1\u0122\14\7\24\0\3\7\1\0\1\64\6\0"+
    "\11\7\1\0\2\7\1\u0123\14\7\24\0\3\7\1\0"+
    "\1\64\6\0\11\7\1\u0124\1\u0125\16\7\24\0\3\7"+
    "\1\0\1\64\6\0\11\7\1\0\2\7\1\u0126\14\7"+
    "\24\0\3\7\1\0\1\64\6\0\10\7\1\u0127\1\0"+
    "\17\7\57\0\1\u0128\34\0\3\7\1\0\1\64\6\0"+
    "\11\7\1\0\6\7\1\u0129\10\7\43\0\1\u012a\50\0"+
    "\3\7\1\0\1\64\6\0\4\7\1\u012b\4\7\1\0"+
    "\17\7\24\0\3\7\1\0\1\64\6\0\11\7\1\0"+
    "\2\7\1\u012c\14\7\24\0\3\7\1\0\1\64\6\0"+
    "\11\7\1\0\2\7\1\u012d\14\7\24\0\3\7\1\0"+
    "\1\64\6\0\1\7\1\u012e\7\7\1\0\17\7\24\0"+
    "\3\7\1\0\1\64\6\0\1\7\1\u012f\7\7\1\0"+
    "\17\7\43\0\1\u0130\67\0\1\u0131\50\0\3\7\1\0"+
    "\1\64\6\0\4\7\1\u0132\4\7\1\0\17\7\24\0"+
    "\3\7\1\0\1\64\6\0\4\7\1\u0133\4\7\1\0"+
    "\17\7\24\0\3\7\1\0\1\64\6\0\11\7\1\0"+
    "\10\7\1\u0134\6\7\24\0\3\7\1\0\1\64\6\0"+
    "\4\7\1\u0135\4\7\1\0\17\7\40\0\1\u0136\53\0"+
    "\3\7\1\0\1\64\6\0\1\7\1\u0137\7\7\1\0"+
    "\17\7\24\0\3\7\1\0\1\64\6\0\10\7\1\u0138"+
    "\1\0\17\7\24\0\3\7\1\0\1\64\6\0\4\7"+
    "\1\u0139\4\7\1\0\17\7\24\0\3\7\1\0\1\64"+
    "\6\0\1\7\1\u013a\7\7\1\0\17\7\24\0\3\7"+
    "\1\0\1\64\6\0\1\7\1\u013b\7\7\1\0\17\7"+
    "\52\0\1\u013c\41\0\3\7\1\0\1\64\6\0\11\7"+
    "\1\0\1\7\1\u013d\15\7\43\0\1\u013e\50\0\3\7"+
    "\1\0\1\64\6\0\4\7\1\u013f\4\7\1\0\17\7"+
    "\56\0\1\u0140\35\0\3\7\1\0\1\64\6\0\11\7"+
    "\1\0\5\7\1\u0141\11\7\24\0\3\7\1\0\1\64"+
    "\6\0\10\7\1\u0142\1\0\17\7\24\0\3\7\1\0"+
    "\1\64\6\0\3\7\1\u0143\5\7\1\0\17\7\24\0"+
    "\3\7\1\0\1\64\5\0\1\u0144\1\u0145\10\7\1\0"+
    "\17\7\40\0\1\u0146\53\0\3\7\1\0\1\64\6\0"+
    "\1\7\1\u0147\7\7\1\0\17\7\24\0\3\7\1\0"+
    "\1\64\6\0\11\7\1\0\2\7\1\u0148\14\7\24\0"+
    "\3\7\1\0\1\64\6\0\1\7\1\u0149\7\7\1\0"+
    "\17\7\42\0\1\u014a\51\0\3\7\1\0\1\64\6\0"+
    "\3\7\1\u014b\5\7\1\0\17\7\24\0\3\7\1\0"+
    "\1\64\6\0\2\7\1\u014c\6\7\1\0\17\7\24\0"+
    "\3\7\1\0\1\64\6\0\1\7\1\u014d\7\7\1\0"+
    "\17\7\43\0\1\u014e\50\0\3\7\1\0\1\64\6\0"+
    "\4\7\1\u014f\4\7\1\0\17\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12712];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\34\1\1\11\10\1\4\11\1\0\2\11"+
    "\2\1\1\0\1\11\3\0\1\11\5\0\1\11\3\0"+
    "\17\1\1\0\3\1\1\0\5\1\1\11\1\0\13\1"+
    "\1\0\10\1\1\0\1\1\1\0\4\1\11\11\2\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\0\2\11"+
    "\1\0\4\1\1\0\7\1\1\0\4\1\1\0\3\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\1\11\3\1"+
    "\1\11\3\0\13\1\1\0\7\1\1\11\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\2\0\2\1\1\11"+
    "\3\1\1\0\3\1\1\11\4\1\1\11\4\1\1\0"+
    "\3\1\1\11\2\1\1\0\1\1\2\0\1\11\1\0"+
    "\10\1\1\0\2\1\1\0\6\1\1\11\3\1\1\11"+
    "\1\1\2\0\3\1\1\11\4\1\1\0\3\1\1\11"+
    "\4\1\1\0\1\1\1\0\2\11\3\1\1\0\3\1"+
    "\1\11\1\1\1\11\5\1\1\11\1\0\4\1\1\11"+
    "\5\1\1\0\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\1\1\1\11\3\1\1\0\3\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	// Initialize any necessary variables here
	
	// A table I will create to store Lexical Errors found | import library for LinkedList
	public LinkedList<TError> TableLE = new LinkedList<TError>();
	public LinkedList<String> StmtCopy = new LinkedList<String>(); // DELETE THIS, will be replaced by PrettyfiedStatement
	
	public LinkedList<PrettyStatement> PrettyfiedStatement = new LinkedList<PrettyStatement>();
	
		
	// Will need to create a structure to save the lexeme and its corresponding category code.
	public void prettyfier (String lexeme, int category) {
		
		PrettyStatement ps = new PrettyStatement(lexeme,category);
		PrettyfiedStatement.add(ps);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JFlex_Rules_SQL(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("\n### Lexical error (Illegal element) ### - '" + yytext() + "' line: " + yyline + ", column: " + yychar + "\n"); 
				  	  TError errors_found = new TError(yytext(),yyline,yycolumn,"Lexical Error","Unrecognized symbol.");
				  	  TableLE.add(errors_found); 
				  	  prettyfier(yytext(), Categories.ERROR);
					  return new Symbol(sym.ILLEGAL_CHAR, yyline, yycolumn, yytext());
            }
          case 94: break;
          case 2: 
            { System.out.println("Recognized space: " + yytext()); prettyfier(yytext(), Categories.NOTHING );
            }
          case 95: break;
          case 3: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDE, yyline+1, yycolumn+1, yytext());
            }
          case 96: break;
          case 4: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._STAR, yyline+1, yycolumn+1, yytext());
            }
          case 97: break;
          case 5: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUS, yyline+1, yycolumn+1, yytext());
            }
          case 98: break;
          case 6: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.IDENTIFIER, yyline+1, yycolumn+1, yytext());
            }
          case 99: break;
          case 7: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.INTEGER, yyline+1, yycolumn+1, yytext());
            }
          case 100: break;
          case 8: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._EQU, yyline+1, yycolumn+1, yytext());
            }
          case 101: break;
          case 9: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GT, yyline+1, yycolumn+1, yytext());
            }
          case 102: break;
          case 10: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LT, yyline+1, yycolumn+1, yytext());
            }
          case 103: break;
          case 11: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUS, yyline+1, yycolumn+1, yytext());
            }
          case 104: break;
          case 12: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OPENPAR, yyline+1, yycolumn+1, yytext());
            }
          case 105: break;
          case 13: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._CLOSEPAR, yyline+1, yycolumn+1, yytext());
            }
          case 106: break;
          case 14: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._SEMCOL2, yyline+1, yycolumn+1, yytext());
            }
          case 107: break;
          case 15: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._COMMA, yyline+1, yycolumn+1, yytext());
            }
          case 108: break;
          case 16: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDEEQ, yyline+1, yycolumn+1, yytext());
            }
          case 109: break;
          case 17: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._TIMESEQ, yyline+1, yycolumn+1, yytext());
            }
          case 110: break;
          case 18: 
            { System.out.println("Recognized comment: " + yytext()); prettyfier(yytext(), Categories.COMMENT );
            }
          case 111: break;
          case 19: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 112: break;
          case 20: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.LITERAL_STRING); return new Symbol(sym.LITERAL_STRING, yyline+1, yycolumn+1, yytext());
            }
          case 113: break;
          case 21: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QCOLALIAS, yyline+1, yycolumn+1, yytext());
            }
          case 114: break;
          case 22: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AS, yyline+1, yycolumn+1, yytext());
            }
          case 115: break;
          case 23: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IS, yyline+1, yycolumn+1, yytext());
            }
          case 116: break;
          case 24: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IN, yyline+1, yycolumn+1, yytext());
            }
          case 117: break;
          case 25: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ON, yyline+1, yycolumn+1, yytext());
            }
          case 118: break;
          case 26: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._OR, yyline+1, yycolumn+1, yytext());
            }
          case 119: break;
          case 27: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.BY, yyline+1, yycolumn+1, yytext());
            }
          case 120: break;
          case 28: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GET, yyline+1, yycolumn+1, yytext());
            }
          case 121: break;
          case 29: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LET, yyline+1, yycolumn+1, yytext());
            }
          case 122: break;
          case 30: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF, yyline+1, yycolumn+1, yytext());
            }
          case 123: break;
          case 31: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF2, yyline+1, yycolumn+1, yytext());
            }
          case 124: break;
          case 32: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 125: break;
          case 33: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MODEQ, yyline+1, yycolumn+1, yytext());
            }
          case 126: break;
          case 34: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._ANDEQ, yyline+1, yycolumn+1, yytext());
            }
          case 127: break;
          case 35: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._POWEQ, yyline+1, yycolumn+1, yytext());
            }
          case 128: break;
          case 36: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OREQ, yyline+1, yycolumn+1, yytext());
            }
          case 129: break;
          case 37: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.TABDOTCOL, yyline+1, yycolumn+1, yytext());
            }
          case 130: break;
          case 38: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.REAL, yyline+1, yycolumn+1, yytext());
            }
          case 131: break;
          case 39: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QTABLENAME, yyline+1, yycolumn+1, yytext());
            }
          case 132: break;
          case 40: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SET, yyline+1, yycolumn+1, yytext());
            }
          case 133: break;
          case 41: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SUM, yyline+1, yycolumn+1, yytext());
            }
          case 134: break;
          case 42: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.END, yyline+1, yycolumn+1, yytext());
            }
          case 135: break;
          case 43: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ASC, yyline+1, yycolumn+1, yytext());
            }
          case 136: break;
          case 44: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._AND, yyline+1, yycolumn+1, yytext());
            }
          case 137: break;
          case 45: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AVG, yyline+1, yycolumn+1, yytext());
            }
          case 138: break;
          case 46: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IIF, yyline+1, yycolumn+1, yytext());
            }
          case 139: break;
          case 47: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NOT, yyline+1, yycolumn+1, yytext());
            }
          case 140: break;
          case 48: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NVL, yyline+1, yycolumn+1, yytext());
            }
          case 141: break;
          case 49: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.MAX, yyline+1, yycolumn+1, yytext());
            }
          case 142: break;
          case 50: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.MIN, yyline+1, yycolumn+1, yytext());
            }
          case 143: break;
          case 51: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ELSE, yyline+1, yycolumn+1, yytext());
            }
          case 144: break;
          case 52: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LEFT, yyline+1, yycolumn+1, yytext());
            }
          case 145: break;
          case 53: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LPAD, yyline+1, yycolumn+1, yytext());
            }
          case 146: break;
          case 54: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CASE, yyline+1, yycolumn+1, yytext());
            }
          case 147: break;
          case 55: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TRIM, yyline+1, yycolumn+1, yytext());
            }
          case 148: break;
          case 56: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.THEN, yyline+1, yycolumn+1, yytext());
            }
          case 149: break;
          case 57: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DESC, yyline+1, yycolumn+1, yytext());
            }
          case 150: break;
          case 58: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INTO, yyline+1, yycolumn+1, yytext());
            }
          case 151: break;
          case 59: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NULL, yyline+1, yycolumn+1, yytext());
            }
          case 152: break;
          case 60: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NVL2, yyline+1, yycolumn+1, yytext());
            }
          case 153: break;
          case 61: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RPAD, yyline+1, yycolumn+1, yytext());
            }
          case 154: break;
          case 62: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FULL, yyline+1, yycolumn+1, yytext());
            }
          case 155: break;
          case 63: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FROM, yyline+1, yycolumn+1, yytext());
            }
          case 156: break;
          case 64: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WITH, yyline+1, yycolumn+1, yytext());
            }
          case 157: break;
          case 65: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHEN, yyline+1, yycolumn+1, yytext());
            }
          case 158: break;
          case 66: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.JOIN, yyline+1, yycolumn+1, yytext());
            }
          case 159: break;
          case 67: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LTRIM, yyline+1, yycolumn+1, yytext());
            }
          case 160: break;
          case 68: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LOWER, yyline+1, yycolumn+1, yytext());
            }
          case 161: break;
          case 69: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.COUNT, yyline+1, yycolumn+1, yytext());
            }
          case 162: break;
          case 70: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.USING, yyline+1, yycolumn+1, yytext());
            }
          case 163: break;
          case 71: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.UPPER, yyline+1, yycolumn+1, yytext());
            }
          case 164: break;
          case 72: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INSTR, yyline+1, yycolumn+1, yytext());
            }
          case 165: break;
          case 73: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INNER, yyline+1, yycolumn+1, yytext());
            }
          case 166: break;
          case 74: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RTRIM, yyline+1, yycolumn+1, yytext());
            }
          case 167: break;
          case 75: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RIGHT, yyline+1, yycolumn+1, yytext());
            }
          case 168: break;
          case 76: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.OUTER, yyline+1, yycolumn+1, yytext());
            }
          case 169: break;
          case 77: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ORDER, yyline+1, yycolumn+1, yytext());
            }
          case 170: break;
          case 78: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHERE, yyline+1, yycolumn+1, yytext());
            }
          case 171: break;
          case 79: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SELECT, yyline+1, yycolumn+1, yytext());
            }
          case 172: break;
          case 80: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LENGTH, yyline+1, yycolumn+1, yytext());
            }
          case 173: break;
          case 81: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CONCAT, yyline+1, yycolumn+1, yytext());
            }
          case 174: break;
          case 82: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CHOOSE, yyline+1, yycolumn+1, yytext());
            }
          case 175: break;
          case 83: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.UPDATE, yyline+1, yycolumn+1, yytext());
            }
          case 176: break;
          case 84: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DELETE, yyline+1, yycolumn+1, yytext());
            }
          case 177: break;
          case 85: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INSERT, yyline+1, yycolumn+1, yytext());
            }
          case 178: break;
          case 86: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NULLIF, yyline+1, yycolumn+1, yytext());
            }
          case 179: break;
          case 87: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.VALUES, yyline+1, yycolumn+1, yytext());
            }
          case 180: break;
          case 88: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SYSDATE, yyline+1, yycolumn+1, yytext());
            }
          case 181: break;
          case 89: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TO_CHAR, yyline+1, yycolumn+1, yytext());
            }
          case 182: break;
          case 90: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TO_DATE, yyline+1, yycolumn+1, yytext());
            }
          case 183: break;
          case 91: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NATURAL, yyline+1, yycolumn+1, yytext());
            }
          case 184: break;
          case 92: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.REPLACE, yyline+1, yycolumn+1, yytext());
            }
          case 185: break;
          case 93: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DISTINCT, yyline+1, yycolumn+1, yytext());
            }
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
