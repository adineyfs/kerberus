/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */

package com.kerberus.model.syntaxValidator.rules.sqlServer;


import java_cup.runtime.*; 		// Required to send lexemas to Cup
import java.util.LinkedList; 	// Required for LinkedList
import com.kerberus.model.syntaxValidator.rules.util.*;
import com.kerberus.model.syntaxValidator.rules.sqlServer.sym;

/**
 * This class is a simple example lexer.
 */


public class JFlex_Rules_SQL implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\2\1\15\1\16\1\1\22\0\1\6\1\57\1\17"+
    "\2\0\1\61\1\62\1\13\1\65\1\66\1\4\1\60\1\70\1\5"+
    "\1\12\1\3\2\10\1\51\7\10\1\0\1\67\1\56\1\54\1\55"+
    "\2\0\1\31\1\44\1\24\1\30\1\22\1\40\1\46\1\43\1\33"+
    "\1\53\1\50\1\23\1\41\1\34\1\36\1\27\1\7\1\35\1\21"+
    "\1\25\1\26\1\37\1\42\1\52\1\45\1\7\1\0\1\14\1\0"+
    "\1\63\1\11\1\0\1\31\1\44\1\24\1\30\1\22\1\40\1\46"+
    "\1\43\1\33\1\53\1\50\1\23\1\41\1\34\1\36\1\27\1\7"+
    "\1\35\1\21\1\25\1\26\1\37\1\42\1\52\1\45\1\7\1\0"+
    "\1\64\10\0\1\15\252\0\2\32\115\0\1\20\u1ea8\0\1\15\1\15"+
    "\u0100\0\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\4\1\10\6\1\1\14\6\1\10\1\11\1\12\1\1"+
    "\1\13\3\1\1\2\1\14\1\15\1\16\1\17\1\0"+
    "\1\20\1\21\1\22\1\23\3\0\1\24\5\0\1\25"+
    "\4\0\12\6\1\0\12\6\1\0\5\6\1\0\2\6"+
    "\2\26\4\6\1\27\1\0\1\30\1\27\1\6\1\30"+
    "\10\6\1\0\2\6\1\31\1\32\5\6\1\0\1\6"+
    "\1\0\3\6\1\33\2\6\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\2\0\2\22\1\45"+
    "\1\0\1\46\1\47\1\0\1\50\1\51\2\0\1\6"+
    "\1\50\1\51\2\6\1\0\1\6\1\52\1\0\5\6"+
    "\1\0\2\6\1\0\10\6\1\0\2\6\1\53\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\3\6\1\0\2\6"+
    "\2\54\1\55\1\6\1\56\1\57\1\60\1\0\1\61"+
    "\1\0\1\62\1\0\1\6\1\61\1\6\1\62\5\6"+
    "\1\63\1\64\4\6\1\0\11\6\1\65\2\66\1\0"+
    "\4\6\1\0\1\6\1\0\1\22\3\0\3\6\2\67"+
    "\1\0\2\6\1\70\1\0\1\6\1\71\2\72\1\6"+
    "\2\73\7\6\2\74\3\6\1\75\1\0\3\6\1\0"+
    "\1\6\2\76\1\6\1\77\1\0\1\6\1\100\1\6"+
    "\3\0\1\101\1\0\3\6\1\101\2\6\1\102\2\6"+
    "\1\103\2\6\1\0\1\6\1\104\1\0\5\6\1\105"+
    "\1\106\2\6\2\107\1\110\1\6\1\0\2\6\2\111"+
    "\3\0\3\6\1\0\2\6\2\112\1\113\2\6\1\114"+
    "\1\6\1\0\1\6\1\0\1\6\1\115\1\6\1\0"+
    "\2\6\2\116\1\117\1\6\2\120\2\6\1\0\1\6"+
    "\1\121\2\0\1\122\1\123\2\6\1\122\1\123\1\124"+
    "\1\0\5\6\2\125\2\126\1\127\1\130\2\6\1\131"+
    "\1\6\1\132\1\0\1\6\1\133\1\134\2\0\1\134"+
    "\2\6\2\135\1\136\1\137\1\140\1\141\2\142\2\143"+
    "\1\6\1\0\2\6\1\144\1\145\1\0\1\6\1\0"+
    "\1\6\1\146\1\147\1\146\1\147\2\150\1\151\3\6"+
    "\2\152\2\6\2\153\1\0\1\154\1\6\1\154\1\155"+
    "\1\0\1\6\1\156\1\0\1\6\1\0\1\6\1\157"+
    "\1\6\1\160\1\161\1\162\2\163\1\0\1\6\2\164"+
    "\2\165\1\166\1\167\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\2\170";

  private static int [] zzUnpackAction() {
    int [] result = new int[477];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\71\0\162\0\253\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\71\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\71\0\71\0\71\0\71\0\u08e8\0\71"+
    "\0\71\0\u0921\0\71\0\u095a\0\u0993\0\u01c8\0\71\0\u09cc"+
    "\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\71\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b"+
    "\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443"+
    "\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u011d\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u011d\0\u1a46\0\u1a7f\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\u1ab8"+
    "\0\u1af1\0\u1b2a\0\71\0\u1b63\0\u1b63\0\u0993\0\71\0\u1b9c"+
    "\0\71\0\71\0\u1bd5\0\u1c0e\0\u1c47\0\u011d\0\u011d\0\u1c80"+
    "\0\u1cb9\0\u1cf2\0\u1d2b\0\u011d\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f"+
    "\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7"+
    "\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f"+
    "\0\u21d8\0\u011d\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e"+
    "\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6"+
    "\0\71\0\u011d\0\u011d\0\u252f\0\u011d\0\u011d\0\u011d\0\u2568"+
    "\0\71\0\u25a1\0\u25da\0\u2613\0\u264c\0\u011d\0\u2685\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u011d\0\u2814\0\u284d"+
    "\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15"+
    "\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u011d\0\71\0\u011d"+
    "\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa"+
    "\0\u1ab8\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\71"+
    "\0\u011d\0\u2e89\0\u2ec2\0\u2efb\0\u011d\0\u2f34\0\u2f6d\0\u011d"+
    "\0\71\0\u011d\0\u2fa6\0\71\0\u011d\0\u2fdf\0\u3018\0\u3051"+
    "\0\u308a\0\u30c3\0\u30fc\0\u3135\0\71\0\u011d\0\u316e\0\u31a7"+
    "\0\u31e0\0\u011d\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336"+
    "\0\71\0\u011d\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u011d\0\u3453"+
    "\0\u348c\0\u34c5\0\u34fe\0\71\0\u3537\0\u3570\0\u35a9\0\u35e2"+
    "\0\u011d\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u011d\0\u3738"+
    "\0\u3771\0\u37aa\0\u37e3\0\u011d\0\u381c\0\u3855\0\u388e\0\u38c7"+
    "\0\u3900\0\u3939\0\u011d\0\u011d\0\u3972\0\u39ab\0\71\0\u011d"+
    "\0\u011d\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\71\0\u011d\0\u3ac8"+
    "\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90"+
    "\0\71\0\u011d\0\u011d\0\u3cc9\0\u3d02\0\u011d\0\u3d3b\0\u3d74"+
    "\0\u3dad\0\u3de6\0\u3e1f\0\u011d\0\u3e58\0\u3e91\0\u3eca\0\u3f03"+
    "\0\71\0\u011d\0\u011d\0\u3f3c\0\71\0\u011d\0\u3f75\0\u3fae"+
    "\0\u3fe7\0\u4020\0\u011d\0\u4059\0\u4092\0\71\0\71\0\u40cb"+
    "\0\u4104\0\u011d\0\u011d\0\u011d\0\u413d\0\u4176\0\u41af\0\u41e8"+
    "\0\u4221\0\u425a\0\71\0\u011d\0\71\0\u011d\0\u011d\0\u011d"+
    "\0\u4293\0\u42cc\0\u011d\0\u4305\0\u011d\0\u433e\0\u4377\0\u011d"+
    "\0\71\0\u43b0\0\u43e9\0\u011d\0\u4422\0\u445b\0\71\0\u011d"+
    "\0\u011d\0\u011d\0\u011d\0\u011d\0\71\0\u011d\0\71\0\u011d"+
    "\0\u4494\0\u44cd\0\u4506\0\u453f\0\u011d\0\u011d\0\u4578\0\u45b1"+
    "\0\u45ea\0\u4623\0\71\0\71\0\u011d\0\u011d\0\71\0\u011d"+
    "\0\u011d\0\u465c\0\u4695\0\u46ce\0\71\0\u011d\0\u4707\0\u4740"+
    "\0\71\0\u011d\0\u4779\0\71\0\u47b2\0\u011d\0\u011d\0\u47eb"+
    "\0\u4824\0\u011d\0\u485d\0\u4896\0\u48cf\0\u4908\0\u011d\0\u4941"+
    "\0\u011d\0\u497a\0\u011d\0\71\0\u011d\0\u49b3\0\u49ec\0\71"+
    "\0\u011d\0\71\0\u011d\0\u011d\0\u011d\0\u4a25\0\u4a5e\0\u4a97"+
    "\0\u4ad0\0\u4b09\0\u4b42\0\71\0\u011d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[477];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\11\1\2\1\12\2\2\1\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\7\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\7\1\40\1\2\1\7\1\10"+
    "\1\7\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\75\0"+
    "\1\57\47\0\1\60\70\0\1\61\21\0\1\62\46\0"+
    "\1\63\23\0\3\7\1\64\6\0\11\7\1\0\14\7"+
    "\1\0\4\7\25\0\1\10\1\0\1\65\36\0\1\10"+
    "\26\0\3\7\7\0\11\7\1\0\14\7\1\0\4\7"+
    "\15\0\13\66\1\67\1\70\54\66\7\71\1\72\1\71"+
    "\1\73\2\71\1\74\2\71\1\75\1\71\11\72\1\71"+
    "\14\72\1\71\1\72\1\71\2\72\15\71\22\0\1\76"+
    "\3\0\1\77\12\0\1\100\3\0\1\101\32\0\3\7"+
    "\1\64\6\0\1\7\1\102\3\7\1\103\3\7\1\0"+
    "\6\7\1\104\3\7\1\105\1\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\2\7\1\106\6\7\1\0\1\7"+
    "\1\107\12\7\1\0\2\7\1\110\1\7\24\0\3\7"+
    "\1\64\6\0\1\7\1\111\2\7\1\112\1\7\1\113"+
    "\2\7\1\114\1\115\2\7\1\116\10\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\10\7\1\117\1\0\2\7"+
    "\1\120\1\121\4\7\1\122\3\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\10\7\1\123\1\0\2\7\1\124"+
    "\1\125\4\7\1\126\3\7\1\0\4\7\24\0\3\7"+
    "\1\64\5\0\1\127\1\130\5\7\1\131\2\7\1\0"+
    "\1\7\1\132\12\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\1\7\1\133\6\7\1\134\1\135\1\136\1\7"+
    "\1\137\11\7\1\0\4\7\24\0\3\7\1\64\5\0"+
    "\1\140\1\141\1\7\1\142\4\7\1\143\1\7\1\0"+
    "\1\7\1\144\2\7\1\145\7\7\1\0\4\7\35\0"+
    "\2\146\10\0\2\147\1\150\43\0\3\7\1\64\5\0"+
    "\1\146\1\151\10\7\1\147\1\152\1\153\12\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\3\7\1\154\1\7"+
    "\1\155\2\7\1\156\1\0\3\7\1\157\1\160\7\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\1\7\1\161"+
    "\2\7\1\162\1\7\1\163\2\7\1\164\1\165\13\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\5\7\1\166"+
    "\3\7\1\0\1\7\1\167\1\170\11\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\10\7\1\171\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\5\7\1\172"+
    "\3\7\1\0\2\7\1\173\11\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\1\7\1\174\6\7\1\175\1\176"+
    "\1\177\13\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\11\7\1\200\1\201\7\7\1\202\3\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\10\7\1\203\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\11\7\1\0"+
    "\12\7\1\204\1\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\11\7\1\0\2\7\1\205\11\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\0\3\7\1\206"+
    "\10\7\1\0\4\7\71\0\1\207\70\0\1\210\1\211"+
    "\67\0\1\212\70\0\1\213\70\0\1\214\70\0\1\215"+
    "\70\0\1\216\70\0\1\217\14\0\4\220\1\221\64\220"+
    "\1\62\1\222\1\223\66\62\7\0\1\224\1\0\1\225"+
    "\7\0\11\224\1\0\14\224\1\0\1\224\1\0\2\224"+
    "\25\0\1\226\40\0\1\226\17\0\1\66\2\0\12\66"+
    "\2\0\52\66\14\71\1\74\2\71\1\75\60\71\3\72"+
    "\2\71\1\74\2\71\1\227\1\71\11\72\1\71\14\72"+
    "\1\71\4\72\24\71\3\72\2\71\1\74\2\71\1\75"+
    "\1\71\11\72\1\71\14\72\1\71\4\72\16\71\2\0"+
    "\12\71\2\0\52\71\23\0\1\230\1\0\1\231\104\0"+
    "\1\232\60\0\1\233\57\0\2\234\56\0\3\7\1\64"+
    "\6\0\2\7\1\235\1\7\1\236\4\7\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\11\7\1\0"+
    "\6\7\1\237\5\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\10\7\1\240\1\0\14\7\1\0\4\7\24\0"+
    "\3\7\1\64\5\0\1\234\1\241\10\7\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\5\0\1\242\1\243"+
    "\10\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\7\7\1\244\1\7\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\245\1\246\13\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\11\7\1\0"+
    "\1\7\1\247\3\7\1\250\6\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\11\7\1\0\2\7\1\251\11\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\10\7\1\252"+
    "\1\0\14\7\1\0\4\7\64\0\2\253\27\0\3\7"+
    "\1\64\6\0\11\7\1\0\14\7\1\253\1\254\3\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\0\7\7\1\255"+
    "\4\7\1\0\4\7\24\0\3\7\1\64\5\0\1\256"+
    "\1\257\10\7\1\0\14\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\1\7\1\260\7\7\1\0\14\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\2\7\1\261\2\7"+
    "\1\262\3\7\1\0\1\7\1\263\4\7\1\264\5\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\11\7\1\0"+
    "\3\7\1\265\10\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\11\7\1\0\11\7\1\266\2\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\267\1\270\13\7"+
    "\1\0\4\7\24\0\2\7\1\271\1\64\6\0\6\7"+
    "\1\272\2\7\1\0\14\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\1\7\1\273\7\7\1\0\14\7\1\0"+
    "\4\7\47\0\2\274\44\0\3\7\1\64\6\0\11\7"+
    "\1\274\1\275\13\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\6\7\1\276\1\277\1\7\1\0\14\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\11\7\1\300\1\301"+
    "\13\7\1\0\4\7\24\0\3\7\1\64\5\0\1\302"+
    "\1\303\1\7\1\304\6\7\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\4\7\1\305\4\7\1\0"+
    "\14\7\1\0\4\7\35\0\2\306\56\0\3\7\1\64"+
    "\5\0\1\306\1\307\10\7\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\0\3\7\1\310"+
    "\10\7\1\0\4\7\41\0\1\311\53\0\3\7\1\64"+
    "\6\0\3\7\1\312\5\7\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\2\7\1\313\1\7\1\314"+
    "\4\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\7\7\1\315\1\7\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\7\7\1\316\1\7\1\0"+
    "\14\7\1\0\4\7\24\0\3\7\1\64\6\0\11\7"+
    "\1\0\13\7\1\317\1\0\4\7\51\0\1\320\74\0"+
    "\1\321\50\0\2\322\3\0\1\323\6\0\1\324\43\0"+
    "\3\7\1\64\6\0\11\7\1\0\1\7\1\325\12\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\11\7\1\0"+
    "\5\7\1\326\6\7\1\0\4\7\24\0\3\7\1\64"+
    "\5\0\1\322\1\327\3\7\1\330\4\7\1\0\1\7"+
    "\1\331\12\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\11\7\1\0\10\7\1\332\3\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\2\7\1\333\6\7\1\0\6\7"+
    "\1\334\5\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\4\7\1\335\4\7\1\0\14\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\4\7\1\336\4\7\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\2\7\1\337"+
    "\5\7\1\340\1\0\14\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\6\7\1\341\2\7\1\0\14\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\11\7\1\0\2\7"+
    "\1\342\11\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\10\7\1\343\1\0\14\7\1\0\4\7\63\0\1\344"+
    "\31\0\3\7\1\64\6\0\11\7\1\0\13\7\1\345"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\4\7\1\346"+
    "\4\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\7\7\1\347\1\7\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\2\7\1\350\6\7\1\0"+
    "\2\7\1\351\11\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\2\7\1\352\6\7\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\0\3\7\1\353"+
    "\10\7\1\0\4\7\24\0\3\7\1\64\6\0\11\7"+
    "\1\0\2\7\1\354\11\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\4\7\1\355\4\7\1\0\14\7\1\0"+
    "\2\7\1\356\1\7\51\0\1\357\43\0\3\7\1\64"+
    "\6\0\11\7\1\0\1\7\1\360\12\7\1\0\4\7"+
    "\42\0\1\361\52\0\3\7\1\64\6\0\4\7\1\362"+
    "\4\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\1\7\1\363\7\7\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\0\4\7\1\364"+
    "\7\7\1\0\4\7\24\0\3\7\1\64\6\0\11\7"+
    "\1\0\3\7\1\365\10\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\11\7\1\366\1\367\13\7\1\0\4\7"+
    "\15\0\4\220\1\370\67\220\1\371\1\370\64\220\2\0"+
    "\1\223\75\0\3\224\7\0\11\224\1\0\14\224\1\0"+
    "\4\224\37\0\1\372\71\0\1\373\75\0\1\374\47\0"+
    "\3\7\1\64\6\0\1\7\1\375\7\7\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\2\7\1\376"+
    "\6\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\7\7\1\377\1\7\1\0\14\7\1\0\4\7"+
    "\37\0\1\u0100\55\0\3\7\1\64\6\0\1\7\1\u0101"+
    "\7\7\1\0\14\7\1\0\4\7\35\0\2\u0102\56\0"+
    "\3\7\1\64\5\0\1\u0102\1\u0103\10\7\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\11\7\1\0"+
    "\13\7\1\u0104\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\4\7\1\u0105\4\7\1\0\14\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\11\7\1\u0106\1\u0107\13\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\7\7\1\u0108\1\7"+
    "\1\0\14\7\1\0\4\7\37\0\1\u0109\55\0\3\7"+
    "\1\64\6\0\1\7\1\u010a\7\7\1\0\14\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\1\7\1\u010b\7\7"+
    "\1\0\14\7\1\0\4\7\37\0\1\u010c\55\0\3\7"+
    "\1\64\6\0\1\7\1\u010d\7\7\1\0\14\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\10\7\1\u010e\1\0"+
    "\14\7\1\0\4\7\24\0\3\7\1\64\6\0\5\7"+
    "\1\u010f\3\7\1\0\14\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\11\7\1\0\1\7\1\u0110\12\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\3\7\1\u0111\5\7"+
    "\1\0\14\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\11\7\1\0\6\7\1\u0112\5\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\11\7\1\0\3\7\1\u0113\10\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\2\7\1\u0114"+
    "\6\7\1\0\14\7\1\0\4\7\56\0\1\u0115\36\0"+
    "\3\7\1\64\6\0\11\7\1\0\6\7\1\u0116\5\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\3\7\1\u0117"+
    "\1\u0118\2\7\1\u0119\1\7\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\0\1\7\1\u011a"+
    "\12\7\1\0\4\7\51\0\1\u011b\43\0\3\7\1\64"+
    "\6\0\11\7\1\0\1\7\1\u011c\12\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\1\7\1\u011d\7\7\1\0"+
    "\14\7\1\0\4\7\24\0\3\7\1\64\6\0\10\7"+
    "\1\u011e\1\0\14\7\1\0\4\7\53\0\1\u011f\41\0"+
    "\3\7\1\64\6\0\11\7\1\0\3\7\1\u0120\10\7"+
    "\1\0\4\7\41\0\1\u0121\53\0\3\7\1\64\6\0"+
    "\3\7\1\u0122\5\7\1\0\14\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\1\7\1\u0123\7\7\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\1\7\1\u0124"+
    "\7\7\1\0\14\7\1\0\4\7\42\0\1\u0125\52\0"+
    "\3\7\1\64\6\0\4\7\1\u0126\4\7\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\6\7\1\u0127"+
    "\2\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\1\7\1\u0128\7\7\1\0\14\7\1\0\4\7"+
    "\43\0\1\u0129\64\0\1\u012a\2\0\1\u012b\101\0\1\u012c"+
    "\54\0\1\u012d\55\0\3\7\1\64\6\0\5\7\1\u012e"+
    "\3\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\1\7\1\u012f\2\7\1\u0130\4\7\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\11\7\1\0"+
    "\3\7\1\u0131\10\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\1\7\1\u0132\7\7\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\10\7\1\u0133\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\2\7\1\u0134"+
    "\6\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\11\7\1\0\11\7\1\u0135\2\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\5\7\1\u0136\3\7\1\0"+
    "\14\7\1\0\4\7\24\0\3\7\1\64\6\0\11\7"+
    "\1\0\14\7\1\0\1\7\1\u0137\2\7\24\0\3\7"+
    "\1\64\6\0\11\7\1\0\2\7\1\u0138\11\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\2\7\1\u0139\6\7"+
    "\1\0\14\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\11\7\1\u013a\1\u013b\13\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\7\7\1\u013c\1\7\1\0\14\7\1\0"+
    "\4\7\60\0\1\u013d\34\0\3\7\1\64\6\0\11\7"+
    "\1\0\10\7\1\u013e\3\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\1\7\1\u013f\7\7\1\0\14\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\1\7\1\u0140\7\7"+
    "\1\0\14\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\5\7\1\u0141\3\7\1\0\14\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\3\7\1\u0142\5\7\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\2\7\1\u0143"+
    "\6\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\11\7\1\0\6\7\1\u0144\5\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\0\13\7\1\u0145"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\3\7\1\u0146"+
    "\5\7\1\0\14\7\1\0\4\7\60\0\1\u0147\34\0"+
    "\3\7\1\64\6\0\11\7\1\0\10\7\1\u0148\3\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\11\7\1\0"+
    "\1\7\1\u0149\1\u014a\11\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\11\7\1\u014b\1\u014c\13\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\5\7\1\u014d\3\7\1\0"+
    "\14\7\1\0\4\7\51\0\1\u014e\43\0\3\7\1\64"+
    "\6\0\11\7\1\0\1\7\1\u014f\12\7\1\0\4\7"+
    "\15\0\3\220\1\223\1\370\64\220\24\0\1\u0150\67\0"+
    "\1\u0151\76\0\1\u0152\46\0\3\7\1\64\6\0\3\7"+
    "\1\u0153\5\7\1\0\14\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\2\7\1\u0154\6\7\1\0\14\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\10\7\1\u0155\1\0"+
    "\14\7\1\0\4\7\42\0\1\u0156\52\0\3\7\1\64"+
    "\6\0\4\7\1\u0157\4\7\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\4\7\1\u0158\4\7\1\0"+
    "\14\7\1\0\4\7\56\0\1\u0159\36\0\3\7\1\64"+
    "\6\0\11\7\1\0\6\7\1\u015a\5\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\0\2\7\1\u015b"+
    "\11\7\1\0\4\7\24\0\3\7\1\64\6\0\4\7"+
    "\1\u015c\4\7\1\0\14\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\11\7\1\0\6\7\1\u015d\5\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\4\7\1\u015e\4\7"+
    "\1\0\14\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\10\7\1\u015f\1\0\14\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\11\7\1\u0160\1\u0161\13\7\1\0\4\7"+
    "\24\0\3\7\1\64\5\0\1\u0162\1\u0163\10\7\1\0"+
    "\14\7\1\0\4\7\24\0\3\7\1\64\6\0\1\7"+
    "\1\u0164\7\7\1\0\14\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\11\7\1\0\10\7\1\u0165\3\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\11\7\1\u0166\1\u0167"+
    "\13\7\1\0\4\7\24\0\3\7\1\64\6\0\10\7"+
    "\1\u0168\1\0\14\7\1\0\4\7\63\0\1\u0169\31\0"+
    "\3\7\1\64\6\0\11\7\1\0\13\7\1\u016a\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\11\7\1\0\2\7"+
    "\1\u016b\11\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\4\7\1\u016c\4\7\1\0\14\7\1\0\4\7\51\0"+
    "\1\u016d\43\0\3\7\1\64\6\0\11\7\1\0\1\7"+
    "\1\u016e\12\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\4\7\1\u016f\4\7\1\0\14\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\4\7\1\u0170\4\7\1\0\14\7"+
    "\1\0\4\7\47\0\2\u0171\44\0\3\7\1\64\6\0"+
    "\11\7\1\u0171\1\u0172\13\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\11\7\1\0\2\7\1\u0173\11\7\1\0"+
    "\4\7\40\0\1\u0174\102\0\1\u0175\70\0\1\u0176\70\0"+
    "\1\u0177\42\0\3\7\1\64\6\0\2\7\1\u0178\6\7"+
    "\1\0\14\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\11\7\1\0\2\7\1\u0179\11\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\11\7\1\0\2\7\1\u017a\11\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\11\7\1\0"+
    "\2\7\1\u017b\11\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\11\7\1\0\2\7\1\u017c\11\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\u017d\1\u017e\13\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\1\7\1\u017f"+
    "\7\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\11\7\1\0\2\7\1\u0180\11\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\3\7\1\u0181\5\7\1\0"+
    "\14\7\1\0\4\7\24\0\3\7\1\64\6\0\10\7"+
    "\1\u0182\1\0\14\7\1\0\4\7\56\0\1\u0183\36\0"+
    "\3\7\1\64\6\0\11\7\1\0\6\7\1\u0184\5\7"+
    "\1\0\4\7\42\0\1\u0185\52\0\3\7\1\64\6\0"+
    "\4\7\1\u0186\4\7\1\0\14\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\11\7\1\0\2\7\1\u0187\11\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\11\7\1\0"+
    "\2\7\1\u0188\11\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\1\7\1\u0189\7\7\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\0\10\7\1\u018a"+
    "\3\7\1\0\4\7\24\0\3\7\1\64\6\0\1\7"+
    "\1\u018b\7\7\1\0\14\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\11\7\1\0\10\7\1\u018c\3\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\1\7\1\u018d\7\7"+
    "\1\0\14\7\1\0\4\7\51\0\1\u018e\43\0\3\7"+
    "\1\64\6\0\11\7\1\0\1\7\1\u018f\12\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\6\7\1\u0190\2\7"+
    "\1\0\14\7\1\0\4\7\42\0\1\u0191\75\0\2\u0192"+
    "\62\0\1\u0193\52\0\3\7\1\64\6\0\4\7\1\u0194"+
    "\4\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\11\7\1\u0192\1\u0195\13\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\4\7\1\u0196\4\7\1\0\14\7"+
    "\1\0\4\7\35\0\2\u0197\56\0\3\7\1\64\5\0"+
    "\1\u0197\1\u0198\10\7\1\0\14\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\11\7\1\0\10\7\1\u0199\3\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\1\7\1\u019a"+
    "\7\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\11\7\1\0\1\7\1\u019b\12\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\4\7\1\u019c\4\7\1\0"+
    "\14\7\1\0\4\7\42\0\1\u019d\52\0\3\7\1\64"+
    "\6\0\4\7\1\u019e\4\7\1\0\14\7\1\0\4\7"+
    "\37\0\1\u019f\55\0\3\7\1\64\6\0\1\7\1\u01a0"+
    "\7\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\10\7\1\u01a1\1\0\14\7\1\0\4\7\56\0"+
    "\1\u01a2\36\0\3\7\1\64\6\0\11\7\1\0\6\7"+
    "\1\u01a3\5\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\4\7\1\u01a4\4\7\1\0\14\7\1\0\4\7\24\0"+
    "\3\7\1\64\6\0\1\7\1\u01a5\7\7\1\0\14\7"+
    "\1\0\4\7\24\0\3\7\1\64\6\0\1\7\1\u01a6"+
    "\7\7\1\0\14\7\1\0\4\7\24\0\3\7\1\64"+
    "\6\0\11\7\1\u01a7\1\u01a8\13\7\1\0\4\7\51\0"+
    "\1\u01a9\43\0\3\7\1\64\6\0\11\7\1\0\1\7"+
    "\1\u01aa\12\7\1\0\4\7\40\0\1\u01ab\72\0\1\u01ac"+
    "\52\0\3\7\1\64\6\0\2\7\1\u01ad\6\7\1\0"+
    "\14\7\1\0\4\7\24\0\3\7\1\64\6\0\4\7"+
    "\1\u01ae\4\7\1\0\14\7\1\0\4\7\55\0\1\u01af"+
    "\37\0\3\7\1\64\6\0\11\7\1\0\5\7\1\u01b0"+
    "\6\7\1\0\4\7\24\0\3\7\1\64\6\0\11\7"+
    "\1\0\2\7\1\u01b1\11\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\10\7\1\u01b2\1\0\14\7\1\0\4\7"+
    "\24\0\3\7\1\64\6\0\11\7\1\0\10\7\1\u01b3"+
    "\3\7\1\0\4\7\24\0\3\7\1\64\6\0\3\7"+
    "\1\u01b4\5\7\1\0\14\7\1\0\4\7\24\0\3\7"+
    "\1\64\5\0\1\u01b5\1\u01b6\10\7\1\0\14\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\10\7\1\u01b7\1\0"+
    "\14\7\1\0\4\7\24\0\3\7\1\64\6\0\1\7"+
    "\1\u01b8\7\7\1\0\14\7\1\0\4\7\63\0\1\u01b9"+
    "\31\0\3\7\1\64\6\0\11\7\1\0\13\7\1\u01ba"+
    "\1\0\4\7\51\0\1\u01bb\56\0\1\u01bc\55\0\3\7"+
    "\1\64\6\0\11\7\1\0\1\7\1\u01bd\12\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\1\7\1\u01be\7\7"+
    "\1\0\14\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\11\7\1\0\2\7\1\u01bf\11\7\1\0\4\7\37\0"+
    "\1\u01c0\55\0\3\7\1\64\6\0\1\7\1\u01c1\7\7"+
    "\1\0\14\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\1\7\1\u01c2\7\7\1\0\14\7\1\0\4\7\56\0"+
    "\1\u01c3\36\0\3\7\1\64\6\0\11\7\1\0\6\7"+
    "\1\u01c4\5\7\1\0\4\7\41\0\1\u01c5\53\0\3\7"+
    "\1\64\6\0\3\7\1\u01c6\5\7\1\0\14\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\2\7\1\u01c7\6\7"+
    "\1\0\14\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\10\7\1\u01c8\1\0\14\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\1\7\1\u01c9\7\7\1\0\14\7\1\0"+
    "\4\7\24\0\3\7\1\64\6\0\11\7\1\0\2\7"+
    "\1\u01ca\11\7\1\0\4\7\24\0\3\7\1\64\6\0"+
    "\7\7\1\u01cb\1\7\1\0\14\7\1\0\4\7\42\0"+
    "\1\u01cc\52\0\3\7\1\64\6\0\4\7\1\u01cd\4\7"+
    "\1\0\14\7\1\0\4\7\35\0\2\u01ce\56\0\3\7"+
    "\1\64\5\0\1\u01ce\1\u01cf\10\7\1\0\14\7\1\0"+
    "\4\7\37\0\1\u01d0\55\0\3\7\1\64\6\0\1\7"+
    "\1\u01d1\7\7\1\0\14\7\1\0\4\7\42\0\1\u01d2"+
    "\52\0\3\7\1\64\6\0\4\7\1\u01d3\4\7\1\0"+
    "\14\7\1\0\4\7\24\0\3\7\1\64\6\0\11\7"+
    "\1\0\2\7\1\u01d4\11\7\1\0\4\7\24\0\3\7"+
    "\1\64\6\0\11\7\1\0\14\7\1\0\1\7\1\u01d5"+
    "\2\7\42\0\1\u01d6\52\0\3\7\1\64\6\0\4\7"+
    "\1\u01d7\4\7\1\0\14\7\1\0\4\7\46\0\1\u01d8"+
    "\46\0\3\7\1\64\6\0\10\7\1\u01d9\1\0\14\7"+
    "\1\0\4\7\56\0\1\u01da\36\0\3\7\1\64\6\0"+
    "\11\7\1\0\6\7\1\u01db\5\7\1\0\4\7\44\0"+
    "\1\u01dc\50\0\3\7\1\64\6\0\6\7\1\u01dd\2\7"+
    "\1\0\14\7\1\0\4\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19323];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\36\1\1\11\10\1\4\11\1\0\2\11"+
    "\1\1\1\11\3\0\1\11\5\0\1\11\4\0\12\1"+
    "\1\0\12\1\1\0\5\1\1\0\11\1\1\0\14\1"+
    "\1\0\11\1\1\0\1\1\1\0\6\1\11\11\2\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\0\2\11"+
    "\2\0\5\1\1\0\2\1\1\0\5\1\1\0\2\1"+
    "\1\0\10\1\1\0\4\1\1\0\3\1\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\1\11\6\1\1\0\1\11"+
    "\1\0\1\1\1\0\17\1\1\0\12\1\1\11\1\1"+
    "\1\0\4\1\1\0\1\1\1\0\1\1\3\0\3\1"+
    "\1\11\1\1\1\0\3\1\1\0\2\1\1\11\2\1"+
    "\1\11\10\1\1\11\5\1\1\0\3\1\1\0\1\1"+
    "\1\11\3\1\1\0\3\1\3\0\1\11\1\0\14\1"+
    "\1\0\2\1\1\0\11\1\1\11\3\1\1\0\2\1"+
    "\1\11\1\1\3\0\3\1\1\0\2\1\1\11\6\1"+
    "\1\0\1\1\1\0\3\1\1\0\2\1\1\11\3\1"+
    "\1\11\3\1\1\0\2\1\2\0\2\11\5\1\1\0"+
    "\5\1\1\11\1\1\1\11\10\1\1\0\2\1\1\11"+
    "\2\0\3\1\1\11\5\1\1\11\1\1\1\11\2\1"+
    "\1\0\4\1\1\0\1\1\1\0\1\1\2\11\2\1"+
    "\1\11\5\1\1\11\3\1\1\11\1\1\1\0\1\11"+
    "\3\1\1\0\2\1\1\0\1\1\1\0\6\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[477];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	// Initialize any necessary variables here
	
	// A table I will create to store Lexical Errors found | import library for LinkedList
	public LinkedList<TError> TableLE = new LinkedList<TError>();
	public LinkedList<String> StmtCopy = new LinkedList<String>(); // DELETE THIS, will be replaced by PrettyfiedStatement
	
	public LinkedList<PrettyStatement> PrettyfiedStatement = new LinkedList<PrettyStatement>();
	
		
	// Will need to create a structure to save the lexeme and its corresponding category code.
	public void prettyfier (String lexeme, int category) {
		
		PrettyStatement ps = new PrettyStatement(lexeme,category);
		PrettyfiedStatement.add(ps);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JFlex_Rules_SQL(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("\n### Lexical error (Illegal element) ### - '" + yytext() + "' line: " + yyline + ", column: " + yychar + "\n"); 
				  	  TError errors_found = new TError(yytext(),yyline,yycolumn,"Lexical Error","Unrecognized symbol.");
				  	  TableLE.add(errors_found); 
				  	  prettyfier(yytext(), Categories.ERROR);
					  return new Symbol(sym.ILLEGAL_CHAR, yyline, yycolumn, yytext());
            }
          case 121: break;
          case 2: 
            { System.out.println("Recognized space: " + yytext()); prettyfier(yytext(), Categories.NOTHING );
            }
          case 122: break;
          case 3: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDE, yyline+1, yycolumn+1, yytext());
            }
          case 123: break;
          case 4: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._STAR, yyline+1, yycolumn+1, yytext());
            }
          case 124: break;
          case 5: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUS, yyline+1, yycolumn+1, yytext());
            }
          case 125: break;
          case 6: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.IDENTIFIER, yyline+1, yycolumn+1, yytext());
            }
          case 126: break;
          case 7: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.INTEGER, yyline+1, yycolumn+1, yytext());
            }
          case 127: break;
          case 8: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._EQU, yyline+1, yycolumn+1, yytext());
            }
          case 128: break;
          case 9: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GT, yyline+1, yycolumn+1, yytext());
            }
          case 129: break;
          case 10: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LT, yyline+1, yycolumn+1, yytext());
            }
          case 130: break;
          case 11: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUS, yyline+1, yycolumn+1, yytext());
            }
          case 131: break;
          case 12: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OPENPAR, yyline+1, yycolumn+1, yytext());
            }
          case 132: break;
          case 13: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._CLOSEPAR, yyline+1, yycolumn+1, yytext());
            }
          case 133: break;
          case 14: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._SEMCOL2, yyline+1, yycolumn+1, yytext());
            }
          case 134: break;
          case 15: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._COMMA, yyline+1, yycolumn+1, yytext());
            }
          case 135: break;
          case 16: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDEEQ, yyline+1, yycolumn+1, yytext());
            }
          case 136: break;
          case 17: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._TIMESEQ, yyline+1, yycolumn+1, yytext());
            }
          case 137: break;
          case 18: 
            { System.out.println("Recognized comment: " + yytext()); prettyfier(yytext(), Categories.COMMENT );
            }
          case 138: break;
          case 19: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 139: break;
          case 20: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.LITERAL_STRING); return new Symbol(sym.LITERAL_STRING, yyline+1, yycolumn+1, yytext());
            }
          case 140: break;
          case 21: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QCOLALIAS, yyline+1, yycolumn+1, yytext());
            }
          case 141: break;
          case 22: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AS, yyline+1, yycolumn+1, yytext());
            }
          case 142: break;
          case 23: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IS, yyline+1, yycolumn+1, yytext());
            }
          case 143: break;
          case 24: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IN, yyline+1, yycolumn+1, yytext());
            }
          case 144: break;
          case 25: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ON, yyline+1, yycolumn+1, yytext());
            }
          case 145: break;
          case 26: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._OR, yyline+1, yycolumn+1, yytext());
            }
          case 146: break;
          case 27: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.BY, yyline+1, yycolumn+1, yytext());
            }
          case 147: break;
          case 28: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GET, yyline+1, yycolumn+1, yytext());
            }
          case 148: break;
          case 29: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LET, yyline+1, yycolumn+1, yytext());
            }
          case 149: break;
          case 30: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF, yyline+1, yycolumn+1, yytext());
            }
          case 150: break;
          case 31: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF2, yyline+1, yycolumn+1, yytext());
            }
          case 151: break;
          case 32: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 152: break;
          case 33: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MODEQ, yyline+1, yycolumn+1, yytext());
            }
          case 153: break;
          case 34: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._ANDEQ, yyline+1, yycolumn+1, yytext());
            }
          case 154: break;
          case 35: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._POWEQ, yyline+1, yycolumn+1, yytext());
            }
          case 155: break;
          case 36: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OREQ, yyline+1, yycolumn+1, yytext());
            }
          case 156: break;
          case 37: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.TABDOTCOL, yyline+1, yycolumn+1, yytext());
            }
          case 157: break;
          case 38: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.REAL, yyline+1, yycolumn+1, yytext());
            }
          case 158: break;
          case 39: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QTABLENAME, yyline+1, yycolumn+1, yytext());
            }
          case 159: break;
          case 40: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SET, yyline+1, yycolumn+1, yytext());
            }
          case 160: break;
          case 41: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SUM, yyline+1, yycolumn+1, yytext());
            }
          case 161: break;
          case 42: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.END, yyline+1, yycolumn+1, yytext());
            }
          case 162: break;
          case 43: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TOP, yyline+1, yycolumn+1, yytext());
            }
          case 163: break;
          case 44: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ASC, yyline+1, yycolumn+1, yytext());
            }
          case 164: break;
          case 45: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ALL, yyline+1, yycolumn+1, yytext());
            }
          case 165: break;
          case 46: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ADD, yyline+1, yycolumn+1, yytext());
            }
          case 166: break;
          case 47: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._AND, yyline+1, yycolumn+1, yytext());
            }
          case 167: break;
          case 48: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AVG, yyline+1, yycolumn+1, yytext());
            }
          case 168: break;
          case 49: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IIF, yyline+1, yycolumn+1, yytext());
            }
          case 169: break;
          case 50: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INT, yyline+1, yycolumn+1, yytext());
            }
          case 170: break;
          case 51: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NOT, yyline+1, yycolumn+1, yytext());
            }
          case 171: break;
          case 52: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NVL, yyline+1, yycolumn+1, yytext());
            }
          case 172: break;
          case 53: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.MAX, yyline+1, yycolumn+1, yytext());
            }
          case 173: break;
          case 54: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.MIN, yyline+1, yycolumn+1, yytext());
            }
          case 174: break;
          case 55: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ELSE, yyline+1, yycolumn+1, yytext());
            }
          case 175: break;
          case 56: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LEFT, yyline+1, yycolumn+1, yytext());
            }
          case 176: break;
          case 57: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LPAD, yyline+1, yycolumn+1, yytext());
            }
          case 177: break;
          case 58: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LIKE, yyline+1, yycolumn+1, yytext());
            }
          case 178: break;
          case 59: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CASE, yyline+1, yycolumn+1, yytext());
            }
          case 179: break;
          case 60: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TRIM, yyline+1, yycolumn+1, yytext());
            }
          case 180: break;
          case 61: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.THEN, yyline+1, yycolumn+1, yytext());
            }
          case 181: break;
          case 62: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DESC, yyline+1, yycolumn+1, yytext());
            }
          case 182: break;
          case 63: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DATE, yyline+1, yycolumn+1, yytext());
            }
          case 183: break;
          case 64: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DROP, yyline+1, yycolumn+1, yytext());
            }
          case 184: break;
          case 65: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INTO, yyline+1, yycolumn+1, yytext());
            }
          case 185: break;
          case 66: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NULL, yyline+1, yycolumn+1, yytext());
            }
          case 186: break;
          case 67: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NVL2, yyline+1, yycolumn+1, yytext());
            }
          case 187: break;
          case 68: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RPAD, yyline+1, yycolumn+1, yytext());
            }
          case 188: break;
          case 69: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FULL, yyline+1, yycolumn+1, yytext());
            }
          case 189: break;
          case 70: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FROM, yyline+1, yycolumn+1, yytext());
            }
          case 190: break;
          case 71: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WITH, yyline+1, yycolumn+1, yytext());
            }
          case 191: break;
          case 72: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHEN, yyline+1, yycolumn+1, yytext());
            }
          case 192: break;
          case 73: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.JOIN, yyline+1, yycolumn+1, yytext());
            }
          case 193: break;
          case 74: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LTRIM, yyline+1, yycolumn+1, yytext());
            }
          case 194: break;
          case 75: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LOWER, yyline+1, yycolumn+1, yytext());
            }
          case 195: break;
          case 76: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.COUNT, yyline+1, yycolumn+1, yytext());
            }
          case 196: break;
          case 77: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TABLE, yyline+1, yycolumn+1, yytext());
            }
          case 197: break;
          case 78: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.USING, yyline+1, yycolumn+1, yytext());
            }
          case 198: break;
          case 79: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.UPPER, yyline+1, yycolumn+1, yytext());
            }
          case 199: break;
          case 80: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.UNION, yyline+1, yycolumn+1, yytext());
            }
          case 200: break;
          case 81: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ALTER, yyline+1, yycolumn+1, yytext());
            }
          case 201: break;
          case 82: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INSTR, yyline+1, yycolumn+1, yytext());
            }
          case 202: break;
          case 83: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INNER, yyline+1, yycolumn+1, yytext());
            }
          case 203: break;
          case 84: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NCHAR, yyline+1, yycolumn+1, yytext());
            }
          case 204: break;
          case 85: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RTRIM, yyline+1, yycolumn+1, yytext());
            }
          case 205: break;
          case 86: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RIGHT, yyline+1, yycolumn+1, yytext());
            }
          case 206: break;
          case 87: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.OUTER, yyline+1, yycolumn+1, yytext());
            }
          case 207: break;
          case 88: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ORDER, yyline+1, yycolumn+1, yytext());
            }
          case 208: break;
          case 89: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.MERGE, yyline+1, yycolumn+1, yytext());
            }
          case 209: break;
          case 90: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHERE, yyline+1, yycolumn+1, yytext());
            }
          case 210: break;
          case 91: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.GROUP, yyline+1, yycolumn+1, yytext());
            }
          case 211: break;
          case 92: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SELECT, yyline+1, yycolumn+1, yytext());
            }
          case 212: break;
          case 93: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.EXISTS, yyline+1, yycolumn+1, yytext());
            }
          case 213: break;
          case 94: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LENGTH, yyline+1, yycolumn+1, yytext());
            }
          case 214: break;
          case 95: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CREATE, yyline+1, yycolumn+1, yytext());
            }
          case 215: break;
          case 96: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.COLUMN, yyline+1, yycolumn+1, yytext());
            }
          case 216: break;
          case 97: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CONCAT, yyline+1, yycolumn+1, yytext());
            }
          case 217: break;
          case 98: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.COMMIT, yyline+1, yycolumn+1, yytext());
            }
          case 218: break;
          case 99: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CHOOSE, yyline+1, yycolumn+1, yytext());
            }
          case 219: break;
          case 100: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.UPDATE, yyline+1, yycolumn+1, yytext());
            }
          case 220: break;
          case 101: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DELETE, yyline+1, yycolumn+1, yytext());
            }
          case 221: break;
          case 102: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ISNULL, yyline+1, yycolumn+1, yytext());
            }
          case 222: break;
          case 103: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INSERT, yyline+1, yycolumn+1, yytext());
            }
          case 223: break;
          case 104: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NULLIF, yyline+1, yycolumn+1, yytext());
            }
          case 224: break;
          case 105: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NUMBER, yyline+1, yycolumn+1, yytext());
            }
          case 225: break;
          case 106: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.VALUES, yyline+1, yycolumn+1, yytext());
            }
          case 226: break;
          case 107: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.HAVING, yyline+1, yycolumn+1, yytext());
            }
          case 227: break;
          case 108: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SYSDATE, yyline+1, yycolumn+1, yytext());
            }
          case 228: break;
          case 109: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TO_CHAR, yyline+1, yycolumn+1, yytext());
            }
          case 229: break;
          case 110: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TO_DATE, yyline+1, yycolumn+1, yytext());
            }
          case 230: break;
          case 111: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NATURAL, yyline+1, yycolumn+1, yytext());
            }
          case 231: break;
          case 112: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.REPLACE, yyline+1, yycolumn+1, yytext());
            }
          case 232: break;
          case 113: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.VARCHAR, yyline+1, yycolumn+1, yytext());
            }
          case 233: break;
          case 114: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.MATCHED, yyline+1, yycolumn+1, yytext());
            }
          case 234: break;
          case 115: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SMALLINT, yyline+1, yycolumn+1, yytext());
            }
          case 235: break;
          case 116: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DATETIME, yyline+1, yycolumn+1, yytext());
            }
          case 236: break;
          case 117: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DISTINCT, yyline+1, yycolumn+1, yytext());
            }
          case 237: break;
          case 118: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NVARCHAR, yyline+1, yycolumn+1, yytext());
            }
          case 238: break;
          case 119: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.VARCHAR2, yyline+1, yycolumn+1, yytext());
            }
          case 239: break;
          case 120: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TO_TIMESTAMP, yyline+1, yycolumn+1, yytext());
            }
          case 240: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
