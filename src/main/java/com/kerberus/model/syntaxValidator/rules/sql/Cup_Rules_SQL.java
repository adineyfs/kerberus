
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.kerberus.model.syntaxValidator.rules.sql;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.HashSet;
import java.io.*;
import com.kerberus.model.syntaxValidator.rules.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Cup_Rules_SQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Cup_Rules_SQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Cup_Rules_SQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup_Rules_SQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\334\000\002\002\004\000\002\012\004\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\003\000\002\015\005\000" +
    "\002\015\006\000\002\015\006\000\002\015\007\000\002" +
    "\016\004\000\002\102\004\000\002\102\003\000\002\103" +
    "\005\000\002\103\004\000\002\103\005\000\002\103\005" +
    "\000\002\107\004\000\002\107\004\000\002\107\004\000" +
    "\002\107\005\000\002\107\005\000\002\107\005\000\002" +
    "\105\004\000\002\106\005\000\002\106\003\000\002\104" +
    "\005\000\002\017\004\000\002\017\004\000\002\020\012" +
    "\000\002\020\010\000\002\021\013\000\002\021\011\000" +
    "\002\022\005\000\002\023\004\000\002\023\005\000\002" +
    "\023\004\000\002\003\003\000\002\002\003\000\002\071" +
    "\005\000\002\071\003\000\002\026\004\000\002\026\003" +
    "\000\002\116\003\000\002\117\003\000\002\117\004\000" +
    "\002\120\005\000\002\120\003\000\002\120\003\000\002" +
    "\120\003\000\002\121\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\027\003\000\002\027\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\033\003\000\002\032\003\000\002\030\003" +
    "\000\002\030\003\000\002\044\010\000\002\046\006\000" +
    "\002\050\006\000\002\052\010\000\002\054\006\000\002" +
    "\056\010\000\002\062\006\000\002\060\006\000\002\064" +
    "\006\000\002\034\006\000\002\034\006\000\002\042\006" +
    "\000\002\042\006\000\002\035\004\000\002\035\004\000" +
    "\002\035\003\000\002\035\003\000\002\036\012\000\002" +
    "\040\016\000\002\037\005\000\002\037\003\000\002\045" +
    "\005\000\002\045\003\000\002\055\005\000\002\055\003" +
    "\000\002\057\003\000\002\061\003\000\002\061\003\000" +
    "\002\063\003\000\002\063\003\000\002\047\007\000\002" +
    "\051\007\000\002\066\005\000\002\066\007\000\002\053" +
    "\003\000\002\043\004\000\002\043\004\000\002\043\003" +
    "\000\002\043\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\065\005\000\002\065" +
    "\005\000\002\072\003\000\002\072\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\122\005\000\002" +
    "\122\006\000\002\122\006\000\002\122\007\000\002\123" +
    "\004\000\002\123\003\000\002\124\004\000\002\126\004" +
    "\000\002\126\004\000\002\127\004\000\002\125\004\000" +
    "\002\130\007\000\002\130\007\000\002\130\006\000\002" +
    "\130\004\000\002\130\004\000\002\132\003\000\002\133" +
    "\004\000\002\133\003\000\002\131\003\000\002\135\005" +
    "\000\002\135\003\000\002\135\003\000\002\136\005\000" +
    "\002\136\005\000\002\137\003\000\002\137\003\000\002" +
    "\137\003\000\002\134\003\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\140\005\000\002\141\005" +
    "\000\002\142\003\000\002\142\003\000\002\142\003\000" +
    "\002\142\003\000\002\143\003\000\002\143\003\000\002" +
    "\143\003\000\002\143\003\000\002\143\003\000\002\143" +
    "\003\000\002\143\003\000\002\143\003\000\002\143\003" +
    "\000\002\144\007\000\002\144\004\000\002\067\004\000" +
    "\002\007\005\000\002\007\003\000\002\004\003\000\002" +
    "\006\003\000\002\006\003\000\002\010\003\000\002\011" +
    "\004\000\002\011\004\000\002\070\004\000\002\005\003" +
    "\000\002\110\005\000\002\110\003\000\002\111\005\000" +
    "\002\111\005\000\002\115\003\000\002\076\005\000\002" +
    "\077\003\000\002\077\003\000\002\101\004\000\002\101" +
    "\005\000\002\101\005\000\002\101\006\000\002\024\004" +
    "\000\002\100\005\000\002\100\003\000\002\075\003\000" +
    "\002\075\003\000\002\114\003\000\002\114\003\000\002" +
    "\114\003\000\002\114\003\000\002\114\003\000\002\114" +
    "\003\000\002\113\003\000\002\113\003\000\002\113\003" +
    "\000\002\113\003\000\002\113\003\000\002\113\003\000" +
    "\002\113\003\000\002\112\003\000\002\112\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0185\000\014\003\016\004\017\005\006\007\014\012" +
    "\020\001\002\000\062\022\107\026\u0186\027\032\030\122" +
    "\031\105\032\053\033\052\034\050\035\076\036\124\037" +
    "\126\040\066\041\123\042\057\043\065\044\125\045\055" +
    "\052\037\053\056\054\104\055\033\057\031\105\111\110" +
    "\u0184\001\002\000\004\010\271\001\002\000\006\003\uff6e" +
    "\052\uff6e\001\002\000\004\004\017\001\002\000\016\002" +
    "\ufffc\003\ufffc\004\ufffc\005\ufffc\007\ufffc\012\ufffc\001\002" +
    "\000\016\002\ufffb\003\ufffb\004\ufffb\005\ufffb\007\ufffb\012" +
    "\ufffb\001\002\000\016\002\u0179\003\016\004\017\005\006" +
    "\007\014\012\020\001\002\000\010\052\165\056\162\060" +
    "\164\001\002\000\006\003\u0154\010\u0155\001\002\000\016" +
    "\002\uffff\003\uffff\004\uffff\005\uffff\007\uffff\012\uffff\001" +
    "\002\000\006\003\uff6f\006\uff6f\001\002\000\062\022\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\052\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\057\uffd9\105\uffd9\110\uffd9\001\002\000\010\052\uffda" +
    "\056\uffda\060\uffda\001\002\000\016\002\ufffe\003\ufffe\004" +
    "\ufffe\005\ufffe\007\ufffe\012\ufffe\001\002\000\006\003\u0153" +
    "\052\312\001\002\000\016\002\ufffd\003\ufffd\004\ufffd\005" +
    "\ufffd\007\ufffd\012\ufffd\001\002\000\006\003\026\006\027" +
    "\001\002\000\014\003\034\027\032\052\037\055\033\057" +
    "\031\001\002\000\016\002\uff73\003\uff73\004\uff73\005\uff73" +
    "\007\uff73\012\uff73\001\002\000\014\003\uff71\027\uff71\052" +
    "\uff71\055\uff71\057\uff71\001\002\000\024\061\u0148\075\u014e" +
    "\076\u014b\077\u014c\100\u0147\101\u0146\102\u014a\103\u014f\104" +
    "\u0149\001\002\000\110\003\uff86\010\uff86\011\uff86\023\uff86" +
    "\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\056\uff86\060" +
    "\uff86\061\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86" +
    "\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075" +
    "\uff86\076\uff86\077\uff86\100\uff86\101\uff86\102\uff86\103\uff86" +
    "\104\uff86\106\uff86\107\uff86\110\uff86\111\uff86\001\002\000" +
    "\110\003\uff88\010\uff88\011\uff88\023\uff88\046\uff88\047\uff88" +
    "\050\uff88\051\uff88\052\uff88\056\uff88\060\uff88\061\uff88\062" +
    "\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88" +
    "\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\077" +
    "\uff88\100\uff88\101\uff88\102\uff88\103\uff88\104\uff88\106\uff88" +
    "\107\uff88\110\uff88\111\uff88\001\002\000\110\003\uff85\010" +
    "\uff85\011\uff85\023\uff85\046\uff85\047\uff85\050\uff85\051\uff85" +
    "\052\uff85\056\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064" +
    "\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85" +
    "\073\uff85\074\uff85\075\uff85\076\uff85\077\uff85\100\uff85\101" +
    "\uff85\102\uff85\103\uff85\104\uff85\106\uff85\107\uff85\110\uff85" +
    "\111\uff85\001\002\000\006\003\uff6b\011\uff6b\001\002\000" +
    "\006\003\044\011\043\001\002\000\010\003\uff6c\011\uff6c" +
    "\107\041\001\002\000\110\003\uff87\010\uff87\011\uff87\023" +
    "\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\056\uff87" +
    "\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066" +
    "\uff87\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87" +
    "\075\uff87\076\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103" +
    "\uff87\104\uff87\106\uff87\107\uff87\110\uff87\111\uff87\001\002" +
    "\000\110\003\uff89\010\uff89\011\uff89\023\uff89\046\uff89\047" +
    "\uff89\050\uff89\051\uff89\052\uff89\056\uff89\060\uff89\061\uff89" +
    "\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070" +
    "\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89" +
    "\077\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\106" +
    "\uff89\107\uff89\110\uff89\111\uff89\001\002\000\014\003\034" +
    "\027\032\052\037\055\033\057\031\001\002\000\006\003" +
    "\uff6d\011\uff6d\001\002\000\056\022\uff46\027\uff46\030\uff46" +
    "\031\uff46\032\uff46\033\uff46\034\uff46\035\uff46\036\uff46\037" +
    "\uff46\040\uff46\041\uff46\042\uff46\043\uff46\044\uff46\045\uff46" +
    "\052\uff46\053\uff46\054\uff46\055\uff46\057\uff46\105\uff46\001" +
    "\002\000\016\002\uff74\003\uff74\004\uff74\005\uff74\007\uff74" +
    "\012\uff74\001\002\000\006\003\u0144\111\u0143\001\002\000" +
    "\056\022\107\027\032\030\122\031\105\032\053\033\052" +
    "\034\050\035\076\036\124\037\126\040\066\041\123\042" +
    "\057\043\065\044\125\045\055\052\127\053\056\054\104" +
    "\055\033\057\106\105\111\001\002\000\060\003\uffc0\010" +
    "\uffc0\023\uffc0\047\uffc0\052\uffc0\056\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070" +
    "\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\106\uffc0\107\uffc0" +
    "\110\uffc0\111\uffc0\001\002\000\004\105\u013b\001\002\000" +
    "\060\003\uffba\010\uffba\023\uffba\047\uffba\052\uffba\056\uffba" +
    "\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066" +
    "\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba" +
    "\106\uffba\107\uffba\110\uffba\111\uffba\001\002\000\004\105" +
    "\u0133\001\002\000\004\105\u012c\001\002\000\060\003\uffcf" +
    "\010\uffcf\023\uffcf\047\uffcf\052\uffcf\056\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf" +
    "\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\106\uffcf\107" +
    "\uffcf\110\uffcf\111\uffcf\001\002\000\014\027\032\046\u010d" +
    "\052\037\055\033\057\031\001\002\000\070\003\uff64\010" +
    "\uff64\011\uff64\023\uff64\046\uff64\047\uff64\050\uff64\051\uff64" +
    "\052\uff64\056\uff64\060\uff64\061\uff64\062\uff64\063\uff64\064" +
    "\uff64\065\uff64\066\uff64\067\uff64\070\uff64\071\uff64\072\uff64" +
    "\073\uff64\074\uff64\106\uff64\107\uff64\110\uff64\111\uff64\001" +
    "\002\000\004\105\u0105\001\002\000\060\003\uffbc\010\uffbc" +
    "\023\uffbc\047\uffbc\052\uffbc\056\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc" +
    "\071\uffbc\072\uffbc\073\uffbc\074\uffbc\106\uffbc\107\uffbc\110" +
    "\uffbc\111\uffbc\001\002\000\070\003\uff65\010\uff65\011\uff65" +
    "\023\uff65\046\uff65\047\uff65\050\uff65\051\uff65\052\uff65\056" +
    "\uff65\060\uff65\061\uff65\062\uff65\063\uff65\064\uff65\065\uff65" +
    "\066\uff65\067\uff65\070\uff65\071\uff65\072\uff65\073\uff65\074" +
    "\uff65\106\uff65\107\uff65\110\uff65\111\uff65\001\002\000\060" +
    "\003\uffc2\010\uffc2\023\uffc2\047\uffc2\052\uffc2\056\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\106" +
    "\uffc2\107\uffc2\110\uffc2\111\uffc2\001\002\000\060\003\uffc8" +
    "\010\uffc8\023\uffc8\047\uffc8\052\uffc8\056\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8" +
    "\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\106\uffc8\107" +
    "\uffc8\110\uffc8\111\uffc8\001\002\000\060\003\uffce\010\uffce" +
    "\023\uffce\047\uffce\052\uffce\056\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce" +
    "\071\uffce\072\uffce\073\uffce\074\uffce\106\uffce\107\uffce\110" +
    "\uffce\111\uffce\001\002\000\004\105\373\001\002\000\004" +
    "\105\365\001\002\000\020\061\363\062\362\063\361\064" +
    "\357\065\355\066\354\067\360\001\002\000\060\003\uffc6" +
    "\010\uffc6\023\uffc6\047\uffc6\052\uffc6\056\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\106\uffc6\107" +
    "\uffc6\110\uffc6\111\uffc6\001\002\000\004\025\252\001\002" +
    "\000\060\003\uffc4\010\uffc4\023\uffc4\047\uffc4\052\uffc4\056" +
    "\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4" +
    "\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074" +
    "\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4\001\002\000\060" +
    "\003\uffbe\010\uffbe\023\uffbe\047\uffbe\052\uffbe\056\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\106" +
    "\uffbe\107\uffbe\110\uffbe\111\uffbe\001\002\000\060\003\uffc7" +
    "\010\uffc7\023\uffc7\047\uffc7\052\uffc7\056\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\106\uffc7\107" +
    "\uffc7\110\uffc7\111\uffc7\001\002\000\060\003\uffc9\010\uffc9" +
    "\023\uffc9\047\uffc9\052\uffc9\056\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\074\uffc9\106\uffc9\107\uffc9\110" +
    "\uffc9\111\uffc9\001\002\000\004\105\242\001\002\000\060" +
    "\003\uffcc\010\uffcc\023\uffcc\047\uffcc\052\uffcc\056\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\106" +
    "\uffcc\107\uffcc\110\uffcc\111\uffcc\001\002\000\060\003\uffbb" +
    "\010\uffbb\023\uffbb\047\uffbb\052\uffbb\056\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb" +
    "\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\106\uffbb\107" +
    "\uffbb\110\uffbb\111\uffbb\001\002\000\060\003\uffc5\010\uffc5" +
    "\023\uffc5\047\uffc5\052\uffc5\056\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\074\uffc5\106\uffc5\107\uffc5\110" +
    "\uffc5\111\uffc5\001\002\000\044\003\uff41\047\uff41\061\uff41" +
    "\062\uff41\063\uff41\064\uff41\065\uff41\066\uff41\067\uff41\070" +
    "\217\071\215\072\216\073\uff41\074\uff41\106\uff41\110\222" +
    "\111\uff41\001\002\000\060\003\uffcb\010\uffcb\023\uffcb\047" +
    "\uffcb\052\uffcb\056\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb" +
    "\001\002\000\070\003\uff63\010\uff63\011\uff63\023\uff63\046" +
    "\uff63\047\uff63\050\uff63\051\uff63\052\uff63\056\uff63\060\uff63" +
    "\061\uff63\062\uff63\063\uff63\064\uff63\065\uff63\066\uff63\067" +
    "\uff63\070\uff63\071\uff63\072\uff63\073\uff63\074\uff63\106\uff63" +
    "\107\uff63\110\uff63\111\uff63\001\002\000\004\105\230\001" +
    "\002\000\032\025\uff35\061\uff86\062\uff86\063\uff86\064\uff86" +
    "\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86\110" +
    "\uff86\001\002\000\004\105\224\001\002\000\070\003\uff62" +
    "\010\uff62\011\uff62\023\uff62\046\uff62\047\uff62\050\uff62\051" +
    "\uff62\052\uff62\056\uff62\060\uff62\061\uff62\062\uff62\063\uff62" +
    "\064\uff62\065\uff62\066\uff62\067\uff62\070\uff62\071\uff62\072" +
    "\uff62\073\uff62\074\uff62\106\uff62\107\uff62\110\uff62\111\uff62" +
    "\001\002\000\056\022\107\027\032\030\122\031\105\032" +
    "\053\033\052\034\050\035\076\036\124\037\126\040\066" +
    "\041\123\042\057\043\065\044\125\045\055\052\037\053" +
    "\056\054\104\055\033\057\031\105\111\001\002\000\060" +
    "\003\uffbd\010\uffbd\023\uffbd\047\uffbd\052\uffbd\056\uffbd\060" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\106" +
    "\uffbd\107\uffbd\110\uffbd\111\uffbd\001\002\000\060\003\uffd0" +
    "\010\uffd0\023\uffd0\047\uffd0\052\uffd0\056\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\106\uffd0\107" +
    "\uffd0\110\uffd0\111\uffd0\001\002\000\060\003\uffca\010\uffca" +
    "\023\uffca\047\uffca\052\uffca\056\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca" +
    "\071\uffca\072\uffca\073\uffca\074\uffca\106\uffca\107\uffca\110" +
    "\uffca\111\uffca\001\002\000\060\003\uffbf\010\uffbf\023\uffbf" +
    "\047\uffbf\052\uffbf\056\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf" +
    "\072\uffbf\073\uffbf\074\uffbf\106\uffbf\107\uffbf\110\uffbf\111" +
    "\uffbf\001\002\000\060\003\uffc1\010\uffc1\023\uffc1\047\uffc1" +
    "\052\uffc1\056\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1" +
    "\073\uffc1\074\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\001" +
    "\002\000\010\003\uff47\106\uff47\111\uff47\001\002\000\016" +
    "\003\uff44\047\uff44\073\212\074\211\106\uff44\111\uff44\001" +
    "\002\000\060\003\uffc3\010\uffc3\023\uffc3\047\uffc3\052\uffc3" +
    "\056\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3" +
    "\074\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\001\002\000" +
    "\004\105\203\001\002\000\004\105\176\001\002\000\004" +
    "\105\170\001\002\000\004\105\136\001\002\000\004\105" +
    "\130\001\002\000\032\025\uff36\061\uff87\062\uff87\063\uff87" +
    "\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072" +
    "\uff87\110\uff87\001\002\000\004\055\132\001\002\000\004" +
    "\106\135\001\002\000\006\106\uffa1\107\133\001\002\000" +
    "\004\055\132\001\002\000\004\106\uffa2\001\002\000\060" +
    "\003\uffb5\010\uffb5\023\uffb5\047\uffb5\052\uffb5\056\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\106" +
    "\uffb5\107\uffb5\110\uffb5\111\uffb5\001\002\000\004\053\137" +
    "\001\002\000\020\061\147\062\146\063\145\064\143\065" +
    "\142\066\140\067\144\001\002\000\004\053\uff8d\001\002" +
    "\000\004\053\150\001\002\000\004\053\uff8e\001\002\000" +
    "\004\053\uff8f\001\002\000\004\053\uff8c\001\002\000\004" +
    "\053\uff90\001\002\000\004\053\uff91\001\002\000\004\053" +
    "\uff92\001\002\000\004\107\151\001\002\000\014\026\152" +
    "\027\155\052\037\055\033\057\031\001\002\000\012\027" +
    "\167\052\037\055\033\057\031\001\002\000\006\106\uffa9" +
    "\107\uffa9\001\002\000\004\107\156\001\002\000\006\106" +
    "\uffaa\107\uffaa\001\002\000\014\026\152\027\155\052\037" +
    "\055\033\057\031\001\002\000\004\106\160\001\002\000" +
    "\004\023\161\001\002\000\010\052\165\056\162\060\164" +
    "\001\002\000\062\003\uff84\010\uff84\023\uff84\047\uff84\052" +
    "\uff84\056\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84" +
    "\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073" +
    "\uff84\074\uff84\105\uff84\106\uff84\107\uff84\110\uff84\111\uff84" +
    "\001\002\000\060\003\uffa7\010\uffa7\023\uffa7\047\uffa7\052" +
    "\uffa7\056\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073" +
    "\uffa7\074\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\001\002" +
    "\000\062\003\uff82\010\uff82\023\uff82\047\uff82\052\uff82\056" +
    "\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82" +
    "\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074" +
    "\uff82\105\uff82\106\uff82\107\uff82\110\uff82\111\uff82\001\002" +
    "\000\062\003\uff83\010\uff83\023\uff83\047\uff83\052\uff83\056" +
    "\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83" +
    "\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074" +
    "\uff83\105\uff83\106\uff83\107\uff83\110\uff83\111\uff83\001\002" +
    "\000\006\106\uffac\107\uffac\001\002\000\006\106\uffab\107" +
    "\uffab\001\002\000\012\027\032\052\037\055\033\057\031" +
    "\001\002\000\004\106\uff97\001\002\000\004\106\173\001" +
    "\002\000\004\023\174\001\002\000\004\055\175\001\002" +
    "\000\060\003\uffb6\010\uffb6\023\uffb6\047\uffb6\052\uffb6\056" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074" +
    "\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6\001\002\000\012" +
    "\052\165\055\200\056\162\060\164\001\002\000\004\106" +
    "\uff9e\001\002\000\004\106\uff9f\001\002\000\004\106\202" +
    "\001\002\000\060\003\uffb2\010\uffb2\023\uffb2\047\uffb2\052" +
    "\uffb2\056\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2" +
    "\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2\001\002" +
    "\000\016\026\152\027\155\052\037\055\033\057\031\110" +
    "\205\001\002\000\004\106\207\001\002\000\004\106\206" +
    "\001\002\000\060\003\uffaf\010\uffaf\023\uffaf\047\uffaf\052" +
    "\uffaf\056\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073" +
    "\uffaf\074\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\001\002" +
    "\000\060\003\uffb0\010\uffb0\023\uffb0\047\uffb0\052\uffb0\056" +
    "\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074" +
    "\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\001\002\000\056" +
    "\022\107\027\032\030\122\031\105\032\053\033\052\034" +
    "\050\035\076\036\124\037\126\040\066\041\123\042\057" +
    "\043\065\044\125\045\055\052\127\053\056\054\104\055" +
    "\033\057\106\105\111\001\002\000\056\022\uff26\027\uff26" +
    "\030\uff26\031\uff26\032\uff26\033\uff26\034\uff26\035\uff26\036" +
    "\uff26\037\uff26\040\uff26\041\uff26\042\uff26\043\uff26\044\uff26" +
    "\045\uff26\052\uff26\053\uff26\054\uff26\055\uff26\057\uff26\105" +
    "\uff26\001\002\000\056\022\uff27\027\uff27\030\uff27\031\uff27" +
    "\032\uff27\033\uff27\034\uff27\035\uff27\036\uff27\037\uff27\040" +
    "\uff27\041\uff27\042\uff27\043\uff27\044\uff27\045\uff27\052\uff27" +
    "\053\uff27\054\uff27\055\uff27\057\uff27\105\uff27\001\002\000" +
    "\012\003\uff45\047\uff45\106\uff45\111\uff45\001\002\000\014" +
    "\070\217\071\215\072\216\106\221\110\222\001\002\000" +
    "\056\022\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e" +
    "\034\uff5e\035\uff5e\036\uff5e\037\uff5e\040\uff5e\041\uff5e\042" +
    "\uff5e\043\uff5e\044\uff5e\045\uff5e\052\uff5e\053\uff5e\054\uff5e" +
    "\055\uff5e\057\uff5e\105\uff5e\001\002\000\056\022\uff5c\027" +
    "\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034\uff5c\035\uff5c" +
    "\036\uff5c\037\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044" +
    "\uff5c\045\uff5c\052\uff5c\053\uff5c\054\uff5c\055\uff5c\057\uff5c" +
    "\105\uff5c\001\002\000\056\022\uff5f\027\uff5f\030\uff5f\031" +
    "\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f\037\uff5f" +
    "\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044\uff5f\045\uff5f\052" +
    "\uff5f\053\uff5f\054\uff5f\055\uff5f\057\uff5f\105\uff5f\001\002" +
    "\000\056\022\107\027\032\030\122\031\105\032\053\033" +
    "\052\034\050\035\076\036\124\037\126\040\066\041\123" +
    "\042\057\043\065\044\125\045\055\052\037\053\056\054" +
    "\104\055\033\057\031\105\111\001\002\000\060\003\uffd1" +
    "\010\uffd1\023\uffd1\047\uffd1\052\uffd1\056\uffd1\060\uffd1\061" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1" +
    "\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\106\uffd1\107" +
    "\uffd1\110\uffd1\111\uffd1\001\002\000\056\022\uff5d\027\uff5d" +
    "\030\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d\036" +
    "\uff5d\037\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d" +
    "\045\uff5d\052\uff5d\053\uff5d\054\uff5d\055\uff5d\057\uff5d\105" +
    "\uff5d\001\002\000\060\003\uffcd\010\uffcd\023\uffcd\047\uffcd" +
    "\052\uffcd\056\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\070\217\071\215\072\216" +
    "\073\uffcd\074\uffcd\106\uffcd\107\uffcd\110\222\111\uffcd\001" +
    "\002\000\004\106\225\001\002\000\060\003\uff99\010\uff99" +
    "\023\uff99\047\uff99\052\uff99\056\uff99\060\uff99\061\uff99\062" +
    "\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\217" +
    "\071\215\072\216\073\uff99\074\uff99\106\uff99\107\uff99\110" +
    "\222\111\uff99\001\002\000\004\053\227\001\002\000\060" +
    "\003\uff98\010\uff98\023\uff98\047\uff98\052\uff98\056\uff98\060" +
    "\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98" +
    "\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\106" +
    "\uff98\107\uff98\110\uff98\111\uff98\001\002\000\016\026\231" +
    "\027\234\052\037\055\033\057\031\110\235\001\002\000" +
    "\012\027\241\052\037\055\033\057\031\001\002\000\004" +
    "\106\uff93\001\002\000\004\106\237\001\002\000\004\106" +
    "\uff94\001\002\000\004\106\236\001\002\000\060\003\uffad" +
    "\010\uffad\023\uffad\047\uffad\052\uffad\056\uffad\060\uffad\061" +
    "\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad" +
    "\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\106\uffad\107" +
    "\uffad\110\uffad\111\uffad\001\002\000\060\003\uffae\010\uffae" +
    "\023\uffae\047\uffae\052\uffae\056\uffae\060\uffae\061\uffae\062" +
    "\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae" +
    "\071\uffae\072\uffae\073\uffae\074\uffae\106\uffae\107\uffae\110" +
    "\uffae\111\uffae\001\002\000\004\106\uff96\001\002\000\004" +
    "\106\uff95\001\002\000\004\055\244\001\002\000\004\106" +
    "\251\001\002\000\004\107\245\001\002\000\004\053\246" +
    "\001\002\000\004\107\247\001\002\000\004\055\250\001" +
    "\002\000\004\106\uff9a\001\002\000\060\003\uffb7\010\uffb7" +
    "\023\uffb7\047\uffb7\052\uffb7\056\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7" +
    "\071\uffb7\072\uffb7\073\uffb7\074\uffb7\106\uffb7\107\uffb7\110" +
    "\uffb7\111\uffb7\001\002\000\004\105\253\001\002\000\020" +
    "\004\017\027\261\052\270\053\255\054\267\055\265\057" +
    "\260\001\002\000\016\003\uff42\047\uff42\073\uff42\074\uff42" +
    "\106\uff42\111\uff42\001\002\000\034\011\uff33\013\uff33\014" +
    "\uff33\015\uff33\016\uff33\020\uff33\021\uff33\061\uff33\073\uff33" +
    "\074\uff33\106\uff33\107\uff33\111\uff33\001\002\000\004\106" +
    "\353\001\002\000\012\027\032\052\037\055\033\057\031" +
    "\001\002\000\034\011\uff30\013\uff30\014\uff30\015\uff30\016" +
    "\uff30\020\uff30\021\uff30\061\uff30\073\uff30\074\uff30\106\uff30" +
    "\107\uff30\111\uff30\001\002\000\034\011\uff2f\013\uff2f\014" +
    "\uff2f\015\uff2f\016\uff2f\020\uff2f\021\uff2f\061\uff2f\073\uff2f" +
    "\074\uff2f\106\uff2f\107\uff2f\111\uff2f\001\002\000\006\106" +
    "\uff37\107\350\001\002\000\004\106\uff3f\001\002\000\004" +
    "\106\uff3e\001\002\000\034\011\uff31\013\uff31\014\uff31\015" +
    "\uff31\016\uff31\020\uff31\021\uff31\061\uff31\073\uff31\074\uff31" +
    "\106\uff31\107\uff31\111\uff31\001\002\000\004\010\271\001" +
    "\002\000\034\011\uff32\013\uff32\014\uff32\015\uff32\016\uff32" +
    "\020\uff32\021\uff32\061\uff32\073\uff32\074\uff32\106\uff32\107" +
    "\uff32\111\uff32\001\002\000\034\011\uff34\013\uff34\014\uff34" +
    "\015\uff34\016\uff34\020\uff34\021\uff34\061\uff34\073\uff34\074" +
    "\uff34\106\uff34\107\uff34\111\uff34\001\002\000\004\052\uff4d" +
    "\001\002\000\004\052\312\001\002\000\022\011\043\013" +
    "\305\014\276\015\301\016\277\020\303\021\274\106\uff3d" +
    "\001\002\000\004\052\312\001\002\000\004\052\312\001" +
    "\002\000\006\017\326\021\325\001\002\000\004\017\323" +
    "\001\002\000\024\011\ufff3\013\305\014\276\015\301\016" +
    "\277\020\303\021\274\106\ufff3\111\ufff3\001\002\000\006" +
    "\017\320\021\317\001\002\000\004\106\uff3c\001\002\000" +
    "\004\021\316\001\002\000\006\011\043\106\uff3b\001\002" +
    "\000\004\021\306\001\002\000\004\052\312\001\002\000" +
    "\024\011\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2" +
    "\021\ufff2\106\ufff2\111\ufff2\001\002\000\034\003\uff4b\006" +
    "\uff4b\011\uff4b\013\uff4b\014\uff4b\015\uff4b\016\uff4b\020\uff4b" +
    "\021\uff4b\024\uff4b\106\uff4b\107\uff4b\111\uff4b\001\002\000" +
    "\034\003\uff4c\006\uff4c\011\uff4c\013\uff4c\014\uff4c\015\uff4c" +
    "\016\uff4c\020\uff4c\021\uff4c\024\uff4c\106\uff4c\107\uff4c\111" +
    "\uff4c\001\002\000\040\003\uff4a\006\uff4a\011\uff4a\013\uff4a" +
    "\014\uff4a\015\uff4a\016\uff4a\020\uff4a\021\uff4a\024\uff4a\052" +
    "\314\056\313\106\uff4a\107\uff4a\111\uff4a\001\002\000\034" +
    "\003\uff48\006\uff48\011\uff48\013\uff48\014\uff48\015\uff48\016" +
    "\uff48\020\uff48\021\uff48\024\uff48\106\uff48\107\uff48\111\uff48" +
    "\001\002\000\034\003\uff49\006\uff49\011\uff49\013\uff49\014" +
    "\uff49\015\uff49\016\uff49\020\uff49\021\uff49\024\uff49\106\uff49" +
    "\107\uff49\111\uff49\001\002\000\004\106\uff3a\001\002\000" +
    "\004\052\uffee\001\002\000\004\052\uffec\001\002\000\004" +
    "\021\321\001\002\000\004\052\uffea\001\002\000\010\011" +
    "\ufff4\106\ufff4\111\ufff4\001\002\000\004\021\324\001\002" +
    "\000\004\052\uffe9\001\002\000\004\052\uffed\001\002\000" +
    "\004\021\327\001\002\000\004\052\uffeb\001\002\000\004" +
    "\024\332\001\002\000\024\011\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\020\uffef\021\uffef\106\uffef\111\uffef\001\002" +
    "\000\016\027\261\052\270\053\255\054\267\055\265\057" +
    "\260\001\002\000\024\011\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\020\uffe8\021\uffe8\106\uffe8\111\uffe8\001\002\000" +
    "\030\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6" +
    "\021\uffe6\073\212\074\211\106\uffe6\111\uffe6\001\002\000" +
    "\004\061\336\001\002\000\016\027\261\052\270\053\255" +
    "\054\267\055\265\057\260\001\002\000\030\011\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5\073\uffe5" +
    "\074\uffe5\106\uffe5\111\uffe5\001\002\000\016\027\261\052" +
    "\270\053\255\054\267\055\265\057\260\001\002\000\024" +
    "\011\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021" +
    "\uffe7\106\uffe7\111\uffe7\001\002\000\026\011\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\024\332\106" +
    "\ufff1\111\ufff1\001\002\000\024\011\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\020\ufff0\021\ufff0\106\ufff0\111\ufff0\001" +
    "\002\000\026\011\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e" +
    "\020\uff4e\021\uff4e\106\uff4e\107\346\111\uff4e\001\002\000" +
    "\024\011\uff50\013\uff50\014\uff50\015\uff50\016\uff50\020\uff50" +
    "\021\uff50\106\uff50\111\uff50\001\002\000\004\052\312\001" +
    "\002\000\024\011\uff4f\013\uff4f\014\uff4f\015\uff4f\016\uff4f" +
    "\020\uff4f\021\uff4f\106\uff4f\111\uff4f\001\002\000\016\027" +
    "\261\052\270\053\255\054\267\055\265\057\260\001\002" +
    "\000\004\106\uff38\001\002\000\004\010\uff39\001\002\000" +
    "\016\003\uff40\047\uff40\073\uff40\074\uff40\106\uff40\111\uff40" +
    "\001\002\000\056\022\uff29\027\uff29\030\uff29\031\uff29\032" +
    "\uff29\033\uff29\034\uff29\035\uff29\036\uff29\037\uff29\040\uff29" +
    "\041\uff29\042\uff29\043\uff29\044\uff29\045\uff29\052\uff29\053" +
    "\uff29\054\uff29\055\uff29\057\uff29\105\uff29\001\002\000\056" +
    "\022\uff2a\027\uff2a\030\uff2a\031\uff2a\032\uff2a\033\uff2a\034" +
    "\uff2a\035\uff2a\036\uff2a\037\uff2a\040\uff2a\041\uff2a\042\uff2a" +
    "\043\uff2a\044\uff2a\045\uff2a\052\uff2a\053\uff2a\054\uff2a\055" +
    "\uff2a\057\uff2a\105\uff2a\001\002\000\056\022\107\027\032" +
    "\030\122\031\105\032\053\033\052\034\050\035\076\036" +
    "\124\037\126\040\066\041\123\042\057\043\065\044\125" +
    "\045\055\052\037\053\056\054\104\055\033\057\031\105" +
    "\111\001\002\000\056\022\uff2b\027\uff2b\030\uff2b\031\uff2b" +
    "\032\uff2b\033\uff2b\034\uff2b\035\uff2b\036\uff2b\037\uff2b\040" +
    "\uff2b\041\uff2b\042\uff2b\043\uff2b\044\uff2b\045\uff2b\052\uff2b" +
    "\053\uff2b\054\uff2b\055\uff2b\057\uff2b\105\uff2b\001\002\000" +
    "\056\022\uff28\027\uff28\030\uff28\031\uff28\032\uff28\033\uff28" +
    "\034\uff28\035\uff28\036\uff28\037\uff28\040\uff28\041\uff28\042" +
    "\uff28\043\uff28\044\uff28\045\uff28\052\uff28\053\uff28\054\uff28" +
    "\055\uff28\057\uff28\105\uff28\001\002\000\056\022\uff2c\027" +
    "\uff2c\030\uff2c\031\uff2c\032\uff2c\033\uff2c\034\uff2c\035\uff2c" +
    "\036\uff2c\037\uff2c\040\uff2c\041\uff2c\042\uff2c\043\uff2c\044" +
    "\uff2c\045\uff2c\052\uff2c\053\uff2c\054\uff2c\055\uff2c\057\uff2c" +
    "\105\uff2c\001\002\000\056\022\uff2d\027\uff2d\030\uff2d\031" +
    "\uff2d\032\uff2d\033\uff2d\034\uff2d\035\uff2d\036\uff2d\037\uff2d" +
    "\040\uff2d\041\uff2d\042\uff2d\043\uff2d\044\uff2d\045\uff2d\052" +
    "\uff2d\053\uff2d\054\uff2d\055\uff2d\057\uff2d\105\uff2d\001\002" +
    "\000\056\022\uff2e\027\uff2e\030\uff2e\031\uff2e\032\uff2e\033" +
    "\uff2e\034\uff2e\035\uff2e\036\uff2e\037\uff2e\040\uff2e\041\uff2e" +
    "\042\uff2e\043\uff2e\044\uff2e\045\uff2e\052\uff2e\053\uff2e\054" +
    "\uff2e\055\uff2e\057\uff2e\105\uff2e\001\002\000\016\003\uff43" +
    "\047\uff43\073\uff43\074\uff43\106\uff43\111\uff43\001\002\000" +
    "\004\055\367\001\002\000\004\106\370\001\002\000\004" +
    "\106\uffa0\001\002\000\004\023\371\001\002\000\010\052" +
    "\165\056\162\060\164\001\002\000\060\003\uffb4\010\uffb4" +
    "\023\uffb4\047\uffb4\052\uffb4\056\uffb4\060\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\074\uffb4\106\uffb4\107\uffb4\110" +
    "\uffb4\111\uffb4\001\002\000\004\053\374\001\002\000\004" +
    "\107\375\001\002\000\014\026\152\027\155\052\037\055" +
    "\033\057\031\001\002\000\004\106\u0102\001\002\000\006" +
    "\106\uffa5\107\u0100\001\002\000\014\026\152\027\155\052" +
    "\037\055\033\057\031\001\002\000\004\106\uffa6\001\002" +
    "\000\004\023\u0103\001\002\000\010\052\165\056\162\060" +
    "\164\001\002\000\060\003\uffa8\010\uffa8\023\uffa8\047\uffa8" +
    "\052\uffa8\056\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064" +
    "\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8" +
    "\073\uffa8\074\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8\001" +
    "\002\000\012\052\165\055\u0108\056\162\060\164\001\002" +
    "\000\004\106\u0109\001\002\000\004\106\uff9c\001\002\000" +
    "\004\106\uff9d\001\002\000\060\003\uffb3\010\uffb3\023\uffb3" +
    "\047\uffb3\052\uffb3\056\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3" +
    "\072\uffb3\073\uffb3\074\uffb3\106\uffb3\107\uffb3\110\uffb3\111" +
    "\uffb3\001\002\000\010\046\u010d\050\uff7c\051\uff7c\001\002" +
    "\000\004\046\u010d\001\002\000\004\047\u0124\001\002\000" +
    "\056\022\107\027\u011e\030\122\031\105\032\053\033\052" +
    "\034\050\035\076\036\124\037\126\040\066\041\123\042" +
    "\057\043\065\044\125\045\055\052\u0123\053\u011c\054\u011f" +
    "\055\u0121\057\u0120\105\111\001\002\000\006\050\u010f\051" +
    "\u0111\001\002\000\022\027\032\045\055\052\037\053\056" +
    "\054\104\055\033\057\031\105\u0113\001\002\000\004\051" +
    "\u0112\001\002\000\070\003\uff81\010\uff81\011\uff81\023\uff81" +
    "\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81\056\uff81\060" +
    "\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066\uff81" +
    "\067\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\106" +
    "\uff81\107\uff81\110\uff81\111\uff81\001\002\000\070\003\uff80" +
    "\010\uff80\011\uff80\023\uff80\046\uff80\047\uff80\050\uff80\051" +
    "\uff80\052\uff80\056\uff80\060\uff80\061\uff80\062\uff80\063\uff80" +
    "\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072" +
    "\uff80\073\uff80\074\uff80\106\uff80\107\uff80\110\uff80\111\uff80" +
    "\001\002\000\022\027\032\045\055\052\037\053\056\054" +
    "\104\055\033\057\031\105\u0113\001\002\000\030\003\uff68" +
    "\011\uff68\046\uff68\050\uff68\051\uff68\070\uff68\071\uff68\072" +
    "\uff68\106\uff68\107\uff68\110\uff68\001\002\000\030\003\uff67" +
    "\011\uff67\046\uff67\050\uff67\051\uff67\070\uff67\071\uff67\072" +
    "\uff67\106\uff67\107\uff67\110\uff67\001\002\000\030\003\uff66" +
    "\011\uff66\046\uff66\050\uff66\051\uff66\070\uff66\071\uff66\072" +
    "\uff66\106\uff66\107\uff66\110\uff66\001\002\000\014\051\uff77" +
    "\070\217\071\215\072\216\110\222\001\002\000\022\027" +
    "\032\045\055\052\037\053\056\054\104\055\033\057\031" +
    "\105\u0113\001\002\000\030\003\uff60\011\uff60\046\uff60\050" +
    "\uff60\051\uff60\070\217\071\215\072\216\106\uff60\107\uff60" +
    "\110\222\001\002\000\014\070\217\071\215\072\216\106" +
    "\u011b\110\222\001\002\000\030\003\uff61\011\uff61\046\uff61" +
    "\050\uff61\051\uff61\070\uff61\071\uff61\072\uff61\106\uff61\107" +
    "\uff61\110\uff61\001\002\000\032\047\uff33\061\uff64\062\uff64" +
    "\063\uff64\064\uff64\065\uff64\066\uff64\067\uff64\070\uff64\071" +
    "\uff64\072\uff64\110\uff64\001\002\000\004\047\uff79\001\002" +
    "\000\032\047\uff2f\061\uff88\062\uff88\063\uff88\064\uff88\065" +
    "\uff88\066\uff88\067\uff88\070\uff88\071\uff88\072\uff88\110\uff88" +
    "\001\002\000\032\047\uff32\061\uff63\062\uff63\063\uff63\064" +
    "\uff63\065\uff63\066\uff63\067\uff63\070\uff63\071\uff63\072\uff63" +
    "\110\uff63\001\002\000\034\025\uff35\047\uff30\061\uff86\062" +
    "\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86" +
    "\071\uff86\072\uff86\110\uff86\001\002\000\032\047\uff31\061" +
    "\uff85\062\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85" +
    "\070\uff85\071\uff85\072\uff85\110\uff85\001\002\000\004\047" +
    "\uff7a\001\002\000\034\025\uff36\047\uff34\061\uff87\062\uff87" +
    "\063\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071" +
    "\uff87\072\uff87\110\uff87\001\002\000\022\027\032\045\055" +
    "\052\037\053\056\054\104\055\033\057\031\105\u0113\001" +
    "\002\000\010\046\uff7b\050\uff7b\051\uff7b\001\002\000\020" +
    "\046\uff78\050\uff78\051\uff78\070\217\071\215\072\216\110" +
    "\222\001\002\000\006\050\u010f\051\u0129\001\002\000\004" +
    "\051\u012a\001\002\000\070\003\uff7f\010\uff7f\011\uff7f\023" +
    "\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\056\uff7f" +
    "\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066" +
    "\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f" +
    "\106\uff7f\107\uff7f\110\uff7f\111\uff7f\001\002\000\070\003" +
    "\uff7e\010\uff7e\011\uff7e\023\uff7e\046\uff7e\047\uff7e\050\uff7e" +
    "\051\uff7e\052\uff7e\056\uff7e\060\uff7e\061\uff7e\062\uff7e\063" +
    "\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e" +
    "\072\uff7e\073\uff7e\074\uff7e\106\uff7e\107\uff7e\110\uff7e\111" +
    "\uff7e\001\002\000\006\050\uff7d\051\uff7d\001\002\000\010" +
    "\052\037\055\033\057\031\001\002\000\004\107\u0130\001" +
    "\002\000\004\106\u012f\001\002\000\060\003\uffb1\010\uffb1" +
    "\023\uffb1\047\uffb1\052\uffb1\056\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1" +
    "\071\uffb1\072\uffb1\073\uffb1\074\uffb1\106\uffb1\107\uffb1\110" +
    "\uffb1\111\uffb1\001\002\000\006\053\u0131\055\u0132\001\002" +
    "\000\004\106\uff8b\001\002\000\004\106\uff8a\001\002\000" +
    "\004\055\u0135\001\002\000\004\106\u0138\001\002\000\006" +
    "\106\uffa3\107\u0136\001\002\000\004\055\u0135\001\002\000" +
    "\004\106\uffa4\001\002\000\004\023\u0139\001\002\000\004" +
    "\055\u013a\001\002\000\060\003\uffb9\010\uffb9\023\uffb9\047" +
    "\uffb9\052\uffb9\056\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072" +
    "\uffb9\073\uffb9\074\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9" +
    "\001\002\000\004\055\u013c\001\002\000\004\107\u013f\001" +
    "\002\000\004\106\u013e\001\002\000\060\003\uffb8\010\uffb8" +
    "\023\uffb8\047\uffb8\052\uffb8\056\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8" +
    "\071\uffb8\072\uffb8\073\uffb8\074\uffb8\106\uffb8\107\uffb8\110" +
    "\uffb8\111\uffb8\001\002\000\004\053\u0140\001\002\000\004" +
    "\107\u0141\001\002\000\004\055\u0142\001\002\000\004\106" +
    "\uff9b\001\002\000\016\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\007\ufffa\012\ufffa\001\002\000\016\002\uff75\003\uff75\004" +
    "\uff75\005\uff75\007\uff75\012\uff75\001\002\000\016\002\uff76" +
    "\003\uff76\004\uff76\005\uff76\007\uff76\012\uff76\001\002\000" +
    "\022\027\uff56\045\uff56\052\uff56\053\uff56\054\uff56\055\uff56" +
    "\057\uff56\105\uff56\001\002\000\022\027\uff57\045\uff57\052" +
    "\uff57\053\uff57\054\uff57\055\uff57\057\uff57\105\uff57\001\002" +
    "\000\022\027\uff5b\045\uff5b\052\uff5b\053\uff5b\054\uff5b\055" +
    "\uff5b\057\uff5b\105\uff5b\001\002\000\022\027\uff53\045\uff53" +
    "\052\uff53\053\uff53\054\uff53\055\uff53\057\uff53\105\uff53\001" +
    "\002\000\022\027\uff55\045\uff55\052\uff55\053\uff55\054\uff55" +
    "\055\uff55\057\uff55\105\uff55\001\002\000\022\027\uff59\045" +
    "\uff59\052\uff59\053\uff59\054\uff59\055\uff59\057\uff59\105\uff59" +
    "\001\002\000\022\027\uff58\045\uff58\052\uff58\053\uff58\054" +
    "\uff58\055\uff58\057\uff58\105\uff58\001\002\000\022\027\032" +
    "\045\055\052\037\053\056\054\104\055\033\057\031\105" +
    "\u0113\001\002\000\022\027\uff5a\045\uff5a\052\uff5a\053\uff5a" +
    "\054\uff5a\055\uff5a\057\uff5a\105\uff5a\001\002\000\022\027" +
    "\uff54\045\uff54\052\uff54\053\uff54\054\uff54\055\uff54\057\uff54" +
    "\105\uff54\001\002\000\020\003\uff6a\011\uff6a\070\217\071" +
    "\215\072\216\107\uff6a\110\222\001\002\000\010\003\uff69" +
    "\011\uff69\107\uff69\001\002\000\006\003\uff70\006\uff70\001" +
    "\002\000\016\002\uff72\003\uff72\004\uff72\005\uff72\007\uff72" +
    "\012\uff72\001\002\000\016\002\uff51\003\uff51\004\uff51\005" +
    "\uff51\007\uff51\012\uff51\001\002\000\004\052\312\001\002" +
    "\000\004\011\043\001\002\000\004\111\u0143\001\002\000" +
    "\016\002\uff52\003\uff52\004\uff52\005\uff52\007\uff52\012\uff52" +
    "\001\002\000\004\004\uffe4\001\002\000\006\023\u015c\105" +
    "\u015d\001\002\000\004\004\uffe3\001\002\000\004\105\u0172" +
    "\001\002\000\056\022\107\027\032\030\122\031\105\032" +
    "\053\033\052\034\050\035\076\036\124\037\126\040\066" +
    "\041\123\042\057\043\065\044\125\045\055\052\037\053" +
    "\056\054\104\055\033\057\031\105\111\001\002\000\004" +
    "\023\u015f\001\002\000\004\105\u0160\001\002\000\004\004" +
    "\017\001\002\000\004\010\271\001\002\000\004\106\u0163" +
    "\001\002\000\006\004\uffdf\107\u0164\001\002\000\010\052" +
    "\165\056\162\060\164\001\002\000\004\105\u015d\001\002" +
    "\000\004\004\uffe0\001\002\000\004\106\u0171\001\002\000" +
    "\020\010\uffd5\023\u016d\052\165\056\162\060\164\106\uffd5" +
    "\107\uffd5\001\002\000\030\010\uffd4\023\uffd4\052\uffd4\056" +
    "\uffd4\060\uffd4\070\217\071\215\072\216\106\uffd4\107\uffd4" +
    "\110\222\001\002\000\010\010\uffd7\106\uffd7\107\u016b\001" +
    "\002\000\056\022\107\027\032\030\122\031\105\032\053" +
    "\033\052\034\050\035\076\036\124\037\126\040\066\041" +
    "\123\042\057\043\065\044\125\045\055\052\037\053\056" +
    "\054\104\055\033\057\031\105\111\001\002\000\006\010" +
    "\uffd8\106\uffd8\001\002\000\010\052\165\056\162\060\164" +
    "\001\002\000\010\010\uffd3\106\uffd3\107\uffd3\001\002\000" +
    "\010\010\uffd6\106\uffd6\107\uffd6\001\002\000\010\010\uffd2" +
    "\106\uffd2\107\uffd2\001\002\000\004\023\uffde\001\002\000" +
    "\004\004\017\001\002\000\004\010\271\001\002\000\004" +
    "\106\u0175\001\002\000\006\004\uffe1\107\u0176\001\002\000" +
    "\010\052\165\056\162\060\164\001\002\000\004\004\uffe2" +
    "\001\002\000\004\023\u015c\001\002\000\004\002\001\001" +
    "\002\000\016\002\000\003\000\004\000\005\000\007\000" +
    "\012\000\001\002\000\016\002\ufff5\003\ufff5\004\ufff5\005" +
    "\ufff5\007\ufff5\012\ufff5\001\002\000\022\011\043\013\305" +
    "\014\276\015\301\016\277\020\303\021\274\111\u0143\001" +
    "\002\000\016\002\ufff9\003\ufff9\004\ufff9\005\ufff9\007\ufff9" +
    "\012\ufff9\001\002\000\004\111\u0143\001\002\000\006\011" +
    "\043\111\u0143\001\002\000\004\111\u0143\001\002\000\016" +
    "\002\ufff7\003\ufff7\004\ufff7\005\ufff7\007\ufff7\012\ufff7\001" +
    "\002\000\016\002\ufff6\003\ufff6\004\ufff6\005\ufff6\007\ufff6" +
    "\012\ufff6\001\002\000\016\002\ufff8\003\ufff8\004\ufff8\005" +
    "\ufff8\007\ufff8\012\ufff8\001\002\000\004\010\uffdd\001\002" +
    "\000\004\010\uffdb\001\002\000\056\022\107\027\032\030" +
    "\122\031\105\032\053\033\052\034\050\035\076\036\124" +
    "\037\126\040\066\041\123\042\057\043\065\044\125\045" +
    "\055\052\037\053\056\054\104\055\033\057\031\105\111" +
    "\001\002\000\004\010\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0185\000\032\002\003\003\012\012\011\013\014\015" +
    "\020\016\010\017\006\023\004\130\007\131\021\133\023" +
    "\144\022\001\001\000\074\025\112\026\u0169\027\076\030" +
    "\062\031\102\032\113\033\074\034\073\036\077\040\050" +
    "\042\067\044\100\046\071\050\120\052\072\054\061\056" +
    "\114\060\115\062\046\064\111\066\057\071\u0184\072\060" +
    "\073\037\116\u0167\120\u0168\121\053\122\107\134\063\001" +
    "\001\000\006\004\271\067\u017b\001\001\000\002\001\001" +
    "\000\010\002\003\015\u017a\023\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\003\003\012\013\u0179" +
    "\015\020\016\010\017\006\023\004\130\007\131\021\133" +
    "\023\144\022\001\001\000\010\020\u0158\021\u015a\074\u0159" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\u0151\010\310\011\307\001\001\000\002\001" +
    "\001\000\004\132\024\001\001\000\012\072\027\073\037" +
    "\135\034\136\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\143\u014c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\045\070\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\072\027\073\037\135\041\136" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u0144\001\001\000\076\025\112\027" +
    "\076\030\062\031\102\032\113\033\074\034\073\036\077" +
    "\040\050\042\067\044\100\046\071\050\120\052\072\054" +
    "\061\056\114\060\115\062\046\064\111\066\057\072\060" +
    "\073\037\075\070\110\116\111\117\115\066\120\101\121" +
    "\053\122\107\134\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\072\u010a\073\037\123\u010d" +
    "\124\u0109\126\u010b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\113\355\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\142" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\025\112\027\076\030\062\031\102\032\113" +
    "\033\074\034\073\036\077\040\050\042\067\044\100\046" +
    "\071\050\120\052\072\054\061\056\114\060\115\062\046" +
    "\064\111\066\057\072\060\073\037\120\213\121\053\122" +
    "\107\134\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\112\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\153\073\152" +
    "\001\001\000\004\073\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\156\073\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\074" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\053\171\072\170\073\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\061\200\074\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\203\073\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\025\112\027\076\030\062\031\102\032\113" +
    "\033\074\034\073\036\077\040\050\042\067\044\100\046" +
    "\071\050\120\052\072\054\061\056\114\060\115\062\046" +
    "\064\111\066\057\072\060\073\037\075\070\110\212\111" +
    "\117\115\066\120\101\121\053\122\107\134\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\142\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\025\112\027\076\030\062\031" +
    "\102\032\113\033\074\034\073\036\077\040\050\042\067" +
    "\044\100\046\071\050\120\052\072\054\061\056\114\060" +
    "\115\062\046\064\111\066\057\072\060\073\037\120\222" +
    "\121\053\122\107\134\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\142\217\001\001\000\002\001\001" +
    "\000\004\142\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\232\073\231\001\001\000\004\073\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\253\001\001\000\016\002\256" +
    "\024\265\077\255\100\262\101\263\114\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\072\351\073\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\271\067\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\343\007\344\010\310\011\307\001\001\000\014\005" +
    "\045\070\301\102\303\103\277\107\274\001\001\000\010" +
    "\006\341\010\310\011\307\001\001\000\010\006\327\010" +
    "\310\011\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\102\321\103\277\107\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\045" +
    "\070\314\001\001\000\002\001\001\000\010\006\306\010" +
    "\310\011\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\105\330\001" +
    "\001\000\002\001\001\000\010\104\333\106\332\114\334" +
    "\001\001\000\002\001\001\000\004\112\337\001\001\000" +
    "\002\001\001\000\004\114\336\001\001\000\002\001\001" +
    "\000\010\104\333\106\340\114\334\001\001\000\002\001" +
    "\001\000\004\105\342\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\343\007\346\010" +
    "\310\011\307\001\001\000\002\001\001\000\006\100\350" +
    "\114\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\025\112\027\076\030\062\031\102\032\113\033\074\034" +
    "\073\036\077\040\050\042\067\044\100\046\071\050\120" +
    "\052\072\054\061\056\114\060\115\062\046\064\111\066" +
    "\057\072\060\073\037\115\363\120\101\121\053\122\107" +
    "\134\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\365\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\074\371\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\035\376\037\375\073\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\035\376\037\u0100\073\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\074\u0103" +
    "\001\001\000\002\001\001\000\006\063\u0105\074\u0106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\123\u012a\124\u0109\126\u010b\001" +
    "\001\000\010\123\u0126\124\u0109\126\u010b\001\001\000\004" +
    "\127\u0124\001\001\000\100\025\112\027\076\030\062\031" +
    "\102\032\113\033\074\034\073\036\077\040\050\042\067" +
    "\044\100\046\071\050\120\052\072\054\061\056\114\060" +
    "\115\062\046\064\111\066\057\072\060\073\037\075\070" +
    "\110\u0121\111\117\114\u011c\115\066\120\101\121\053\122" +
    "\107\134\063\001\001\000\004\125\u010f\001\001\000\020" +
    "\072\060\073\037\122\107\134\u0115\137\u0116\140\u0113\141" +
    "\u0114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\072\060\073\037\122\107\134\u0115\137" +
    "\u0119\140\u0113\141\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\142\u0117\001\001\000" +
    "\020\072\060\073\037\122\107\134\u0115\137\u0118\140\u0113" +
    "\141\u0114\001\001\000\004\142\u0117\001\001\000\004\142" +
    "\u0117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\072\060\073\037\122\107\134\u0115\137\u0125\140" +
    "\u0113\141\u0114\001\001\000\002\001\001\000\004\142\u0117" +
    "\001\001\000\004\125\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\065\u012d\073\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u0133\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\u0136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u013c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\072" +
    "\060\073\037\122\107\134\u0115\137\u014f\140\u0113\141\u0114" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\142" +
    "\u0117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\u0155\010\310\011" +
    "\307\001\001\000\006\005\045\070\u0156\001\001\000\004" +
    "\014\u0157\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u015d\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\025\112\026\u0169\027\076\030\062\031\102\032" +
    "\113\033\074\034\073\036\077\040\050\042\067\044\100" +
    "\046\071\050\120\052\072\054\061\056\114\060\115\062" +
    "\046\064\111\066\057\071\u0166\072\060\073\037\116\u0167" +
    "\120\u0168\121\053\122\107\134\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\003\023\u0160\001\001" +
    "\000\006\004\271\067\u0161\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\u0165\074\u0164\001\001\000\004" +
    "\022\u015d\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\074\u016d\117\u016e\001\001\000\004\142\217\001\001" +
    "\000\002\001\001\000\074\025\112\026\u0169\027\076\030" +
    "\062\031\102\032\113\033\074\034\073\036\077\040\050" +
    "\042\067\044\100\046\071\050\120\052\072\054\061\056" +
    "\114\060\115\062\046\064\111\066\057\071\u016b\072\060" +
    "\073\037\116\u0167\120\u0168\121\053\122\107\134\063\001" +
    "\001\000\002\001\001\000\004\074\u016f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\003\023\u0172\001\001\000\006\004\271" +
    "\067\u0173\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\u0176\074\u0177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\045\014\u017c\070\u017d\102\u017e\103\277" +
    "\107\274\001\001\000\002\001\001\000\004\014\u0182\001" +
    "\001\000\010\005\045\014\u0180\070\u017f\001\001\000\004" +
    "\014\u0181\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\025\112\026\u0169\027\076\030\062\031\102\032\113\033" +
    "\074\034\073\036\077\040\050\042\067\044\100\046\071" +
    "\050\120\052\072\054\061\056\114\060\115\062\046\064" +
    "\111\066\057\071\u0186\072\060\073\037\116\u0167\120\u0168" +
    "\121\053\122\107\134\063\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup_Rules_SQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup_Rules_SQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup_Rules_SQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// This list will store every error found in the syntax analysis process. SE -> Syntax errors
	public static LinkedList<TError> TableSE = new LinkedList<TError>();

	// This object has a list with all columns found and its table
	//public static ColumnEvalutator Columns = new ColumnEvaluator();

	public HashSet<String> Tables  = new HashSet<String>();
	public HashSet<String> Columns = new HashSet<String>();

	public  Scanner s;
  	public  int errors = 0, line, column;
  	public 	String the_error = "";
	public 	StringBuilder the_error_message = new StringBuilder();

	public int selects_read = 0;
	public int updates_read = 0;
	public int deletes_read = 0;
	public int with_read = 0;


	public void clean_lists() {
		TableSE = new LinkedList<TError>();
	}

	/* This is the error handler */
	public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("\n\n---- Error message: " + message + "\n");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {

        	// Uncomment when Analyzer can handle multiple errors
			//errors++;
			errors = 1;

            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0 && s.right >= 0) {

            	
				the_error = (s.value == null) ? "Empty" : s.value.toString();
				//the_error = s.value.toString();
                
                m.append("--> Unexpected : " + the_error );
                m.append(" at line: "+(s.left));  
                m.append(", column: "+(s.right)); 

				the_error_message = m;
            }
        }
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/

    public void report_fatal_error(String message, Object info) {
        //report_error(message, info);
		//the_error_message.append("\n\n---- Unknown syntax error ლ(ಠ_ಠლ)" + "\n");
		the_error_message.append("\n\n---- Unknown syntax error." + "\n");
    }
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Cup_Rules_SQL$actions {


	

  private final Cup_Rules_SQL parser;

  /** Constructor */
  CUP$Cup_Rules_SQL$actions(Cup_Rules_SQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Cup_Rules_SQL$do_action_part00000000(
    int                        CUP$Cup_Rules_SQL$act_num,
    java_cup.runtime.lr_parser CUP$Cup_Rules_SQL$parser,
    java.util.Stack            CUP$Cup_Rules_SQL$stack,
    int                        CUP$Cup_Rules_SQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup_Rules_SQL$result;

      /* select the action based on the action number */
      switch (CUP$Cup_Rules_SQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statement_group EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		RESULT = start_val;
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup_Rules_SQL$parser.done_parsing();
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statement_group ::= statement_group statement 
            {
              Object RESULT =null;
		 System.out.println("statement_group ::= statement_group statement"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement_group",8, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_group ::= statement 
            {
              Object RESULT =null;
		 System.out.println("statement_group ::= statement"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement_group",8, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= select_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= select_s"); 	
						   selects_read++; 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= delete_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= delete_s");
						   deletes_read++; 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= update_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= update_s"); 
						   updates_read++; 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= with_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= with_s");
						   with_read++;	
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // _semicolon ::= _SEMCOL2 
            {
              Object RESULT =null;
		 System.out.println("_semicolon ::= _SEMICOL2"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_semicolon",10, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // select_s ::= select_part from_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // select_s ::= select_part from_part where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part where_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // select_s ::= select_part from_part joins_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part joins_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // select_s ::= select_part from_part joins_part where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part joins_part where_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // with_s ::= with_part select_s 
            {
              Object RESULT =null;
		 System.out.println("with_s	::=	with_part select_s"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_s",12, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // joins_part ::= join_p joins_part 
            {
              Object RESULT =null;
		 System.out.println("joins_part ::= join_p joins_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("joins_part",64, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // joins_part ::= join_p 
            {
              Object RESULT =null;
		 System.out.println("joins_part ::= join_p"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("joins_part",64, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // join_p ::= NATURAL JOIN table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",65, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // join_p ::= JOIN table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",65, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // join_p ::= JOIN table_name join_cond 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",65, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // join_p ::= join table_name join_cond 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",65, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // join ::= INNER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",69, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // join ::= LEFT JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",69, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // join ::= RIGHT JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",69, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // join ::= LEFT OUTER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",69, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // join ::= RIGHT OUTER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",69, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // join ::= FULL OUTER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",69, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // join_cond ::= ON join_c 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_cond",67, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // join_c ::= join_on log_oper join_c 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_c",68, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // join_c ::= join_on 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_c",68, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // join_on ::= element _EQU element 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_on",66, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // with_part ::= _with with_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_part",13, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // with_part ::= _with with_exp2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_part",13, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // with_exp ::= col_ali AS _OPENPAR select_part from_part _CLOSEPAR _COMMA with_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp",14, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-7)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // with_exp ::= col_ali AS _OPENPAR select_part from_part _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp",14, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // with_exp2 ::= col_ali with_exp2_1 AS _OPENPAR select_part from_part _CLOSEPAR _COMMA with_exp2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp2",15, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-8)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // with_exp2 ::= col_ali with_exp2_1 AS _OPENPAR select_part from_part _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp2",15, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-6)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // with_exp2_1 ::= _OPENPAR cols _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp2_1",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // select_part ::= _select _STAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",17, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // select_part ::= _select DISTINCT cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",17, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // select_part ::= _select cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",17, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // _with ::= WITH 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_with",1, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // _select ::= SELECT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_select",0, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cols ::= col_el _COMMA cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols",55, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cols ::= col_el 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols",55, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // col_el ::= c_el c_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_el",20, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // col_el ::= c_el 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_el",20, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // c_el ::= mix_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_el",76, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // c_ali ::= col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_ali",77, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // c_ali ::= AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_ali",77, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // mix_exp ::= _OPENPAR mix_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",78, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // mix_exp ::= func_ls 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",78, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // mix_exp ::= m_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",78, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // mix_exp ::= ari_value 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",78, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // m_exp ::= mix_exp _ari_opr mix_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("m_exp",79, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // func_ls ::= aggregates 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",19, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // func_ls ::= stringFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",19, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // func_ls ::= dateFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",19, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // func_ls ::= nullFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",19, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // func_ls ::= logicalFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",19, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // aggregates ::= agg_count 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",21, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // aggregates ::= agg_avg 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",21, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stringFunctions ::= stringFunction_concat 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stringFunctions ::= stringFunction_lpad 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stringFunctions ::= stringFunction_rpad 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stringFunctions ::= stringFunction_replace 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stringFunctions ::= stringFunction_upper 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stringFunctions ::= stringFunction_lower 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stringFunctions ::= stringFunction_trim 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stringFunctions ::= stringFunction_length 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // nullFunctions ::= nullFunction_nvl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunctions",25, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dateFunctions ::= sysdate 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("dateFunctions",24, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logicalFunctions ::= logFunc_choose 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logicalFunctions",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logicalFunctions ::= logFunc_iif 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logicalFunctions",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stringFunction_concat ::= CONCAT _OPENPAR concat_exp _CLOSEPAR AS LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_concat",34, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stringFunction_lpad ::= LPAD _OPENPAR lpad_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_lpad",36, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stringFunction_rpad ::= RPAD _OPENPAR rpad_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_rpad",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stringFunction_length ::= LENGTH _OPENPAR length_exp _CLOSEPAR AS LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_length",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stringFunction_replace ::= REPLACE _OPENPAR replace_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_replace",42, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stringFunction_trim ::= TRIM _OPENPAR trim_exp _CLOSEPAR AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_trim",44, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stringFunction_lower ::= LOWER _OPENPAR lower_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_lower",48, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stringFunction_upper ::= UPPER _OPENPAR upper_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_upper",46, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // nullFunction_nvl ::= NVL _OPENPAR nvl_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunction_nvl",50, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // agg_count ::= COUNT _OPENPAR count_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_count",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // agg_count ::= COUNT _OPENPAR _STAR _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_count",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // agg_avg ::= AVG _OPENPAR avg_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_avg",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // agg_avg ::= AVG _OPENPAR _STAR _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_avg",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // count_exp ::= DISTINCT cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",27, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // count_exp ::= DISTINCT NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",27, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // count_exp ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",27, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // count_exp ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",27, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // logFunc_choose ::= CHOOSE _OPENPAR INTEGER _COMMA choose_exp _CLOSEPAR AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logFunc_choose",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-7)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // logFunc_iif ::= IIF _OPENPAR INTEGER iif_exp INTEGER _COMMA count_exp _COMMA count_exp _CLOSEPAR AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logFunc_iif",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-11)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // choose_exp ::= count_exp _COMMA choose_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("choose_exp",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // choose_exp ::= count_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("choose_exp",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // concat_exp ::= LITERAL_STRING _COMMA concat_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("concat_exp",35, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // concat_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("concat_exp",35, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // replace_exp ::= LITERAL_STRING _COMMA replace_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("replace_exp",43, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // replace_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("replace_exp",43, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // trim_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("trim_exp",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // upper_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("upper_exp",47, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // upper_exp ::= col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("upper_exp",47, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lower_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("lower_exp",49, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lower_exp ::= col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("lower_exp",49, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lpad_exp ::= LITERAL_STRING _COMMA INTEGER _COMMA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("lpad_exp",37, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // rpad_exp ::= LITERAL_STRING _COMMA INTEGER _COMMA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("rpad_exp",39, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sysdate ::= SYSDATE _OPENPAR _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("sysdate",52, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sysdate ::= SYSDATE _OPENPAR _CLOSEPAR _ari_opr INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("sysdate",52, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // length_exp ::= col 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("length_exp",41, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // avg_exp ::= DISTINCT cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // avg_exp ::= DISTINCT NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // avg_exp ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // avg_exp ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // iif_exp ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // iif_exp ::= _GT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // iif_exp ::= _LT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // iif_exp ::= _LET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // iif_exp ::= _GET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // iif_exp ::= _DIFF 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // iif_exp ::= _DIFF2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // nvl_exp ::= cl _COMMA INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nvl_exp",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // nvl_exp ::= cl _COMMA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nvl_exp",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // col ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col",56, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // col ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col",56, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cl ::= IDENTIFIER 
            {
              Object RESULT =null;
		int col1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int col1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object col1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Columns.add(col1 + ""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",57, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cl ::= TABDOTCOL 
            {
              Object RESULT =null;
		int col1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int col1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object col1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Columns.add(col1 + ""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",57, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // cl ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",57, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // col_ali ::= QTABLENAME 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 /*Tables.add(t+"");*/ 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",58, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // col_ali ::= IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 /*Tables.add(t+"");*/ 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",58, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // col_ali ::= QCOLALIAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 /*Tables.add(t+"");*/ 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",58, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // case_exp ::= CASE case_rules END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE case_rules END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",80, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // case_exp ::= CASE case_rules case_else END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE case_rules case_else END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",80, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // case_exp ::= CASE col case_rules END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE col case_rules END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",80, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // case_exp ::= CASE col case_rules case_else END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE col case_rules case_else END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",80, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // case_rules ::= case_rul case_rules 
            {
              Object RESULT =null;
		 System.out.println("case_rules ::= case_rul case_rules"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_rules",81, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // case_rules ::= case_rul 
            {
              Object RESULT =null;
		 System.out.println("case_rules ::= case_rul"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_rules",81, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // case_rul ::= case_cond case_act 
            {
              Object RESULT =null;
		 System.out.println("case_rul ::= WHEN case_cond THEN case_act"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_rul",82, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // case_cond ::= WHEN w_condition 
            {
              Object RESULT =null;
		 System.out.println("case_cond ::= w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_cond",84, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // case_cond ::= WHEN element 
            {
              Object RESULT =null;
		 System.out.println("case_cond ::= element"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_cond",84, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // case_act ::= THEN ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_act",85, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // case_else ::= ELSE ari_exp 
            {
              Object RESULT =null;
		 System.out.println("case_else ::= ELSE ari_exp"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_else",83, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // update_s ::= update_part _set set_exp_list where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("update_s	::= update_part _set set_cols where_part _semicolon"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // update_s ::= update_part _set set_exp_list where_part error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE section. Missing semicolon (;).");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part _set set_cols where_part errorerror.\nMissing semicolon on UPDATE."); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // update_s ::= update_part _set set_exp_list error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","UPDATE error after set of columns.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part _set set_cols error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // update_s ::= update_part error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Incomplete UPDATE.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // update_s ::= _update error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= _update error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // _set ::= SET 
            {
              Object RESULT =null;
		 System.out.println("_set ::= SET"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_set",88, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // update_part ::= _update table_name 
            {
              Object RESULT =null;
		 System.out.println("update_part ::= _update table_name"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_part",89, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // update_part ::= error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE.");
				  	  	   TableSE.add(errors_found); 
						   System.out.println("update_part ::= _update table_name"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_part",89, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // _update ::= UPDATE 
            {
              Object RESULT =null;
		 System.out.println("_update ::= UPDATE"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_update",87, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // set_exp_list ::= set_exp _COMMA set_exp_list 
            {
              Object RESULT =null;
		 System.out.println("set_exp_list	::= set_exp _COMMA set_exp_list "); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",91, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // set_exp_list ::= set_exp 
            {
              Object RESULT =null;
		 System.out.println("set_exp_list	::= set_exp "); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",91, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // set_exp_list ::= error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid set of columns in UPDATE");
				  	  	   TableSE.add(errors_found); 
						   System.out.println("set_cols	::=	error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",91, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // set_exp ::= col _asig_opr ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp",92, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // set_exp ::= col _EQU LITERAL_STRING 
            {
              Object RESULT =null;
		 System.out.println("set_exp ::= col _EQU LITERAL_STRING"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp",92, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ari_exp ::= par_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",93, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ari_exp ::= exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",93, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ari_exp ::= ari_value 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",93, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ari_value ::= col 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= col"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ari_value ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= INTEGER"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ari_value ::= REAL 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= REAL"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ari_value ::= case_exp 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= case_exp"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // par_exp ::= _OPENPAR ari_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("par_exp",94, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // exp ::= ari_exp _ari_opr ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("exp",95, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // _ari_opr ::= _PLUS 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // _ari_opr ::= _MINUS 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // _ari_opr ::= _STAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // _ari_opr ::= _DIVIDE 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // _asig_opr ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // _asig_opr ::= _PLUSEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // _asig_opr ::= _MINUSEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // _asig_opr ::= _TIMESEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // _asig_opr ::= _DIVIDEEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // _asig_opr ::= _MODEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // _asig_opr ::= _ANDEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // _asig_opr ::= _POWEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // _asig_opr ::= _OREQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // delete_s ::= DELETE FROM table_name where_part _semicolon 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("delete_s",98, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // delete_s ::= DELETE error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid DELETE statement.");
				  	  			 		TableSE.add(errors_found);
										System.out.println("value ::= LITERAL_STRING"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("delete_s",98, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // from_part ::= _from table_name_mult 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("from_part",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // table_name_mult ::= table_name _COMMA table_name_mult 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name_mult",5, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // table_name_mult ::= table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name_mult",5, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // _from ::= FROM 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_from",2, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // table_name ::= tab 
            {
              Object RESULT =null;
		 System.out.println("table_name ::= tab"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name",4, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // table_name ::= tab_ali 
            {
              Object RESULT =null;
		 System.out.println("table_name ::= tab_ali"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name",4, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // tab ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Tables.add(id+"");
						   System.out.println("tab ::= IDENTIFIER"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab",6, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // tab_ali ::= IDENTIFIER IDENTIFIER 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 System.out.println("tab_ali ::= IDENTIFIER IDENTIFIER");	
						   Tables.add(id1+""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab_ali",7, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // tab_ali ::= IDENTIFIER QTABLENAME 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 System.out.println("tab_ali ::= IDENTIFIER QTABLENAME"); 
						   Tables.add(id1+""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab_ali",7, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // where_part ::= _where w_condition 
            {
              Object RESULT =null;
		 System.out.println("where_part ::= _where w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("where_part",54, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // _where ::= WHERE 
            {
              Object RESULT =null;
		 System.out.println("_where ::= WHERE"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_where",3, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // w_condition ::= cond log_oper w_condition 
            {
              Object RESULT =null;
		 System.out.println("w_condition ::= cond log_oper w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("w_condition",70, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // w_condition ::= cond 
            {
              Object RESULT =null;
		 System.out.println("w_condition ::= cond"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("w_condition",70, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // cond ::= cond_el cmp_oper cond_el 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",71, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // cond ::= element_in IN in_list 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",71, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // cond_el ::= mix_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond_el",75, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // in_list ::= _OPENPAR in_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_list",60, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // in_exp ::= in_array 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_exp",61, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // in_exp ::= in_subquery 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_exp",61, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // in_subquery ::= select_part_sub from_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",63, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // in_subquery ::= select_part_sub from_part where_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",63, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // in_subquery ::= select_part_sub from_part joins_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",63, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // in_subquery ::= select_part_sub from_part joins_part where_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",63, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // select_part_sub ::= _select col 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part_sub",18, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // in_array ::= element _COMMA in_array 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_array",62, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // in_array ::= element 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_array",62, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // element_in ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element_in",59, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // element_in ::= TABDOTCOL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element_in",59, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // element ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",74, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // element ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",74, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // element ::= REAL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",74, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // element ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",74, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // element ::= TABDOTCOL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",74, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // element ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",74, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // cmp_oper ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // cmp_oper ::= _GT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // cmp_oper ::= _LT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // cmp_oper ::= _LET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // cmp_oper ::= _GET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // cmp_oper ::= _DIFF 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // cmp_oper ::= _DIFF2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // log_oper ::= _AND 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("log_oper",72, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // log_oper ::= _OR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("log_oper",72, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Cup_Rules_SQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Cup_Rules_SQL$do_action(
    int                        CUP$Cup_Rules_SQL$act_num,
    java_cup.runtime.lr_parser CUP$Cup_Rules_SQL$parser,
    java.util.Stack            CUP$Cup_Rules_SQL$stack,
    int                        CUP$Cup_Rules_SQL$top)
    throws java.lang.Exception
    {
              return CUP$Cup_Rules_SQL$do_action_part00000000(
                               CUP$Cup_Rules_SQL$act_num,
                               CUP$Cup_Rules_SQL$parser,
                               CUP$Cup_Rules_SQL$stack,
                               CUP$Cup_Rules_SQL$top);
    }
}

}
