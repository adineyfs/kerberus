
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.kerberus.model.syntaxValidator.rules.sql;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.HashSet;
import java.io.*;
import com.kerberus.model.syntaxValidator.rules.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Cup_Rules_SQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Cup_Rules_SQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Cup_Rules_SQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup_Rules_SQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\002\002\004\000\002\017\004\000\002\017" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\003\000\002\022\005\000" +
    "\002\022\006\000\002\022\006\000\002\022\007\000\002" +
    "\022\006\000\002\022\007\000\002\022\007\000\002\022" +
    "\010\000\002\023\004\000\002\131\004\000\002\131\003" +
    "\000\002\132\005\000\002\132\004\000\002\132\005\000" +
    "\002\132\005\000\002\132\005\000\002\140\006\000\002" +
    "\137\005\000\002\137\003\000\002\136\004\000\002\136" +
    "\004\000\002\136\004\000\002\136\005\000\002\136\005" +
    "\000\002\136\005\000\002\134\004\000\002\135\005\000" +
    "\002\135\003\000\002\133\005\000\002\024\004\000\002" +
    "\024\004\000\002\025\012\000\002\025\010\000\002\026" +
    "\013\000\002\026\011\000\002\027\005\000\002\030\004" +
    "\000\002\030\005\000\002\030\004\000\002\032\011\000" +
    "\002\033\003\000\002\003\003\000\002\002\003\000\002" +
    "\012\003\000\002\013\003\000\002\014\003\000\002\015" +
    "\003\000\002\016\003\000\002\117\005\000\002\117\003" +
    "\000\002\120\005\000\002\120\004\000\002\041\004\000" +
    "\002\041\003\000\002\147\003\000\002\150\003\000\002" +
    "\150\004\000\002\151\005\000\002\151\003\000\002\151" +
    "\003\000\002\151\003\000\002\152\005\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\035\005\000\002\036\003\000\002\037\004\000\002\037" +
    "\006\000\002\037\005\000\002\037\003\000\002\037\005" +
    "\000\002\037\004\000\002\040\003\000\002\040\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\053\003\000\002\043\003\000\002\043\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\045\004" +
    "\000\002\046\010\000\002\047\012\000\002\050\006\000" +
    "\002\050\010\000\002\050\012\000\002\072\010\000\002" +
    "\074\006\000\002\076\006\000\002\100\010\000\002\102" +
    "\006\000\002\104\010\000\002\110\006\000\002\106\006" +
    "\000\002\112\006\000\002\054\006\000\002\054\006\000" +
    "\002\055\006\000\002\056\006\000\002\057\010\000\002" +
    "\060\006\000\002\061\006\000\002\062\006\000\002\070" +
    "\006\000\002\070\006\000\002\063\004\000\002\063\004" +
    "\000\002\063\003\000\002\063\003\000\002\064\012\000" +
    "\002\066\016\000\002\065\005\000\002\065\003\000\002" +
    "\073\005\000\002\073\003\000\002\103\005\000\002\103" +
    "\003\000\002\105\003\000\002\107\003\000\002\107\003" +
    "\000\002\111\003\000\002\111\003\000\002\075\007\000" +
    "\002\077\007\000\002\114\005\000\002\114\007\000\002" +
    "\101\003\000\002\071\004\000\002\071\004\000\002\071" +
    "\003\000\002\071\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\113\005\000\002" +
    "\113\005\000\002\121\003\000\002\121\003\000\002\122" +
    "\003\000\002\122\003\000\002\122\003\000\002\123\003" +
    "\000\002\123\003\000\002\123\003\000\002\153\005\000" +
    "\002\153\006\000\002\153\006\000\002\153\007\000\002" +
    "\154\004\000\002\154\003\000\002\155\004\000\002\157" +
    "\004\000\002\157\004\000\002\160\004\000\002\156\004" +
    "\000\002\161\007\000\002\161\006\000\002\161\007\000" +
    "\002\161\004\000\002\161\004\000\002\163\003\000\002" +
    "\164\004\000\002\164\003\000\002\162\003\000\002\166" +
    "\005\000\002\166\003\000\002\166\003\000\002\167\005" +
    "\000\002\167\005\000\002\170\003\000\002\170\003\000" +
    "\002\170\003\000\002\165\003\000\002\165\003\000\002" +
    "\165\003\000\002\165\003\000\002\171\005\000\002\172" +
    "\005\000\002\173\003\000\002\173\003\000\002\173\003" +
    "\000\002\173\003\000\002\174\003\000\002\174\003\000" +
    "\002\174\003\000\002\174\003\000\002\174\003\000\002" +
    "\174\003\000\002\174\003\000\002\174\003\000\002\174" +
    "\003\000\002\175\007\000\002\175\007\000\002\175\004" +
    "\000\002\115\004\000\002\007\005\000\002\007\003\000" +
    "\002\004\003\000\002\006\003\000\002\006\003\000\002" +
    "\010\003\000\002\011\004\000\002\011\004\000\002\116" +
    "\004\000\002\005\003\000\002\141\005\000\002\141\003" +
    "\000\002\142\005\000\002\142\005\000\002\142\005\000" +
    "\002\142\006\000\002\146\003\000\002\125\005\000\002" +
    "\126\003\000\002\126\003\000\002\130\004\000\002\130" +
    "\005\000\002\130\005\000\002\130\006\000\002\031\004" +
    "\000\002\127\005\000\002\127\003\000\002\124\003\000" +
    "\002\124\003\000\002\145\003\000\002\145\003\000\002" +
    "\145\003\000\002\145\003\000\002\145\003\000\002\145" +
    "\003\000\002\144\003\000\002\144\003\000\002\144\003" +
    "\000\002\144\003\000\002\144\003\000\002\144\003\000" +
    "\002\144\003\000\002\143\003\000\002\143\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01f4\000\014\003\015\004\017\005\006\007\013\014" +
    "\020\001\002\000\106\031\063\035\u01f5\036\032\037\131" +
    "\040\064\041\120\042\076\043\126\044\121\045\135\046" +
    "\125\047\123\050\055\051\151\052\124\053\143\054\100" +
    "\055\152\056\102\057\132\060\106\061\065\062\140\063" +
    "\107\064\067\065\156\066\147\073\037\074\071\075\053" +
    "\076\033\100\031\126\075\131\u01f3\001\002\000\004\010" +
    "\u015b\001\002\000\006\003\uff3d\073\uff3d\001\002\000\004" +
    "\004\017\001\002\000\016\002\ufffc\003\ufffc\004\ufffc\005" +
    "\ufffc\007\ufffc\014\ufffc\001\002\000\016\002\ufffb\003\ufffb" +
    "\004\ufffb\005\ufffb\007\ufffb\014\ufffb\001\002\000\016\002" +
    "\u01d0\003\015\004\017\005\006\007\013\014\020\001\002" +
    "\000\006\003\u01c9\010\u01ca\001\002\000\010\073\203\077" +
    "\200\101\202\001\002\000\006\003\uff3e\006\uff3e\001\002" +
    "\000\016\002\uffff\003\uffff\004\uffff\005\uffff\007\uffff\014" +
    "\uffff\001\002\000\106\031\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\073\uffcf\074\uffcf\075\uffcf" +
    "\076\uffcf\100\uffcf\126\uffcf\131\uffcf\001\002\000\010\073" +
    "\uffd0\077\uffd0\101\uffd0\001\002\000\016\002\ufffe\003\ufffe" +
    "\004\ufffe\005\ufffe\007\ufffe\014\ufffe\001\002\000\016\002" +
    "\ufffd\003\ufffd\004\ufffd\005\ufffd\007\ufffd\014\ufffd\001\002" +
    "\000\006\003\u01a8\073\u016c\001\002\000\006\003\026\006" +
    "\027\001\002\000\014\003\034\036\032\073\037\076\033" +
    "\100\031\001\002\000\016\002\uff42\003\uff42\004\uff42\005" +
    "\uff42\007\uff42\014\uff42\001\002\000\014\003\uff40\036\uff40" +
    "\073\uff40\076\uff40\100\uff40\001\002\000\024\102\u019d\116" +
    "\u01a3\117\u01a0\120\u01a1\121\u019c\122\u019b\123\u019f\124\u01a4" +
    "\125\u019e\001\002\000\214\003\uff55\010\uff55\011\uff55\015" +
    "\uff55\017\uff55\020\uff55\031\uff55\032\uff55\036\uff55\037\uff55" +
    "\040\uff55\041\uff55\042\uff55\043\uff55\044\uff55\045\uff55\046" +
    "\uff55\047\uff55\050\uff55\051\uff55\052\uff55\053\uff55\054\uff55" +
    "\055\uff55\056\uff55\057\uff55\060\uff55\061\uff55\062\uff55\063" +
    "\uff55\064\uff55\065\uff55\066\uff55\067\uff55\070\uff55\071\uff55" +
    "\072\uff55\073\uff55\074\uff55\075\uff55\076\uff55\077\uff55\100" +
    "\uff55\101\uff55\102\uff55\103\uff55\104\uff55\105\uff55\106\uff55" +
    "\107\uff55\110\uff55\111\uff55\112\uff55\113\uff55\114\uff55\115" +
    "\uff55\116\uff55\117\uff55\120\uff55\121\uff55\122\uff55\123\uff55" +
    "\124\uff55\125\uff55\126\uff55\127\uff55\130\uff55\131\uff55\132" +
    "\uff55\001\002\000\214\003\uff57\010\uff57\011\uff57\015\uff57" +
    "\017\uff57\020\uff57\031\uff57\032\uff57\036\uff57\037\uff57\040" +
    "\uff57\041\uff57\042\uff57\043\uff57\044\uff57\045\uff57\046\uff57" +
    "\047\uff57\050\uff57\051\uff57\052\uff57\053\uff57\054\uff57\055" +
    "\uff57\056\uff57\057\uff57\060\uff57\061\uff57\062\uff57\063\uff57" +
    "\064\uff57\065\uff57\066\uff57\067\uff57\070\uff57\071\uff57\072" +
    "\uff57\073\uff57\074\uff57\075\uff57\076\uff57\077\uff57\100\uff57" +
    "\101\uff57\102\uff57\103\uff57\104\uff57\105\uff57\106\uff57\107" +
    "\uff57\110\uff57\111\uff57\112\uff57\113\uff57\114\uff57\115\uff57" +
    "\116\uff57\117\uff57\120\uff57\121\uff57\122\uff57\123\uff57\124" +
    "\uff57\125\uff57\126\uff57\127\uff57\130\uff57\131\uff57\132\uff57" +
    "\001\002\000\216\003\uff54\010\uff54\011\uff54\012\uff54\015" +
    "\uff54\017\uff54\020\uff54\031\uff54\032\uff54\036\uff54\037\uff54" +
    "\040\uff54\041\uff54\042\uff54\043\uff54\044\uff54\045\uff54\046" +
    "\uff54\047\uff54\050\uff54\051\uff54\052\uff54\053\uff54\054\uff54" +
    "\055\uff54\056\uff54\057\uff54\060\uff54\061\uff54\062\uff54\063" +
    "\uff54\064\uff54\065\uff54\066\uff54\067\uff54\070\uff54\071\uff54" +
    "\072\uff54\073\uff54\074\uff54\075\uff54\076\uff54\077\uff54\100" +
    "\uff54\101\uff54\102\uff54\103\uff54\104\uff54\105\uff54\106\uff54" +
    "\107\uff54\110\uff54\111\uff54\112\uff54\113\uff54\114\uff54\115" +
    "\uff54\116\uff54\117\uff54\120\uff54\121\uff54\122\uff54\123\uff54" +
    "\124\uff54\125\uff54\126\uff54\127\uff54\130\uff54\131\uff54\132" +
    "\uff54\001\002\000\010\003\uff3a\011\uff3a\132\uff3a\001\002" +
    "\000\010\003\044\011\045\132\043\001\002\000\012\003" +
    "\uff3b\011\uff3b\130\041\132\uff3b\001\002\000\214\003\uff56" +
    "\010\uff56\011\uff56\015\uff56\017\uff56\020\uff56\031\uff56\032" +
    "\uff56\036\uff56\037\uff56\040\uff56\041\uff56\042\uff56\043\uff56" +
    "\044\uff56\045\uff56\046\uff56\047\uff56\050\uff56\051\uff56\052" +
    "\uff56\053\uff56\054\uff56\055\uff56\056\uff56\057\uff56\060\uff56" +
    "\061\uff56\062\uff56\063\uff56\064\uff56\065\uff56\066\uff56\067" +
    "\uff56\070\uff56\071\uff56\072\uff56\073\uff56\074\uff56\075\uff56" +
    "\076\uff56\077\uff56\100\uff56\101\uff56\102\uff56\103\uff56\104" +
    "\uff56\105\uff56\106\uff56\107\uff56\110\uff56\111\uff56\112\uff56" +
    "\113\uff56\114\uff56\115\uff56\116\uff56\117\uff56\120\uff56\121" +
    "\uff56\122\uff56\123\uff56\124\uff56\125\uff56\126\uff56\127\uff56" +
    "\130\uff56\131\uff56\132\uff56\001\002\000\214\003\uff58\010" +
    "\uff58\011\uff58\015\uff58\017\uff58\020\uff58\031\uff58\032\uff58" +
    "\036\uff58\037\uff58\040\uff58\041\uff58\042\uff58\043\uff58\044" +
    "\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051\uff58\052\uff58" +
    "\053\uff58\054\uff58\055\uff58\056\uff58\057\uff58\060\uff58\061" +
    "\uff58\062\uff58\063\uff58\064\uff58\065\uff58\066\uff58\067\uff58" +
    "\070\uff58\071\uff58\072\uff58\073\uff58\074\uff58\075\uff58\076" +
    "\uff58\077\uff58\100\uff58\101\uff58\102\uff58\103\uff58\104\uff58" +
    "\105\uff58\106\uff58\107\uff58\110\uff58\111\uff58\112\uff58\113" +
    "\uff58\114\uff58\115\uff58\116\uff58\117\uff58\120\uff58\121\uff58" +
    "\122\uff58\123\uff58\124\uff58\125\uff58\126\uff58\127\uff58\130" +
    "\uff58\131\uff58\132\uff58\001\002\000\014\003\034\036\032" +
    "\073\037\076\033\100\031\001\002\000\010\003\uff3c\011" +
    "\uff3c\132\uff3c\001\002\000\016\002\ufffa\003\ufffa\004\ufffa" +
    "\005\ufffa\007\ufffa\014\ufffa\001\002\000\016\002\uff44\003" +
    "\uff44\004\uff44\005\uff44\007\uff44\014\uff44\001\002\000\102" +
    "\031\uff14\036\uff14\037\uff14\040\uff14\041\uff14\042\uff14\043" +
    "\uff14\044\uff14\045\uff14\046\uff14\047\uff14\050\uff14\051\uff14" +
    "\052\uff14\053\uff14\054\uff14\055\uff14\056\uff14\057\uff14\060" +
    "\uff14\061\uff14\062\uff14\063\uff14\064\uff14\065\uff14\066\uff14" +
    "\073\uff14\074\uff14\075\uff14\076\uff14\100\uff14\126\uff14\001" +
    "\002\000\004\132\043\001\002\000\004\003\u0199\001\002" +
    "\000\102\031\063\036\032\037\131\040\064\041\120\042" +
    "\076\043\126\044\121\045\135\046\125\047\123\050\055" +
    "\051\151\052\124\053\143\054\100\055\152\056\102\057" +
    "\132\060\106\061\065\062\140\063\107\064\067\065\156" +
    "\066\147\073\052\074\071\075\053\076\033\100\110\126" +
    "\075\001\002\000\162\010\uff9f\015\uff9f\017\uff9f\020\uff9f" +
    "\031\uff9f\032\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057" +
    "\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f" +
    "\066\uff9f\070\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077" +
    "\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f" +
    "\106\uff9f\107\uff9f\110\uff9f\111\uff9f\112\uff9f\113\uff9f\114" +
    "\uff9f\115\uff9f\126\uff9f\127\uff9f\130\uff9f\131\uff9f\132\uff9f" +
    "\001\002\000\034\012\uff56\034\uff02\102\uff56\103\uff56\104" +
    "\uff56\105\uff56\106\uff56\107\uff56\110\uff56\111\uff56\112\uff56" +
    "\113\uff56\131\uff56\001\002\000\174\003\uff32\010\uff32\011" +
    "\uff32\015\uff32\017\uff32\020\uff32\031\uff32\032\uff32\036\uff32" +
    "\037\uff32\040\uff32\041\uff32\042\uff32\043\uff32\044\uff32\045" +
    "\uff32\046\uff32\047\uff32\050\uff32\051\uff32\052\uff32\053\uff32" +
    "\054\uff32\055\uff32\056\uff32\057\uff32\060\uff32\061\uff32\062" +
    "\uff32\063\uff32\064\uff32\065\uff32\066\uff32\067\uff32\070\uff32" +
    "\071\uff32\072\uff32\073\uff32\074\uff32\075\uff32\076\uff32\077" +
    "\uff32\100\uff32\101\uff32\102\uff32\103\uff32\104\uff32\105\uff32" +
    "\106\uff32\107\uff32\110\uff32\111\uff32\112\uff32\113\uff32\114" +
    "\uff32\115\uff32\126\uff32\127\uff32\130\uff32\131\uff32\132\uff32" +
    "\001\002\000\162\010\uffa8\015\uffa8\017\uffa8\020\uffa8\031" +
    "\uffa8\032\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\070\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8" +
    "\100\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106" +
    "\uffa8\107\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8" +
    "\115\uffa8\126\uffa8\127\uffa8\130\uffa8\131\uffa8\132\uffa8\001" +
    "\002\000\004\126\u0196\001\002\000\162\010\uffa6\015\uffa6" +
    "\017\uffa6\020\uffa6\031\uffa6\032\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\070\uffa6\073\uffa6\074\uffa6\075" +
    "\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6" +
    "\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6\112" +
    "\uffa6\113\uffa6\114\uffa6\115\uffa6\126\uffa6\127\uffa6\130\uffa6" +
    "\131\uffa6\132\uffa6\001\002\000\162\010\uffaa\015\uffaa\017" +
    "\uffaa\020\uffaa\031\uffaa\032\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\070\uffaa\073\uffaa\074\uffaa\075\uffaa" +
    "\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104" +
    "\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa" +
    "\113\uffaa\114\uffaa\115\uffaa\126\uffaa\127\uffaa\130\uffaa\131" +
    "\uffaa\132\uffaa\001\002\000\004\034\u014c\001\002\000\162" +
    "\010\uffbd\015\uffbd\017\uffbd\020\uffbd\031\uffbd\032\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\070\uffbd\073" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd" +
    "\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110" +
    "\uffbd\111\uffbd\112\uffbd\113\uffbd\114\uffbd\115\uffbd\126\uffbd" +
    "\127\uffbd\130\uffbd\131\uffbd\132\uffbd\001\002\000\162\010" +
    "\uffb7\015\uffb7\017\uffb7\020\uffb7\031\uffb7\032\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\070\uffb7\073\uffb7" +
    "\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7" +
    "\111\uffb7\112\uffb7\113\uffb7\114\uffb7\115\uffb7\126\uffb7\127" +
    "\uffb7\130\uffb7\131\uffb7\132\uffb7\001\002\000\004\126\u0148" +
    "\001\002\000\004\126\u0145\001\002\000\004\126\u013e\001" +
    "\002\000\162\010\uffa4\015\uffa4\017\uffa4\020\uffa4\031\uffa4" +
    "\032\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4" +
    "\070\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100" +
    "\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4" +
    "\107\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4\115" +
    "\uffa4\126\uffa4\127\uffa4\130\uffa4\131\uffa4\132\uffa4\001\002" +
    "\000\004\126\u0137\001\002\000\162\010\uff9b\015\uff9b\017" +
    "\uff9b\020\uff9b\031\uff9b\032\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\066\uff9b\070\uff9b\073\uff9b\074\uff9b\075\uff9b" +
    "\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b\104" +
    "\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\111\uff9b\112\uff9b" +
    "\113\uff9b\114\uff9b\115\uff9b\126\uff9b\127\uff9b\130\uff9b\131" +
    "\uff9b\132\uff9b\001\002\000\174\003\uff33\010\uff33\011\uff33" +
    "\015\uff33\017\uff33\020\uff33\031\uff33\032\uff33\036\uff33\037" +
    "\uff33\040\uff33\041\uff33\042\uff33\043\uff33\044\uff33\045\uff33" +
    "\046\uff33\047\uff33\050\uff33\051\uff33\052\uff33\053\uff33\054" +
    "\uff33\055\uff33\056\uff33\057\uff33\060\uff33\061\uff33\062\uff33" +
    "\063\uff33\064\uff33\065\uff33\066\uff33\067\uff33\070\uff33\071" +
    "\uff33\072\uff33\073\uff33\074\uff33\075\uff33\076\uff33\077\uff33" +
    "\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33\105\uff33\106" +
    "\uff33\107\uff33\110\uff33\111\uff33\112\uff33\113\uff33\114\uff33" +
    "\115\uff33\126\uff33\127\uff33\130\uff33\131\uff33\132\uff33\001" +
    "\002\000\162\010\uff97\015\uff97\017\uff97\020\uff97\031\uff97" +
    "\032\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97" +
    "\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060" +
    "\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97" +
    "\070\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100" +
    "\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97\106\uff97" +
    "\107\uff97\110\uff97\111\uff97\112\uff97\113\uff97\114\uff97\115" +
    "\uff97\126\uff97\127\uff97\130\uff97\131\uff97\132\uff97\001\002" +
    "\000\162\010\uffa5\015\uffa5\017\uffa5\020\uffa5\031\uffa5\032" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\070" +
    "\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5" +
    "\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107" +
    "\uffa5\110\uffa5\111\uffa5\112\uffa5\113\uffa5\114\uffa5\115\uffa5" +
    "\126\uffa5\127\uffa5\130\uffa5\131\uffa5\132\uffa5\001\002\000" +
    "\174\003\uff34\010\uff34\011\uff34\015\uff34\017\uff34\020\uff34" +
    "\031\uff34\032\uff34\036\uff34\037\uff34\040\uff34\041\uff34\042" +
    "\uff34\043\uff34\044\uff34\045\uff34\046\uff34\047\uff34\050\uff34" +
    "\051\uff34\052\uff34\053\uff34\054\uff34\055\uff34\056\uff34\057" +
    "\uff34\060\uff34\061\uff34\062\uff34\063\uff34\064\uff34\065\uff34" +
    "\066\uff34\067\uff34\070\uff34\071\uff34\072\uff34\073\uff34\074" +
    "\uff34\075\uff34\076\uff34\077\uff34\100\uff34\101\uff34\102\uff34" +
    "\103\uff34\104\uff34\105\uff34\106\uff34\107\uff34\110\uff34\111" +
    "\uff34\112\uff34\113\uff34\114\uff34\115\uff34\126\uff34\127\uff34" +
    "\130\uff34\131\uff34\132\uff34\001\002\000\102\031\063\036" +
    "\032\037\131\040\064\041\120\042\076\043\126\044\121" +
    "\045\135\046\125\047\123\050\055\051\151\052\124\053" +
    "\143\054\100\055\152\056\102\057\132\060\106\061\065" +
    "\062\140\063\107\064\067\065\156\066\147\073\037\074" +
    "\071\075\053\076\033\100\031\126\075\001\002\000\004" +
    "\126\u0132\001\002\000\032\012\u012e\102\uff58\103\uff58\104" +
    "\uff58\105\uff58\106\uff58\107\uff58\110\uff58\111\uff58\112\uff58" +
    "\113\uff58\131\uff58\001\002\000\004\126\u0128\001\002\000" +
    "\162\010\uffa3\015\uffa3\017\uffa3\020\uffa3\031\uffa3\032\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\070\uffa3" +
    "\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3\101" +
    "\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3" +
    "\110\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\115\uffa3\126" +
    "\uffa3\127\uffa3\130\uffa3\131\uffa3\132\uffa3\001\002\000\004" +
    "\126\u0123\001\002\000\162\010\uffb8\015\uffb8\017\uffb8\020" +
    "\uffb8\031\uffb8\032\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\070\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8" +
    "\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105" +
    "\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8" +
    "\114\uffb8\115\uffb8\126\uffb8\127\uffb8\130\uffb8\131\uffb8\132" +
    "\uffb8\001\002\000\162\010\uff9e\015\uff9e\017\uff9e\020\uff9e" +
    "\031\uff9e\032\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e" +
    "\066\uff9e\070\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077" +
    "\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e" +
    "\106\uff9e\107\uff9e\110\uff9e\111\uff9e\112\uff9e\113\uff9e\114" +
    "\uff9e\115\uff9e\126\uff9e\127\uff9e\130\uff9e\131\uff9e\132\uff9e" +
    "\001\002\000\004\126\u011b\001\002\000\004\126\u0108\001" +
    "\002\000\004\126\u0103\001\002\000\034\012\uff55\034\uff01" +
    "\102\uff55\103\uff55\104\uff55\105\uff55\106\uff55\107\uff55\110" +
    "\uff55\111\uff55\112\uff55\113\uff55\131\uff55\001\002\000\162" +
    "\010\uff95\015\uff95\017\uff95\020\uff95\031\uff95\032\uff95\036" +
    "\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053" +
    "\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95" +
    "\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\070\uff95\073" +
    "\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95\101\uff95" +
    "\102\uff95\103\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110" +
    "\uff95\111\uff95\112\uff95\113\uff95\114\uff95\115\uff95\126\uff95" +
    "\127\uff95\130\uff95\131\uff95\132\uff95\001\002\000\162\010" +
    "\uff98\015\uff98\017\uff98\020\uff98\031\uff98\032\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98" +
    "\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\063\uff98\064\uff98\065\uff98\066\uff98\070\uff98\073\uff98" +
    "\074\uff98\075\uff98\076\uff98\077\uff98\100\uff98\101\uff98\102" +
    "\uff98\103\uff98\104\uff98\105\uff98\106\uff98\107\uff98\110\uff98" +
    "\111\uff98\112\uff98\113\uff98\114\uff98\115\uff98\126\uff98\127" +
    "\uff98\130\uff98\131\uff98\132\uff98\001\002\000\162\010\uff9c" +
    "\015\uff9c\017\uff9c\020\uff9c\031\uff9c\032\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\065\uff9c\066\uff9c\070\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c" +
    "\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c\111" +
    "\uff9c\112\uff9c\113\uff9c\114\uff9c\115\uff9c\126\uff9c\127\uff9c" +
    "\130\uff9c\131\uff9c\132\uff9c\001\002\000\162\010\uffa1\015" +
    "\uffa1\017\uffa1\020\uffa1\031\uffa1\032\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\065\uffa1\066\uffa1\070\uffa1\073\uffa1\074\uffa1" +
    "\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103" +
    "\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1" +
    "\112\uffa1\113\uffa1\114\uffa1\115\uffa1\126\uffa1\127\uffa1\130" +
    "\uffa1\131\uffa1\132\uffa1\001\002\000\162\010\uffba\015\uffba" +
    "\017\uffba\020\uffba\031\uffba\032\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\065\uffba\066\uffba\070\uffba\073\uffba\074\uffba\075" +
    "\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba" +
    "\104\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba\112" +
    "\uffba\113\uffba\114\uffba\115\uffba\126\uffba\127\uffba\130\uffba" +
    "\131\uffba\132\uffba\001\002\000\162\010\uffbb\015\uffbb\017" +
    "\uffbb\020\uffbb\031\uffbb\032\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\066\uffbb\070\uffbb\073\uffbb\074\uffbb\075\uffbb" +
    "\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104" +
    "\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb" +
    "\113\uffbb\114\uffbb\115\uffbb\126\uffbb\127\uffbb\130\uffbb\131" +
    "\uffbb\132\uffbb\001\002\000\044\015\uff0d\070\uff0d\102\uff0d" +
    "\103\uff0d\104\uff0d\105\uff0d\106\uff0d\107\uff0d\110\uff0d\111" +
    "\163\112\162\113\164\114\uff0d\115\uff0d\127\uff0d\131\170" +
    "\132\uff0d\001\002\000\004\126\u0100\001\002\000\004\126" +
    "\370\001\002\000\020\102\366\103\365\104\364\105\362" +
    "\106\360\107\357\110\363\001\002\000\004\126\347\001" +
    "\002\000\004\126\342\001\002\000\004\126\334\001\002" +
    "\000\004\126\322\001\002\000\162\010\uffa9\015\uffa9\017" +
    "\uffa9\020\uffa9\031\uffa9\032\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064" +
    "\uffa9\065\uffa9\066\uffa9\070\uffa9\073\uffa9\074\uffa9\075\uffa9" +
    "\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104" +
    "\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9" +
    "\113\uffa9\114\uffa9\115\uffa9\126\uffa9\127\uffa9\130\uffa9\131" +
    "\uffa9\132\uffa9\001\002\000\162\010\uff9d\015\uff9d\017\uff9d" +
    "\020\uff9d\031\uff9d\032\uff9d\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d" +
    "\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\070\uff9d\073\uff9d\074\uff9d\075\uff9d\076" +
    "\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d" +
    "\105\uff9d\106\uff9d\107\uff9d\110\uff9d\111\uff9d\112\uff9d\113" +
    "\uff9d\114\uff9d\115\uff9d\126\uff9d\127\uff9d\130\uff9d\131\uff9d" +
    "\132\uff9d\001\002\000\004\126\315\001\002\000\004\126" +
    "\276\001\002\000\162\010\uffbe\015\uffbe\017\uffbe\020\uffbe" +
    "\031\uffbe\032\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\070\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077" +
    "\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe" +
    "\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe\114" +
    "\uffbe\115\uffbe\126\uffbe\127\uffbe\130\uffbe\131\uffbe\132\uffbe" +
    "\001\002\000\016\015\uff12\070\uff12\114\274\115\272\127" +
    "\uff12\132\uff12\001\002\000\004\126\262\001\002\000\010" +
    "\015\uff15\127\uff15\132\uff15\001\002\000\162\010\uffb5\015" +
    "\uffb5\017\uffb5\020\uffb5\031\uffb5\032\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063" +
    "\uffb5\064\uffb5\065\uffb5\066\uffb5\070\uffb5\073\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103" +
    "\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5" +
    "\112\uffb5\113\uffb5\114\uffb5\115\uffb5\126\uffb5\127\uffb5\130" +
    "\uffb5\131\uffb5\132\uffb5\001\002\000\004\126\uffce\001\002" +
    "\000\162\010\uffa7\015\uffa7\017\uffa7\020\uffa7\031\uffa7\032" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\070" +
    "\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7" +
    "\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107" +
    "\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7\114\uffa7\115\uffa7" +
    "\126\uffa7\127\uffa7\130\uffa7\131\uffa7\132\uffa7\001\002\000" +
    "\162\010\uffbf\015\uffbf\017\uffbf\020\uffbf\031\uffbf\032\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\070\uffbf" +
    "\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101" +
    "\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf" +
    "\110\uffbf\111\uffbf\112\uffbf\113\uffbf\114\uffbf\115\uffbf\126" +
    "\uffbf\127\uffbf\130\uffbf\131\uffbf\132\uffbf\001\002\000\004" +
    "\126\254\001\002\000\162\010\uff99\015\uff99\017\uff99\020" +
    "\uff99\031\uff99\032\uff99\036\uff99\037\uff99\040\uff99\041\uff99" +
    "\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050" +
    "\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99" +
    "\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065" +
    "\uff99\066\uff99\070\uff99\073\uff99\074\uff99\075\uff99\076\uff99" +
    "\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99\104\uff99\105" +
    "\uff99\106\uff99\107\uff99\110\uff99\111\uff99\112\uff99\113\uff99" +
    "\114\uff99\115\uff99\126\uff99\127\uff99\130\uff99\131\uff99\132" +
    "\uff99\001\002\000\162\010\uff96\015\uff96\017\uff96\020\uff96" +
    "\031\uff96\032\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96" +
    "\066\uff96\070\uff96\073\uff96\074\uff96\075\uff96\076\uff96\077" +
    "\uff96\100\uff96\101\uff96\102\uff96\103\uff96\104\uff96\105\uff96" +
    "\106\uff96\107\uff96\110\uff96\111\uff96\112\uff96\113\uff96\114" +
    "\uff96\115\uff96\126\uff96\127\uff96\130\uff96\131\uff96\132\uff96" +
    "\001\002\000\162\010\uff9a\015\uff9a\017\uff9a\020\uff9a\031" +
    "\uff9a\032\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066" +
    "\uff9a\070\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a" +
    "\100\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106" +
    "\uff9a\107\uff9a\110\uff9a\111\uff9a\112\uff9a\113\uff9a\114\uff9a" +
    "\115\uff9a\126\uff9a\127\uff9a\130\uff9a\131\uff9a\132\uff9a\001" +
    "\002\000\014\036\032\067\215\073\037\076\033\100\031" +
    "\001\002\000\162\010\uffa2\015\uffa2\017\uffa2\020\uffa2\031" +
    "\uffa2\032\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\070\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2" +
    "\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106" +
    "\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2\114\uffa2" +
    "\115\uffa2\126\uffa2\127\uffa2\130\uffa2\131\uffa2\132\uffa2\001" +
    "\002\000\004\126\207\001\002\000\004\126\177\001\002" +
    "\000\162\010\uffb6\015\uffb6\017\uffb6\020\uffb6\031\uffb6\032" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\070" +
    "\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6" +
    "\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107" +
    "\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\114\uffb6\115\uffb6" +
    "\126\uffb6\127\uffb6\130\uffb6\131\uffb6\132\uffb6\001\002\000" +
    "\162\010\uffb9\015\uffb9\017\uffb9\020\uffb9\031\uffb9\032\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\070\uffb9" +
    "\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101" +
    "\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9" +
    "\110\uffb9\111\uffb9\112\uffb9\113\uffb9\114\uffb9\115\uffb9\126" +
    "\uffb9\127\uffb9\130\uffb9\131\uffb9\132\uffb9\001\002\000\174" +
    "\003\uff31\010\uff31\011\uff31\015\uff31\017\uff31\020\uff31\031" +
    "\uff31\032\uff31\036\uff31\037\uff31\040\uff31\041\uff31\042\uff31" +
    "\043\uff31\044\uff31\045\uff31\046\uff31\047\uff31\050\uff31\051" +
    "\uff31\052\uff31\053\uff31\054\uff31\055\uff31\056\uff31\057\uff31" +
    "\060\uff31\061\uff31\062\uff31\063\uff31\064\uff31\065\uff31\066" +
    "\uff31\067\uff31\070\uff31\071\uff31\072\uff31\073\uff31\074\uff31" +
    "\075\uff31\076\uff31\077\uff31\100\uff31\101\uff31\102\uff31\103" +
    "\uff31\104\uff31\105\uff31\106\uff31\107\uff31\110\uff31\111\uff31" +
    "\112\uff31\113\uff31\114\uff31\115\uff31\126\uff31\127\uff31\130" +
    "\uff31\131\uff31\132\uff31\001\002\000\004\126\160\001\002" +
    "\000\162\010\uffa0\015\uffa0\017\uffa0\020\uffa0\031\uffa0\032" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\070" +
    "\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0" +
    "\101\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107" +
    "\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0\115\uffa0" +
    "\126\uffa0\127\uffa0\130\uffa0\131\uffa0\132\uffa0\001\002\000" +
    "\102\031\063\036\032\037\131\040\064\041\120\042\076" +
    "\043\126\044\121\045\135\046\125\047\123\050\055\051" +
    "\151\052\124\053\143\054\100\055\152\056\102\057\132" +
    "\060\106\061\065\062\140\063\107\064\067\065\156\066" +
    "\147\073\037\074\071\075\053\076\033\100\031\126\075" +
    "\001\002\000\016\111\163\112\162\113\164\127\167\130" +
    "\166\131\170\001\002\000\102\031\uff2d\036\uff2d\037\uff2d" +
    "\040\uff2d\041\uff2d\042\uff2d\043\uff2d\044\uff2d\045\uff2d\046" +
    "\uff2d\047\uff2d\050\uff2d\051\uff2d\052\uff2d\053\uff2d\054\uff2d" +
    "\055\uff2d\056\uff2d\057\uff2d\060\uff2d\061\uff2d\062\uff2d\063" +
    "\uff2d\064\uff2d\065\uff2d\066\uff2d\073\uff2d\074\uff2d\075\uff2d" +
    "\076\uff2d\100\uff2d\126\uff2d\001\002\000\102\031\uff2e\036" +
    "\uff2e\037\uff2e\040\uff2e\041\uff2e\042\uff2e\043\uff2e\044\uff2e" +
    "\045\uff2e\046\uff2e\047\uff2e\050\uff2e\051\uff2e\052\uff2e\053" +
    "\uff2e\054\uff2e\055\uff2e\056\uff2e\057\uff2e\060\uff2e\061\uff2e" +
    "\062\uff2e\063\uff2e\064\uff2e\065\uff2e\066\uff2e\073\uff2e\074" +
    "\uff2e\075\uff2e\076\uff2e\100\uff2e\126\uff2e\001\002\000\102" +
    "\031\uff2b\036\uff2b\037\uff2b\040\uff2b\041\uff2b\042\uff2b\043" +
    "\uff2b\044\uff2b\045\uff2b\046\uff2b\047\uff2b\050\uff2b\051\uff2b" +
    "\052\uff2b\053\uff2b\054\uff2b\055\uff2b\056\uff2b\057\uff2b\060" +
    "\uff2b\061\uff2b\062\uff2b\063\uff2b\064\uff2b\065\uff2b\066\uff2b" +
    "\073\uff2b\074\uff2b\075\uff2b\076\uff2b\100\uff2b\126\uff2b\001" +
    "\002\000\102\031\063\036\032\037\131\040\064\041\120" +
    "\042\076\043\126\044\121\045\135\046\125\047\123\050" +
    "\055\051\151\052\124\053\143\054\100\055\152\056\102" +
    "\057\132\060\106\061\065\062\140\063\107\064\067\065" +
    "\156\066\147\073\037\074\071\075\053\076\033\100\031" +
    "\126\075\001\002\000\102\031\063\036\032\037\131\040" +
    "\064\041\120\042\076\043\126\044\121\045\135\046\125" +
    "\047\123\050\055\051\151\052\124\053\143\054\100\055" +
    "\152\056\102\057\132\060\106\061\065\062\140\063\107" +
    "\064\067\065\156\066\147\073\037\074\071\075\053\076" +
    "\033\100\031\126\075\001\002\000\162\010\uff91\015\uff91" +
    "\017\uff91\020\uff91\031\uff91\032\uff91\036\uff91\037\uff91\040" +
    "\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91" +
    "\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055" +
    "\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91" +
    "\064\uff91\065\uff91\066\uff91\070\uff91\073\uff91\074\uff91\075" +
    "\uff91\076\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91" +
    "\104\uff91\105\uff91\106\uff91\107\uff91\110\uff91\111\uff91\112" +
    "\uff91\113\uff91\114\uff91\115\uff91\126\uff91\127\uff91\130\uff91" +
    "\131\uff91\132\uff91\001\002\000\102\031\uff2c\036\uff2c\037" +
    "\uff2c\040\uff2c\041\uff2c\042\uff2c\043\uff2c\044\uff2c\045\uff2c" +
    "\046\uff2c\047\uff2c\050\uff2c\051\uff2c\052\uff2c\053\uff2c\054" +
    "\uff2c\055\uff2c\056\uff2c\057\uff2c\060\uff2c\061\uff2c\062\uff2c" +
    "\063\uff2c\064\uff2c\065\uff2c\066\uff2c\073\uff2c\074\uff2c\075" +
    "\uff2c\076\uff2c\100\uff2c\126\uff2c\001\002\000\016\111\163" +
    "\112\162\113\164\127\173\130\172\131\170\001\002\000" +
    "\102\031\063\036\032\037\131\040\064\041\120\042\076" +
    "\043\126\044\121\045\135\046\125\047\123\050\055\051" +
    "\151\052\124\053\143\054\100\055\152\056\102\057\132" +
    "\060\106\061\065\062\140\063\107\064\067\065\156\066" +
    "\147\073\037\074\071\075\053\076\033\100\031\126\075" +
    "\001\002\000\162\010\uff90\015\uff90\017\uff90\020\uff90\031" +
    "\uff90\032\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90" +
    "\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051" +
    "\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90" +
    "\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066" +
    "\uff90\070\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90" +
    "\100\uff90\101\uff90\102\uff90\103\uff90\104\uff90\105\uff90\106" +
    "\uff90\107\uff90\110\uff90\111\uff90\112\uff90\113\uff90\114\uff90" +
    "\115\uff90\126\uff90\127\uff90\130\uff90\131\uff90\132\uff90\001" +
    "\002\000\014\111\163\112\162\113\164\127\175\131\170" +
    "\001\002\000\162\010\uff8f\015\uff8f\017\uff8f\020\uff8f\031" +
    "\uff8f\032\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051" +
    "\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066" +
    "\uff8f\070\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f" +
    "\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106" +
    "\uff8f\107\uff8f\110\uff8f\111\uff8f\112\uff8f\113\uff8f\114\uff8f" +
    "\115\uff8f\126\uff8f\127\uff8f\130\uff8f\131\uff8f\132\uff8f\001" +
    "\002\000\162\010\uffbc\015\uffbc\017\uffbc\020\uffbc\031\uffbc" +
    "\032\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc" +
    "\070\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc" +
    "\107\uffbc\110\uffbc\111\163\112\162\113\164\114\uffbc\115" +
    "\uffbc\126\uffbc\127\uffbc\130\uffbc\131\170\132\uffbc\001\002" +
    "\000\012\073\203\076\204\077\200\101\202\001\002\000" +
    "\162\010\uff53\015\uff53\017\uff53\020\uff53\031\uff53\032\uff53" +
    "\036\uff53\037\uff53\040\uff53\041\uff53\042\uff53\043\uff53\044" +
    "\uff53\045\uff53\046\uff53\047\uff53\050\uff53\051\uff53\052\uff53" +
    "\053\uff53\054\uff53\055\uff53\056\uff53\057\uff53\060\uff53\061" +
    "\uff53\062\uff53\063\uff53\064\uff53\065\uff53\066\uff53\070\uff53" +
    "\073\uff53\074\uff53\075\uff53\076\uff53\077\uff53\100\uff53\101" +
    "\uff53\102\uff53\103\uff53\104\uff53\105\uff53\106\uff53\107\uff53" +
    "\110\uff53\111\uff53\112\uff53\113\uff53\114\uff53\115\uff53\126" +
    "\uff53\127\uff53\130\uff53\131\uff53\132\uff53\001\002\000\004" +
    "\127\uff6d\001\002\000\162\010\uff51\015\uff51\017\uff51\020" +
    "\uff51\031\uff51\032\uff51\036\uff51\037\uff51\040\uff51\041\uff51" +
    "\042\uff51\043\uff51\044\uff51\045\uff51\046\uff51\047\uff51\050" +
    "\uff51\051\uff51\052\uff51\053\uff51\054\uff51\055\uff51\056\uff51" +
    "\057\uff51\060\uff51\061\uff51\062\uff51\063\uff51\064\uff51\065" +
    "\uff51\066\uff51\070\uff51\073\uff51\074\uff51\075\uff51\076\uff51" +
    "\077\uff51\100\uff51\101\uff51\102\uff51\103\uff51\104\uff51\105" +
    "\uff51\106\uff51\107\uff51\110\uff51\111\uff51\112\uff51\113\uff51" +
    "\114\uff51\115\uff51\126\uff51\127\uff51\130\uff51\131\uff51\132" +
    "\uff51\001\002\000\162\010\uff52\015\uff52\017\uff52\020\uff52" +
    "\031\uff52\032\uff52\036\uff52\037\uff52\040\uff52\041\uff52\042" +
    "\uff52\043\uff52\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52" +
    "\051\uff52\052\uff52\053\uff52\054\uff52\055\uff52\056\uff52\057" +
    "\uff52\060\uff52\061\uff52\062\uff52\063\uff52\064\uff52\065\uff52" +
    "\066\uff52\070\uff52\073\uff52\074\uff52\075\uff52\076\uff52\077" +
    "\uff52\100\uff52\101\uff52\102\uff52\103\uff52\104\uff52\105\uff52" +
    "\106\uff52\107\uff52\110\uff52\111\uff52\112\uff52\113\uff52\114" +
    "\uff52\115\uff52\126\uff52\127\uff52\130\uff52\131\uff52\132\uff52" +
    "\001\002\000\004\127\uff6e\001\002\000\004\127\206\001" +
    "\002\000\162\010\uff87\015\uff87\017\uff87\020\uff87\031\uff87" +
    "\032\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043" +
    "\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87" +
    "\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060" +
    "\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066\uff87" +
    "\070\uff87\073\uff87\074\uff87\075\uff87\076\uff87\077\uff87\100" +
    "\uff87\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\106\uff87" +
    "\107\uff87\110\uff87\111\uff87\112\uff87\113\uff87\114\uff87\115" +
    "\uff87\126\uff87\127\uff87\130\uff87\131\uff87\132\uff87\001\002" +
    "\000\004\076\210\001\002\000\004\127\211\001\002\000" +
    "\162\010\uff82\015\uff82\017\uff82\020\uff82\031\uff82\032\uff82" +
    "\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044" +
    "\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82" +
    "\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061" +
    "\uff82\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82\070\uff82" +
    "\073\uff82\074\uff82\075\uff82\076\uff82\077\uff82\100\uff82\101" +
    "\uff82\102\uff82\103\uff82\104\uff82\105\uff82\106\uff82\107\uff82" +
    "\110\uff82\111\uff82\112\uff82\113\uff82\114\uff82\115\uff82\126" +
    "\uff82\127\uff82\130\uff82\131\uff82\132\uff82\001\002\000\010" +
    "\067\215\071\uff4b\072\uff4b\001\002\000\004\067\215\001" +
    "\002\000\004\070\244\001\002\000\102\031\063\036\241" +
    "\037\131\040\064\041\120\042\076\043\126\044\121\045" +
    "\135\046\125\047\123\050\055\051\151\052\124\053\143" +
    "\054\100\055\152\056\102\057\132\060\106\061\065\062" +
    "\140\063\107\064\067\065\156\066\147\073\234\074\236" +
    "\075\235\076\237\100\240\126\075\001\002\000\006\071" +
    "\217\072\221\001\002\000\022\036\032\066\147\073\037" +
    "\074\071\075\053\076\033\100\031\126\223\001\002\000" +
    "\004\072\222\001\002\000\174\003\uff50\010\uff50\011\uff50" +
    "\015\uff50\017\uff50\020\uff50\031\uff50\032\uff50\036\uff50\037" +
    "\uff50\040\uff50\041\uff50\042\uff50\043\uff50\044\uff50\045\uff50" +
    "\046\uff50\047\uff50\050\uff50\051\uff50\052\uff50\053\uff50\054" +
    "\uff50\055\uff50\056\uff50\057\uff50\060\uff50\061\uff50\062\uff50" +
    "\063\uff50\064\uff50\065\uff50\066\uff50\067\uff50\070\uff50\071" +
    "\uff50\072\uff50\073\uff50\074\uff50\075\uff50\076\uff50\077\uff50" +
    "\100\uff50\101\uff50\102\uff50\103\uff50\104\uff50\105\uff50\106" +
    "\uff50\107\uff50\110\uff50\111\uff50\112\uff50\113\uff50\114\uff50" +
    "\115\uff50\126\uff50\127\uff50\130\uff50\131\uff50\132\uff50\001" +
    "\002\000\174\003\uff4f\010\uff4f\011\uff4f\015\uff4f\017\uff4f" +
    "\020\uff4f\031\uff4f\032\uff4f\036\uff4f\037\uff4f\040\uff4f\041" +
    "\uff4f\042\uff4f\043\uff4f\044\uff4f\045\uff4f\046\uff4f\047\uff4f" +
    "\050\uff4f\051\uff4f\052\uff4f\053\uff4f\054\uff4f\055\uff4f\056" +
    "\uff4f\057\uff4f\060\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f" +
    "\065\uff4f\066\uff4f\067\uff4f\070\uff4f\071\uff4f\072\uff4f\073" +
    "\uff4f\074\uff4f\075\uff4f\076\uff4f\077\uff4f\100\uff4f\101\uff4f" +
    "\102\uff4f\103\uff4f\104\uff4f\105\uff4f\106\uff4f\107\uff4f\110" +
    "\uff4f\111\uff4f\112\uff4f\113\uff4f\114\uff4f\115\uff4f\126\uff4f" +
    "\127\uff4f\130\uff4f\131\uff4f\132\uff4f\001\002\000\022\036" +
    "\032\066\147\073\037\074\071\075\053\076\033\100\031" +
    "\126\223\001\002\000\032\003\uff37\011\uff37\067\uff37\071" +
    "\uff37\072\uff37\111\uff37\112\uff37\113\uff37\127\uff37\130\uff37" +
    "\131\uff37\132\uff37\001\002\000\032\003\uff36\011\uff36\067" +
    "\uff36\071\uff36\072\uff36\111\uff36\112\uff36\113\uff36\127\uff36" +
    "\130\uff36\131\uff36\132\uff36\001\002\000\032\003\uff35\011" +
    "\uff35\067\uff35\071\uff35\072\uff35\111\uff35\112\uff35\113\uff35" +
    "\127\uff35\130\uff35\131\uff35\132\uff35\001\002\000\014\072" +
    "\uff46\111\163\112\162\113\164\131\170\001\002\000\022" +
    "\036\032\066\147\073\037\074\071\075\053\076\033\100" +
    "\031\126\223\001\002\000\032\003\uff2f\011\uff2f\067\uff2f" +
    "\071\uff2f\072\uff2f\111\163\112\162\113\164\127\uff2f\130" +
    "\uff2f\131\170\132\uff2f\001\002\000\014\111\163\112\162" +
    "\113\164\127\233\131\170\001\002\000\032\003\uff30\011" +
    "\uff30\067\uff30\071\uff30\072\uff30\111\uff30\112\uff30\113\uff30" +
    "\127\uff30\130\uff30\131\uff30\132\uff30\001\002\000\036\012" +
    "\uff56\034\uff02\070\uff00\102\uff56\103\uff56\104\uff56\105\uff56" +
    "\106\uff56\107\uff56\110\uff56\111\uff56\112\uff56\113\uff56\131" +
    "\uff56\001\002\000\032\070\ufefe\102\uff32\103\uff32\104\uff32" +
    "\105\uff32\106\uff32\107\uff32\110\uff32\111\uff32\112\uff32\113" +
    "\uff32\131\uff32\001\002\000\032\070\ufeff\102\uff33\103\uff33" +
    "\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33\111\uff33\112" +
    "\uff33\113\uff33\131\uff33\001\002\000\034\012\uff54\070\ufefd" +
    "\102\uff54\103\uff54\104\uff54\105\uff54\106\uff54\107\uff54\110" +
    "\uff54\111\uff54\112\uff54\113\uff54\131\uff54\001\002\000\036" +
    "\012\uff55\034\uff01\070\ufefc\102\uff55\103\uff55\104\uff55\105" +
    "\uff55\106\uff55\107\uff55\110\uff55\111\uff55\112\uff55\113\uff55" +
    "\131\uff55\001\002\000\032\070\ufefb\102\uff57\103\uff57\104" +
    "\uff57\105\uff57\106\uff57\107\uff57\110\uff57\111\uff57\112\uff57" +
    "\113\uff57\131\uff57\001\002\000\004\070\uff49\001\002\000" +
    "\004\070\uff48\001\002\000\022\036\032\066\147\073\037" +
    "\074\071\075\053\076\033\100\031\126\223\001\002\000" +
    "\010\067\uff4a\071\uff4a\072\uff4a\001\002\000\020\067\uff47" +
    "\071\uff47\072\uff47\111\163\112\162\113\164\131\170\001" +
    "\002\000\006\071\217\072\251\001\002\000\004\072\252" +
    "\001\002\000\174\003\uff4e\010\uff4e\011\uff4e\015\uff4e\017" +
    "\uff4e\020\uff4e\031\uff4e\032\uff4e\036\uff4e\037\uff4e\040\uff4e" +
    "\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e\046\uff4e\047" +
    "\uff4e\050\uff4e\051\uff4e\052\uff4e\053\uff4e\054\uff4e\055\uff4e" +
    "\056\uff4e\057\uff4e\060\uff4e\061\uff4e\062\uff4e\063\uff4e\064" +
    "\uff4e\065\uff4e\066\uff4e\067\uff4e\070\uff4e\071\uff4e\072\uff4e" +
    "\073\uff4e\074\uff4e\075\uff4e\076\uff4e\077\uff4e\100\uff4e\101" +
    "\uff4e\102\uff4e\103\uff4e\104\uff4e\105\uff4e\106\uff4e\107\uff4e" +
    "\110\uff4e\111\uff4e\112\uff4e\113\uff4e\114\uff4e\115\uff4e\126" +
    "\uff4e\127\uff4e\130\uff4e\131\uff4e\132\uff4e\001\002\000\174" +
    "\003\uff4d\010\uff4d\011\uff4d\015\uff4d\017\uff4d\020\uff4d\031" +
    "\uff4d\032\uff4d\036\uff4d\037\uff4d\040\uff4d\041\uff4d\042\uff4d" +
    "\043\uff4d\044\uff4d\045\uff4d\046\uff4d\047\uff4d\050\uff4d\051" +
    "\uff4d\052\uff4d\053\uff4d\054\uff4d\055\uff4d\056\uff4d\057\uff4d" +
    "\060\uff4d\061\uff4d\062\uff4d\063\uff4d\064\uff4d\065\uff4d\066" +
    "\uff4d\067\uff4d\070\uff4d\071\uff4d\072\uff4d\073\uff4d\074\uff4d" +
    "\075\uff4d\076\uff4d\077\uff4d\100\uff4d\101\uff4d\102\uff4d\103" +
    "\uff4d\104\uff4d\105\uff4d\106\uff4d\107\uff4d\110\uff4d\111\uff4d" +
    "\112\uff4d\113\uff4d\114\uff4d\115\uff4d\126\uff4d\127\uff4d\130" +
    "\uff4d\131\uff4d\132\uff4d\001\002\000\006\071\uff4c\072\uff4c" +
    "\001\002\000\004\076\256\001\002\000\004\127\261\001" +
    "\002\000\006\127\uff70\130\257\001\002\000\004\076\256" +
    "\001\002\000\004\127\uff71\001\002\000\162\010\uff8a\015" +
    "\uff8a\017\uff8a\020\uff8a\031\uff8a\032\uff8a\036\uff8a\037\uff8a" +
    "\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063" +
    "\uff8a\064\uff8a\065\uff8a\066\uff8a\070\uff8a\073\uff8a\074\uff8a" +
    "\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103" +
    "\uff8a\104\uff8a\105\uff8a\106\uff8a\107\uff8a\110\uff8a\111\uff8a" +
    "\112\uff8a\113\uff8a\114\uff8a\115\uff8a\126\uff8a\127\uff8a\130" +
    "\uff8a\131\uff8a\132\uff8a\001\002\000\004\076\263\001\002" +
    "\000\004\130\266\001\002\000\004\127\265\001\002\000" +
    "\162\010\uff8c\015\uff8c\017\uff8c\020\uff8c\031\uff8c\032\uff8c" +
    "\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044" +
    "\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c" +
    "\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061" +
    "\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\070\uff8c" +
    "\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\101" +
    "\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c\107\uff8c" +
    "\110\uff8c\111\uff8c\112\uff8c\113\uff8c\114\uff8c\115\uff8c\126" +
    "\uff8c\127\uff8c\130\uff8c\131\uff8c\132\uff8c\001\002\000\004" +
    "\074\267\001\002\000\004\130\270\001\002\000\004\076" +
    "\271\001\002\000\004\127\uff69\001\002\000\102\031\ufef2" +
    "\036\ufef2\037\ufef2\040\ufef2\041\ufef2\042\ufef2\043\ufef2\044" +
    "\ufef2\045\ufef2\046\ufef2\047\ufef2\050\ufef2\051\ufef2\052\ufef2" +
    "\053\ufef2\054\ufef2\055\ufef2\056\ufef2\057\ufef2\060\ufef2\061" +
    "\ufef2\062\ufef2\063\ufef2\064\ufef2\065\ufef2\066\ufef2\073\ufef2" +
    "\074\ufef2\075\ufef2\076\ufef2\100\ufef2\126\ufef2\001\002\000" +
    "\102\031\063\036\032\037\131\040\064\041\120\042\076" +
    "\043\126\044\121\045\135\046\125\047\123\050\055\051" +
    "\151\052\124\053\143\054\100\055\152\056\102\057\132" +
    "\060\106\061\065\062\140\063\107\064\067\065\156\066" +
    "\147\073\052\074\071\075\053\076\033\100\110\126\075" +
    "\001\002\000\102\031\ufef3\036\ufef3\037\ufef3\040\ufef3\041" +
    "\ufef3\042\ufef3\043\ufef3\044\ufef3\045\ufef3\046\ufef3\047\ufef3" +
    "\050\ufef3\051\ufef3\052\ufef3\053\ufef3\054\ufef3\055\ufef3\056" +
    "\ufef3\057\ufef3\060\ufef3\061\ufef3\062\ufef3\063\ufef3\064\ufef3" +
    "\065\ufef3\066\ufef3\073\ufef3\074\ufef3\075\ufef3\076\ufef3\100" +
    "\ufef3\126\ufef3\001\002\000\012\015\uff13\070\uff13\127\uff13" +
    "\132\uff13\001\002\000\004\074\277\001\002\000\004\130" +
    "\300\001\002\000\014\035\301\036\305\073\037\076\033" +
    "\100\031\001\002\000\012\036\314\073\037\076\033\100" +
    "\031\001\002\000\006\127\uff78\130\uff78\001\002\000\004" +
    "\127\310\001\002\000\006\127\uff74\130\306\001\002\000" +
    "\006\127\uff79\130\uff79\001\002\000\014\035\301\036\305" +
    "\073\037\076\033\100\031\001\002\000\004\127\uff75\001" +
    "\002\000\004\032\311\001\002\000\010\073\203\077\200" +
    "\101\202\001\002\000\162\010\uff77\015\uff77\017\uff77\020" +
    "\uff77\031\uff77\032\uff77\036\uff77\037\uff77\040\uff77\041\uff77" +
    "\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050" +
    "\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77" +
    "\057\uff77\060\uff77\061\uff77\062\uff77\063\uff77\064\uff77\065" +
    "\uff77\066\uff77\070\uff77\073\uff77\074\uff77\075\uff77\076\uff77" +
    "\077\uff77\100\uff77\101\uff77\102\uff77\103\uff77\104\uff77\105" +
    "\uff77\106\uff77\107\uff77\110\uff77\111\uff77\112\uff77\113\uff77" +
    "\114\uff77\115\uff77\126\uff77\127\uff77\130\uff77\131\uff77\132" +
    "\uff77\001\002\000\006\127\uff7b\130\uff7b\001\002\000\006" +
    "\127\uff7a\130\uff7a\001\002\000\016\035\301\036\305\073" +
    "\037\076\033\100\031\131\317\001\002\000\004\127\321" +
    "\001\002\000\004\127\320\001\002\000\162\010\uff84\015" +
    "\uff84\017\uff84\020\uff84\031\uff84\032\uff84\036\uff84\037\uff84" +
    "\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046" +
    "\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84" +
    "\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063" +
    "\uff84\064\uff84\065\uff84\066\uff84\070\uff84\073\uff84\074\uff84" +
    "\075\uff84\076\uff84\077\uff84\100\uff84\101\uff84\102\uff84\103" +
    "\uff84\104\uff84\105\uff84\106\uff84\107\uff84\110\uff84\111\uff84" +
    "\112\uff84\113\uff84\114\uff84\115\uff84\126\uff84\127\uff84\130" +
    "\uff84\131\uff84\132\uff84\001\002\000\162\010\uff85\015\uff85" +
    "\017\uff85\020\uff85\031\uff85\032\uff85\036\uff85\037\uff85\040" +
    "\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055" +
    "\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85" +
    "\064\uff85\065\uff85\066\uff85\070\uff85\073\uff85\074\uff85\075" +
    "\uff85\076\uff85\077\uff85\100\uff85\101\uff85\102\uff85\103\uff85" +
    "\104\uff85\105\uff85\106\uff85\107\uff85\110\uff85\111\uff85\112" +
    "\uff85\113\uff85\114\uff85\115\uff85\126\uff85\127\uff85\130\uff85" +
    "\131\uff85\132\uff85\001\002\000\016\035\323\036\326\073" +
    "\037\076\033\100\031\131\327\001\002\000\012\036\333" +
    "\073\037\076\033\100\031\001\002\000\004\127\uff62\001" +
    "\002\000\004\127\331\001\002\000\004\127\uff63\001\002" +
    "\000\004\127\330\001\002\000\162\010\uff7c\015\uff7c\017" +
    "\uff7c\020\uff7c\031\uff7c\032\uff7c\036\uff7c\037\uff7c\040\uff7c" +
    "\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047" +
    "\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c" +
    "\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064" +
    "\uff7c\065\uff7c\066\uff7c\070\uff7c\073\uff7c\074\uff7c\075\uff7c" +
    "\076\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c\104" +
    "\uff7c\105\uff7c\106\uff7c\107\uff7c\110\uff7c\111\uff7c\112\uff7c" +
    "\113\uff7c\114\uff7c\115\uff7c\126\uff7c\127\uff7c\130\uff7c\131" +
    "\uff7c\132\uff7c\001\002\000\162\010\uff7d\015\uff7d\017\uff7d" +
    "\020\uff7d\031\uff7d\032\uff7d\036\uff7d\037\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d" +
    "\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056" +
    "\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d" +
    "\065\uff7d\066\uff7d\070\uff7d\073\uff7d\074\uff7d\075\uff7d\076" +
    "\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104\uff7d" +
    "\105\uff7d\106\uff7d\107\uff7d\110\uff7d\111\uff7d\112\uff7d\113" +
    "\uff7d\114\uff7d\115\uff7d\126\uff7d\127\uff7d\130\uff7d\131\uff7d" +
    "\132\uff7d\001\002\000\004\127\uff65\001\002\000\004\127" +
    "\uff64\001\002\000\012\036\032\073\037\076\033\100\031" +
    "\001\002\000\004\127\uff66\001\002\000\004\127\337\001" +
    "\002\000\004\032\340\001\002\000\004\076\341\001\002" +
    "\000\162\010\uff8b\015\uff8b\017\uff8b\020\uff8b\031\uff8b\032" +
    "\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b" +
    "\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\070" +
    "\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b" +
    "\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b\107" +
    "\uff8b\110\uff8b\111\uff8b\112\uff8b\113\uff8b\114\uff8b\115\uff8b" +
    "\126\uff8b\127\uff8b\130\uff8b\131\uff8b\132\uff8b\001\002\000" +
    "\014\035\301\036\305\073\037\076\033\100\031\001\002" +
    "\000\004\130\344\001\002\000\004\076\345\001\002\000" +
    "\004\127\346\001\002\000\162\010\uff81\015\uff81\017\uff81" +
    "\020\uff81\031\uff81\032\uff81\036\uff81\037\uff81\040\uff81\041" +
    "\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81" +
    "\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056" +
    "\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81" +
    "\065\uff81\066\uff81\070\uff81\073\uff81\074\uff81\075\uff81\076" +
    "\uff81\077\uff81\100\uff81\101\uff81\102\uff81\103\uff81\104\uff81" +
    "\105\uff81\106\uff81\107\uff81\110\uff81\111\uff81\112\uff81\113" +
    "\uff81\114\uff81\115\uff81\126\uff81\127\uff81\130\uff81\131\uff81" +
    "\132\uff81\001\002\000\004\076\351\001\002\000\004\127" +
    "\354\001\002\000\006\127\uff72\130\352\001\002\000\004" +
    "\076\351\001\002\000\004\127\uff73\001\002\000\004\032" +
    "\355\001\002\000\004\076\356\001\002\000\162\010\uff8e" +
    "\015\uff8e\017\uff8e\020\uff8e\031\uff8e\032\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e" +
    "\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054" +
    "\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e" +
    "\063\uff8e\064\uff8e\065\uff8e\066\uff8e\070\uff8e\073\uff8e\074" +
    "\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\101\uff8e\102\uff8e" +
    "\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107\uff8e\110\uff8e\111" +
    "\uff8e\112\uff8e\113\uff8e\114\uff8e\115\uff8e\126\uff8e\127\uff8e" +
    "\130\uff8e\131\uff8e\132\uff8e\001\002\000\102\031\ufef5\036" +
    "\ufef5\037\ufef5\040\ufef5\041\ufef5\042\ufef5\043\ufef5\044\ufef5" +
    "\045\ufef5\046\ufef5\047\ufef5\050\ufef5\051\ufef5\052\ufef5\053" +
    "\ufef5\054\ufef5\055\ufef5\056\ufef5\057\ufef5\060\ufef5\061\ufef5" +
    "\062\ufef5\063\ufef5\064\ufef5\065\ufef5\066\ufef5\073\ufef5\074" +
    "\ufef5\075\ufef5\076\ufef5\100\ufef5\126\ufef5\001\002\000\102" +
    "\031\ufef6\036\ufef6\037\ufef6\040\ufef6\041\ufef6\042\ufef6\043" +
    "\ufef6\044\ufef6\045\ufef6\046\ufef6\047\ufef6\050\ufef6\051\ufef6" +
    "\052\ufef6\053\ufef6\054\ufef6\055\ufef6\056\ufef6\057\ufef6\060" +
    "\ufef6\061\ufef6\062\ufef6\063\ufef6\064\ufef6\065\ufef6\066\ufef6" +
    "\073\ufef6\074\ufef6\075\ufef6\076\ufef6\100\ufef6\126\ufef6\001" +
    "\002\000\102\031\063\036\032\037\131\040\064\041\120" +
    "\042\076\043\126\044\121\045\135\046\125\047\123\050" +
    "\055\051\151\052\124\053\143\054\100\055\152\056\102" +
    "\057\132\060\106\061\065\062\140\063\107\064\067\065" +
    "\156\066\147\073\037\074\071\075\053\076\033\100\031" +
    "\126\075\001\002\000\102\031\ufef7\036\ufef7\037\ufef7\040" +
    "\ufef7\041\ufef7\042\ufef7\043\ufef7\044\ufef7\045\ufef7\046\ufef7" +
    "\047\ufef7\050\ufef7\051\ufef7\052\ufef7\053\ufef7\054\ufef7\055" +
    "\ufef7\056\ufef7\057\ufef7\060\ufef7\061\ufef7\062\ufef7\063\ufef7" +
    "\064\ufef7\065\ufef7\066\ufef7\073\ufef7\074\ufef7\075\ufef7\076" +
    "\ufef7\100\ufef7\126\ufef7\001\002\000\102\031\ufef4\036\ufef4" +
    "\037\ufef4\040\ufef4\041\ufef4\042\ufef4\043\ufef4\044\ufef4\045" +
    "\ufef4\046\ufef4\047\ufef4\050\ufef4\051\ufef4\052\ufef4\053\ufef4" +
    "\054\ufef4\055\ufef4\056\ufef4\057\ufef4\060\ufef4\061\ufef4\062" +
    "\ufef4\063\ufef4\064\ufef4\065\ufef4\066\ufef4\073\ufef4\074\ufef4" +
    "\075\ufef4\076\ufef4\100\ufef4\126\ufef4\001\002\000\102\031" +
    "\ufef8\036\ufef8\037\ufef8\040\ufef8\041\ufef8\042\ufef8\043\ufef8" +
    "\044\ufef8\045\ufef8\046\ufef8\047\ufef8\050\ufef8\051\ufef8\052" +
    "\ufef8\053\ufef8\054\ufef8\055\ufef8\056\ufef8\057\ufef8\060\ufef8" +
    "\061\ufef8\062\ufef8\063\ufef8\064\ufef8\065\ufef8\066\ufef8\073" +
    "\ufef8\074\ufef8\075\ufef8\076\ufef8\100\ufef8\126\ufef8\001\002" +
    "\000\102\031\ufef9\036\ufef9\037\ufef9\040\ufef9\041\ufef9\042" +
    "\ufef9\043\ufef9\044\ufef9\045\ufef9\046\ufef9\047\ufef9\050\ufef9" +
    "\051\ufef9\052\ufef9\053\ufef9\054\ufef9\055\ufef9\056\ufef9\057" +
    "\ufef9\060\ufef9\061\ufef9\062\ufef9\063\ufef9\064\ufef9\065\ufef9" +
    "\066\ufef9\073\ufef9\074\ufef9\075\ufef9\076\ufef9\100\ufef9\126" +
    "\ufef9\001\002\000\102\031\ufefa\036\ufefa\037\ufefa\040\ufefa" +
    "\041\ufefa\042\ufefa\043\ufefa\044\ufefa\045\ufefa\046\ufefa\047" +
    "\ufefa\050\ufefa\051\ufefa\052\ufefa\053\ufefa\054\ufefa\055\ufefa" +
    "\056\ufefa\057\ufefa\060\ufefa\061\ufefa\062\ufefa\063\ufefa\064" +
    "\ufefa\065\ufefa\066\ufefa\073\ufefa\074\ufefa\075\ufefa\076\ufefa" +
    "\100\ufefa\126\ufefa\001\002\000\016\015\uff11\070\uff11\114" +
    "\uff11\115\uff11\127\uff11\132\uff11\001\002\000\004\076\371" +
    "\001\002\000\004\130\374\001\002\000\004\127\373\001" +
    "\002\000\162\010\uff8d\015\uff8d\017\uff8d\020\uff8d\031\uff8d" +
    "\032\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043" +
    "\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d" +
    "\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060" +
    "\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d" +
    "\070\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\100" +
    "\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d" +
    "\107\uff8d\110\uff8d\111\uff8d\112\uff8d\113\uff8d\114\uff8d\115" +
    "\uff8d\126\uff8d\127\uff8d\130\uff8d\131\uff8d\132\uff8d\001\002" +
    "\000\004\074\375\001\002\000\004\130\376\001\002\000" +
    "\004\076\377\001\002\000\004\127\uff6a\001\002\000\014" +
    "\035\301\036\305\073\037\076\033\100\031\001\002\000" +
    "\004\127\u0102\001\002\000\162\010\uff7f\015\uff7f\017\uff7f" +
    "\020\uff7f\031\uff7f\032\uff7f\036\uff7f\037\uff7f\040\uff7f\041" +
    "\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f" +
    "\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056" +
    "\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f" +
    "\065\uff7f\066\uff7f\070\uff7f\073\uff7f\074\uff7f\075\uff7f\076" +
    "\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f\104\uff7f" +
    "\105\uff7f\106\uff7f\107\uff7f\110\uff7f\111\uff7f\112\uff7f\113" +
    "\uff7f\114\uff7f\115\uff7f\126\uff7f\127\uff7f\130\uff7f\131\uff7f" +
    "\132\uff7f\001\002\000\004\076\u0104\001\002\000\004\130" +
    "\u0105\001\002\000\004\076\u0106\001\002\000\004\127\u0107" +
    "\001\002\000\162\010\uff93\015\uff93\017\uff93\020\uff93\031" +
    "\uff93\032\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93" +
    "\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066" +
    "\uff93\070\uff93\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93" +
    "\100\uff93\101\uff93\102\uff93\103\uff93\104\uff93\105\uff93\106" +
    "\uff93\107\uff93\110\uff93\111\uff93\112\uff93\113\uff93\114\uff93" +
    "\115\uff93\126\uff93\127\uff93\130\uff93\131\uff93\132\uff93\001" +
    "\002\000\004\074\u0109\001\002\000\020\102\u0111\103\u0110" +
    "\104\u010f\105\u010d\106\u010b\107\u010a\110\u010e\001\002\000" +
    "\004\074\uff5c\001\002\000\004\074\uff5d\001\002\000\004" +
    "\074\u0112\001\002\000\004\074\uff5e\001\002\000\004\074" +
    "\uff5b\001\002\000\004\074\uff5f\001\002\000\004\074\uff60" +
    "\001\002\000\004\074\uff61\001\002\000\004\130\u0113\001" +
    "\002\000\014\035\301\036\305\073\037\076\033\100\031" +
    "\001\002\000\004\130\u0115\001\002\000\014\035\301\036" +
    "\305\073\037\076\033\100\031\001\002\000\004\127\u0117" +
    "\001\002\000\004\032\u0118\001\002\000\010\073\203\077" +
    "\200\101\202\001\002\000\162\010\uff76\015\uff76\017\uff76" +
    "\020\uff76\031\uff76\032\uff76\036\uff76\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76" +
    "\050\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055\uff76\056" +
    "\uff76\057\uff76\060\uff76\061\uff76\062\uff76\063\uff76\064\uff76" +
    "\065\uff76\066\uff76\070\uff76\073\uff76\074\uff76\075\uff76\076" +
    "\uff76\077\uff76\100\uff76\101\uff76\102\uff76\103\uff76\104\uff76" +
    "\105\uff76\106\uff76\107\uff76\110\uff76\111\uff76\112\uff76\113" +
    "\uff76\114\uff76\115\uff76\126\uff76\127\uff76\130\uff76\131\uff76" +
    "\132\uff76\001\002\000\162\010\uff94\015\uff94\017\uff94\020" +
    "\uff94\031\uff94\032\uff94\036\uff94\037\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050" +
    "\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065" +
    "\uff94\066\uff94\070\uff94\073\uff94\074\uff94\075\uff94\076\uff94" +
    "\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94\104\uff94\105" +
    "\uff94\106\uff94\107\uff94\110\uff94\111\uff94\112\uff94\113\uff94" +
    "\114\uff94\115\uff94\126\uff94\127\uff94\130\uff94\131\uff94\132" +
    "\uff94\001\002\000\022\036\032\066\147\073\037\074\071" +
    "\075\053\076\033\100\031\126\223\001\002\000\004\130" +
    "\u011e\001\002\000\016\111\163\112\162\113\164\127\uffd1" +
    "\130\uffd1\131\170\001\002\000\022\036\032\066\147\073" +
    "\037\074\071\075\053\076\033\100\031\126\223\001\002" +
    "\000\004\130\u0120\001\002\000\022\036\032\066\147\073" +
    "\037\074\071\075\053\076\033\100\031\126\223\001\002" +
    "\000\004\127\u0122\001\002\000\162\010\uffd2\015\uffd2\017" +
    "\uffd2\020\uffd2\031\uffd2\032\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2" +
    "\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064" +
    "\uffd2\065\uffd2\066\uffd2\070\uffd2\073\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104" +
    "\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2" +
    "\113\uffd2\114\uffd2\115\uffd2\126\uffd2\127\uffd2\130\uffd2\131" +
    "\uffd2\132\uffd2\001\002\000\012\073\203\076\u0126\077\200" +
    "\101\202\001\002\000\004\127\u0127\001\002\000\004\127" +
    "\uff6b\001\002\000\004\127\uff6c\001\002\000\162\010\uff88" +
    "\015\uff88\017\uff88\020\uff88\031\uff88\032\uff88\036\uff88\037" +
    "\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88" +
    "\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054" +
    "\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88" +
    "\063\uff88\064\uff88\065\uff88\066\uff88\070\uff88\073\uff88\074" +
    "\uff88\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88\102\uff88" +
    "\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88\110\uff88\111" +
    "\uff88\112\uff88\113\uff88\114\uff88\115\uff88\126\uff88\127\uff88" +
    "\130\uff88\131\uff88\132\uff88\001\002\000\004\076\u012a\001" +
    "\002\000\004\127\u012b\001\002\000\004\127\uff6f\001\002" +
    "\000\004\032\u012c\001\002\000\010\073\203\077\200\101" +
    "\202\001\002\000\162\010\uff89\015\uff89\017\uff89\020\uff89" +
    "\031\uff89\032\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89" +
    "\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057" +
    "\uff89\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89" +
    "\066\uff89\070\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077" +
    "\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89" +
    "\106\uff89\107\uff89\110\uff89\111\uff89\112\uff89\113\uff89\114" +
    "\uff89\115\uff89\126\uff89\127\uff89\130\uff89\131\uff89\132\uff89" +
    "\001\002\000\006\013\u012f\036\u0130\001\002\000\004\036" +
    "\u0131\001\002\000\016\015\uff0f\070\uff0f\114\uff0f\115\uff0f" +
    "\127\uff0f\132\uff0f\001\002\000\016\015\uff0e\070\uff0e\114" +
    "\uff0e\115\uff0e\127\uff0e\132\uff0e\001\002\000\014\035\301" +
    "\036\305\073\037\076\033\100\031\001\002\000\004\127" +
    "\u0134\001\002\000\162\010\uff7e\015\uff7e\017\uff7e\020\uff7e" +
    "\031\uff7e\032\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042" +
    "\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e" +
    "\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057" +
    "\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e" +
    "\066\uff7e\070\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e\077" +
    "\uff7e\100\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e" +
    "\106\uff7e\107\uff7e\110\uff7e\111\uff7e\112\uff7e\113\uff7e\114" +
    "\uff7e\115\uff7e\126\uff7e\127\uff7e\130\uff7e\131\uff7e\132\uff7e" +
    "\001\002\000\014\111\163\112\162\113\164\127\u0136\131" +
    "\170\001\002\000\162\010\uffc0\015\uffc0\017\uffc0\020\uffc0" +
    "\031\uffc0\032\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\070\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077" +
    "\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0" +
    "\106\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0\113\uffc0\114" +
    "\uffc0\115\uffc0\126\uffc0\127\uffc0\130\uffc0\131\uffc0\132\uffc0" +
    "\001\002\000\004\076\u0138\001\002\000\004\130\u0139\001" +
    "\002\000\004\076\u013a\001\002\000\004\130\u013b\001\002" +
    "\000\004\076\u013c\001\002\000\004\127\u013d\001\002\000" +
    "\162\010\uff92\015\uff92\017\uff92\020\uff92\031\uff92\032\uff92" +
    "\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\070\uff92" +
    "\073\uff92\074\uff92\075\uff92\076\uff92\077\uff92\100\uff92\101" +
    "\uff92\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92" +
    "\110\uff92\111\uff92\112\uff92\113\uff92\114\uff92\115\uff92\126" +
    "\uff92\127\uff92\130\uff92\131\uff92\132\uff92\001\002\000\010" +
    "\073\037\076\033\100\031\001\002\000\004\130\u0142\001" +
    "\002\000\004\127\u0141\001\002\000\162\010\uff86\015\uff86" +
    "\017\uff86\020\uff86\031\uff86\032\uff86\036\uff86\037\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86" +
    "\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055" +
    "\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063\uff86" +
    "\064\uff86\065\uff86\066\uff86\070\uff86\073\uff86\074\uff86\075" +
    "\uff86\076\uff86\077\uff86\100\uff86\101\uff86\102\uff86\103\uff86" +
    "\104\uff86\105\uff86\106\uff86\107\uff86\110\uff86\111\uff86\112" +
    "\uff86\113\uff86\114\uff86\115\uff86\126\uff86\127\uff86\130\uff86" +
    "\131\uff86\132\uff86\001\002\000\006\074\u0143\076\u0144\001" +
    "\002\000\004\127\uff5a\001\002\000\004\127\uff59\001\002" +
    "\000\014\035\301\036\305\073\037\076\033\100\031\001" +
    "\002\000\004\127\u0147\001\002\000\162\010\uff80\015\uff80" +
    "\017\uff80\020\uff80\031\uff80\032\uff80\036\uff80\037\uff80\040" +
    "\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80" +
    "\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055" +
    "\uff80\056\uff80\057\uff80\060\uff80\061\uff80\062\uff80\063\uff80" +
    "\064\uff80\065\uff80\066\uff80\070\uff80\073\uff80\074\uff80\075" +
    "\uff80\076\uff80\077\uff80\100\uff80\101\uff80\102\uff80\103\uff80" +
    "\104\uff80\105\uff80\106\uff80\107\uff80\110\uff80\111\uff80\112" +
    "\uff80\113\uff80\114\uff80\115\uff80\126\uff80\127\uff80\130\uff80" +
    "\131\uff80\132\uff80\001\002\000\004\127\u0149\001\002\000" +
    "\162\010\uff68\015\uff68\017\uff68\020\uff68\031\uff68\032\uff68" +
    "\036\uff68\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044" +
    "\uff68\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052\uff68" +
    "\053\uff68\054\uff68\055\uff68\056\uff68\057\uff68\060\uff68\061" +
    "\uff68\062\uff68\063\uff68\064\uff68\065\uff68\066\uff68\070\uff68" +
    "\073\uff68\074\uff68\075\uff68\076\uff68\077\uff68\100\uff68\101" +
    "\uff68\102\uff68\103\uff68\104\uff68\105\uff68\106\uff68\107\uff68" +
    "\110\uff68\111\163\112\162\113\164\114\uff68\115\uff68\126" +
    "\uff68\127\uff68\130\uff68\131\170\132\uff68\001\002\000\004" +
    "\074\u014b\001\002\000\162\010\uff67\015\uff67\017\uff67\020" +
    "\uff67\031\uff67\032\uff67\036\uff67\037\uff67\040\uff67\041\uff67" +
    "\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050" +
    "\uff67\051\uff67\052\uff67\053\uff67\054\uff67\055\uff67\056\uff67" +
    "\057\uff67\060\uff67\061\uff67\062\uff67\063\uff67\064\uff67\065" +
    "\uff67\066\uff67\070\uff67\073\uff67\074\uff67\075\uff67\076\uff67" +
    "\077\uff67\100\uff67\101\uff67\102\uff67\103\uff67\104\uff67\105" +
    "\uff67\106\uff67\107\uff67\110\uff67\111\uff67\112\uff67\113\uff67" +
    "\114\uff67\115\uff67\126\uff67\127\uff67\130\uff67\131\uff67\132" +
    "\uff67\001\002\000\004\126\u014d\001\002\000\020\004\017" +
    "\036\u0153\073\u015a\074\u014f\075\u0159\076\u0157\100\u0152\001" +
    "\002\000\016\015\uff10\070\uff10\114\uff10\115\uff10\127\uff10" +
    "\132\uff10\001\002\000\036\011\ufeff\015\ufeff\021\ufeff\022" +
    "\ufeff\023\ufeff\024\ufeff\026\ufeff\027\ufeff\102\ufeff\114\ufeff" +
    "\115\ufeff\127\ufeff\130\ufeff\132\ufeff\001\002\000\004\127" +
    "\u0195\001\002\000\012\036\032\073\037\076\033\100\031" +
    "\001\002\000\036\011\ufefc\015\ufefc\021\ufefc\022\ufefc\023" +
    "\ufefc\024\ufefc\026\ufefc\027\ufefc\102\ufefc\114\ufefc\115\ufefc" +
    "\127\ufefc\130\ufefc\132\ufefc\001\002\000\036\011\ufefb\015" +
    "\ufefb\021\ufefb\022\ufefb\023\ufefb\024\ufefb\026\ufefb\027\ufefb" +
    "\102\ufefb\114\ufefb\115\ufefb\127\ufefb\130\ufefb\132\ufefb\001" +
    "\002\000\006\127\uff03\130\u0192\001\002\000\004\127\uff0b" +
    "\001\002\000\004\127\uff0a\001\002\000\036\011\ufefd\015" +
    "\ufefd\021\ufefd\022\ufefd\023\ufefd\024\ufefd\026\ufefd\027\ufefd" +
    "\102\ufefd\114\ufefd\115\ufefd\127\ufefd\130\ufefd\132\ufefd\001" +
    "\002\000\004\010\u015b\001\002\000\036\011\ufefe\015\ufefe" +
    "\021\ufefe\022\ufefe\023\ufefe\024\ufefe\026\ufefe\027\ufefe\102" +
    "\ufefe\114\ufefe\115\ufefe\127\ufefe\130\ufefe\132\ufefe\001\002" +
    "\000\036\011\uff00\015\uff00\021\uff00\022\uff00\023\uff00\024" +
    "\uff00\026\uff00\027\uff00\102\uff00\114\uff00\115\uff00\127\uff00" +
    "\130\uff00\132\uff00\001\002\000\004\073\uff1b\001\002\000" +
    "\004\073\u016c\001\002\000\022\011\045\021\u0167\022\u0160" +
    "\023\u0163\024\u0161\026\u0165\027\u015e\127\uff09\001\002\000" +
    "\004\073\u016c\001\002\000\004\073\u016c\001\002\000\006" +
    "\025\u0178\027\u0177\001\002\000\004\025\u0175\001\002\000" +
    "\026\011\uffef\015\uffef\021\u0167\022\u0160\023\u0163\024\u0161" +
    "\026\u0165\027\u015e\127\uffef\132\uffef\001\002\000\006\025" +
    "\u0172\027\u0171\001\002\000\004\127\uff08\001\002\000\004" +
    "\027\u0170\001\002\000\006\011\045\127\uff07\001\002\000" +
    "\004\027\u0168\001\002\000\004\073\u016c\001\002\000\026" +
    "\011\uffee\015\uffee\021\uffee\022\uffee\023\uffee\024\uffee\026" +
    "\uffee\027\uffee\127\uffee\132\uffee\001\002\000\040\003\uff1a" +
    "\006\uff1a\011\uff1a\015\uff1a\021\uff1a\022\uff1a\023\uff1a\024" +
    "\uff1a\026\uff1a\027\uff1a\030\uff1a\033\uff1a\127\uff1a\130\uff1a" +
    "\132\uff1a\001\002\000\040\003\uff19\006\uff19\011\uff19\015" +
    "\uff19\021\uff19\022\uff19\023\uff19\024\uff19\026\uff19\027\uff19" +
    "\030\uff19\033\uff19\127\uff19\130\uff19\132\uff19\001\002\000" +
    "\044\003\uff18\006\uff18\011\uff18\015\uff18\021\uff18\022\uff18" +
    "\023\uff18\024\uff18\026\uff18\027\uff18\030\uff18\033\uff18\073" +
    "\u016e\077\u016d\127\uff18\130\uff18\132\uff18\001\002\000\040" +
    "\003\uff16\006\uff16\011\uff16\015\uff16\021\uff16\022\uff16\023" +
    "\uff16\024\uff16\026\uff16\027\uff16\030\uff16\033\uff16\127\uff16" +
    "\130\uff16\132\uff16\001\002\000\040\003\uff17\006\uff17\011" +
    "\uff17\015\uff17\021\uff17\022\uff17\023\uff17\024\uff17\026\uff17" +
    "\027\uff17\030\uff17\033\uff17\127\uff17\130\uff17\132\uff17\001" +
    "\002\000\004\127\uff06\001\002\000\004\073\uffe6\001\002" +
    "\000\004\073\uffe4\001\002\000\004\027\u0173\001\002\000" +
    "\004\073\uffe2\001\002\000\012\011\ufff0\015\ufff0\127\ufff0" +
    "\132\ufff0\001\002\000\004\027\u0176\001\002\000\004\073" +
    "\uffe1\001\002\000\004\073\uffe5\001\002\000\004\027\u0179" +
    "\001\002\000\004\073\uffe3\001\002\000\004\033\u017c\001" +
    "\002\000\026\011\uffea\015\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\026\uffea\027\uffea\127\uffea\132\uffea\001\002\000" +
    "\016\036\u0153\073\u015a\074\u014f\075\u0159\076\u0157\100\u0152" +
    "\001\002\000\026\011\uffe0\015\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\026\uffe0\027\uffe0\127\uffe0\132\uffe0\001\002" +
    "\000\032\011\uffde\015\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\026\uffde\027\uffde\114\274\115\272\127\uffde\132\uffde" +
    "\001\002\000\004\102\u0180\001\002\000\016\036\u0153\073" +
    "\u015a\074\u014f\075\u0159\076\u0157\100\u0152\001\002\000\032" +
    "\011\uffdd\015\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\026" +
    "\uffdd\027\uffdd\114\uffdd\115\uffdd\127\uffdd\132\uffdd\001\002" +
    "\000\016\036\u0153\073\u015a\074\u014f\075\u0159\076\u0157\100" +
    "\u0152\001\002\000\026\011\uffdf\015\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\026\uffdf\027\uffdf\127\uffdf\132\uffdf\001" +
    "\002\000\032\011\uffed\015\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\026\uffed\027\uffed\030\u0186\033\u017c\127\uffed\132" +
    "\uffed\001\002\000\026\011\uffeb\015\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\026\uffeb\027\uffeb\127\uffeb\132\uffeb\001" +
    "\002\000\004\126\u0188\001\002\000\026\011\uffec\015\uffec" +
    "\021\uffec\022\uffec\023\uffec\024\uffec\026\uffec\027\uffec\127" +
    "\uffec\132\uffec\001\002\000\010\073\037\076\033\100\031" +
    "\001\002\000\006\127\uffe7\130\u018c\001\002\000\004\127" +
    "\u018b\001\002\000\026\011\uffe9\015\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\026\uffe9\027\uffe9\127\uffe9\132\uffe9\001" +
    "\002\000\010\073\037\076\033\100\031\001\002\000\004" +
    "\127\uffe8\001\002\000\030\011\uff1c\015\uff1c\021\uff1c\022" +
    "\uff1c\023\uff1c\024\uff1c\026\uff1c\027\uff1c\127\uff1c\130\u0190" +
    "\132\uff1c\001\002\000\026\011\uff1e\015\uff1e\021\uff1e\022" +
    "\uff1e\023\uff1e\024\uff1e\026\uff1e\027\uff1e\127\uff1e\132\uff1e" +
    "\001\002\000\004\073\u016c\001\002\000\026\011\uff1d\015" +
    "\uff1d\021\uff1d\022\uff1d\023\uff1d\024\uff1d\026\uff1d\027\uff1d" +
    "\127\uff1d\132\uff1d\001\002\000\016\036\u0153\073\u015a\074" +
    "\u014f\075\u0159\076\u0157\100\u0152\001\002\000\004\127\uff04" +
    "\001\002\000\004\010\uff05\001\002\000\016\015\uff0c\070" +
    "\uff0c\114\uff0c\115\uff0c\127\uff0c\132\uff0c\001\002\000\004" +
    "\076\u0197\001\002\000\004\127\u0198\001\002\000\162\010" +
    "\uff83\015\uff83\017\uff83\020\uff83\031\uff83\032\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83" +
    "\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062" +
    "\uff83\063\uff83\064\uff83\065\uff83\066\uff83\070\uff83\073\uff83" +
    "\074\uff83\075\uff83\076\uff83\077\uff83\100\uff83\101\uff83\102" +
    "\uff83\103\uff83\104\uff83\105\uff83\106\uff83\107\uff83\110\uff83" +
    "\111\uff83\112\uff83\113\uff83\114\uff83\115\uff83\126\uff83\127" +
    "\uff83\130\uff83\131\uff83\132\uff83\001\002\000\016\002\uff43" +
    "\003\uff43\004\uff43\005\uff43\007\uff43\014\uff43\001\002\000" +
    "\016\002\uff45\003\uff45\004\uff45\005\uff45\007\uff45\014\uff45" +
    "\001\002\000\022\036\uff25\066\uff25\073\uff25\074\uff25\075" +
    "\uff25\076\uff25\100\uff25\126\uff25\001\002\000\022\036\uff26" +
    "\066\uff26\073\uff26\074\uff26\075\uff26\076\uff26\100\uff26\126" +
    "\uff26\001\002\000\022\036\uff2a\066\uff2a\073\uff2a\074\uff2a" +
    "\075\uff2a\076\uff2a\100\uff2a\126\uff2a\001\002\000\022\036" +
    "\uff22\066\uff22\073\uff22\074\uff22\075\uff22\076\uff22\100\uff22" +
    "\126\uff22\001\002\000\022\036\uff24\066\uff24\073\uff24\074" +
    "\uff24\075\uff24\076\uff24\100\uff24\126\uff24\001\002\000\022" +
    "\036\uff28\066\uff28\073\uff28\074\uff28\075\uff28\076\uff28\100" +
    "\uff28\126\uff28\001\002\000\022\036\uff27\066\uff27\073\uff27" +
    "\074\uff27\075\uff27\076\uff27\100\uff27\126\uff27\001\002\000" +
    "\022\036\032\066\147\073\037\074\071\075\053\076\033" +
    "\100\031\126\223\001\002\000\022\036\uff29\066\uff29\073" +
    "\uff29\074\uff29\075\uff29\076\uff29\100\uff29\126\uff29\001\002" +
    "\000\022\036\uff23\066\uff23\073\uff23\074\uff23\075\uff23\076" +
    "\uff23\100\uff23\126\uff23\001\002\000\022\003\uff39\011\uff39" +
    "\111\163\112\162\113\164\130\uff39\131\170\132\uff39\001" +
    "\002\000\012\003\uff38\011\uff38\130\uff38\132\uff38\001\002" +
    "\000\006\003\uff3f\006\uff3f\001\002\000\016\002\uff41\003" +
    "\uff41\004\uff41\005\uff41\007\uff41\014\uff41\001\002\000\004" +
    "\004\uffdc\001\002\000\006\032\u01ac\126\u01ad\001\002\000" +
    "\004\004\uffdb\001\002\000\004\126\u01c2\001\002\000\102" +
    "\031\063\036\032\037\131\040\064\041\120\042\076\043" +
    "\126\044\121\045\135\046\125\047\123\050\055\051\151" +
    "\052\124\053\143\054\100\055\152\056\102\057\132\060" +
    "\106\061\065\062\140\063\107\064\067\065\156\066\147" +
    "\073\037\074\071\075\053\076\033\100\031\126\075\001" +
    "\002\000\004\032\u01af\001\002\000\004\126\u01b0\001\002" +
    "\000\004\004\017\001\002\000\004\010\u015b\001\002\000" +
    "\004\127\u01b3\001\002\000\006\004\uffd7\130\u01b4\001\002" +
    "\000\010\073\203\077\200\101\202\001\002\000\004\126" +
    "\u01ad\001\002\000\004\004\uffd8\001\002\000\116\010\uffc8" +
    "\017\uffc8\020\uffc8\031\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\100" +
    "\uffc8\126\uffc8\127\uffc8\130\u01c0\132\uffc8\001\002\000\134" +
    "\010\uffc3\017\uffc3\020\uffc3\031\uffc3\032\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\066\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\111\163\112\162" +
    "\113\164\126\uffc3\127\uffc3\130\uffc3\131\170\132\uffc3\001" +
    "\002\000\124\010\uffc4\017\uffc4\020\uffc4\031\uffc4\032\u01bc" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\073\203" +
    "\074\uffc4\075\uffc4\076\uffc4\077\200\100\uffc4\101\202\126" +
    "\uffc4\127\uffc4\130\uffc4\132\uffc4\001\002\000\004\127\u01bb" +
    "\001\002\000\004\032\uffd6\001\002\000\010\073\203\077" +
    "\200\101\202\001\002\000\116\010\uffc2\017\uffc2\020\uffc2" +
    "\031\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\073\uffc2\074\uffc2\075\uffc2\076\uffc2\100\uffc2\126\uffc2\127" +
    "\uffc2\130\uffc2\132\uffc2\001\002\000\116\010\uffc5\017\uffc5" +
    "\020\uffc5\031\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\100\uffc5\126" +
    "\uffc5\127\uffc5\130\uffc5\132\uffc5\001\002\000\116\010\uffc1" +
    "\017\uffc1\020\uffc1\031\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\100" +
    "\uffc1\126\uffc1\127\uffc1\130\uffc1\132\uffc1\001\002\000\102" +
    "\031\063\036\032\037\131\040\064\041\120\042\076\043" +
    "\126\044\121\045\135\046\125\047\123\050\055\051\151" +
    "\052\124\053\143\054\100\055\152\056\102\057\132\060" +
    "\106\061\065\062\140\063\107\064\067\065\156\066\147" +
    "\073\037\074\071\075\053\076\033\100\031\126\075\001" +
    "\002\000\114\010\uffc9\017\uffc9\020\uffc9\031\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\073\uffc9\074\uffc9" +
    "\075\uffc9\076\uffc9\100\uffc9\126\uffc9\127\uffc9\132\uffc9\001" +
    "\002\000\004\004\017\001\002\000\004\010\u015b\001\002" +
    "\000\004\127\u01c5\001\002\000\006\004\uffd9\130\u01c6\001" +
    "\002\000\010\073\203\077\200\101\202\001\002\000\004" +
    "\004\uffda\001\002\000\004\032\u01ac\001\002\000\016\002" +
    "\uff1f\003\uff1f\004\uff1f\005\uff1f\007\uff1f\014\uff1f\001\002" +
    "\000\004\073\u016c\001\002\000\006\011\045\132\043\001" +
    "\002\000\004\132\043\001\002\000\004\003\u01ce\001\002" +
    "\000\016\002\uff20\003\uff20\004\uff20\005\uff20\007\uff20\014" +
    "\uff20\001\002\000\016\002\uff21\003\uff21\004\uff21\005\uff21" +
    "\007\uff21\014\uff21\001\002\000\004\002\001\001\002\000" +
    "\016\002\000\003\000\004\000\005\000\007\000\014\000" +
    "\001\002\000\016\002\ufff1\003\ufff1\004\ufff1\005\ufff1\007" +
    "\ufff1\014\ufff1\001\002\000\024\011\045\015\u01d9\021\u0167" +
    "\022\u0160\023\u0163\024\u0161\026\u0165\027\u015e\132\043\001" +
    "\002\000\016\002\ufff9\003\ufff9\004\ufff9\005\ufff9\007\ufff9" +
    "\014\ufff9\001\002\000\004\016\u01e6\001\002\000\006\015" +
    "\u01d9\132\043\001\002\000\010\011\045\015\u01d9\132\043" +
    "\001\002\000\004\132\043\001\002\000\004\016\uffcd\001" +
    "\002\000\016\002\ufff5\003\ufff5\004\ufff5\005\ufff5\007\ufff5" +
    "\014\ufff5\001\002\000\006\015\u01d9\132\043\001\002\000" +
    "\004\132\043\001\002\000\016\002\ufff7\003\ufff7\004\ufff7" +
    "\005\ufff7\007\ufff7\014\ufff7\001\002\000\016\002\ufff3\003" +
    "\ufff3\004\ufff3\005\ufff3\007\ufff3\014\ufff3\001\002\000\016" +
    "\002\ufff6\003\ufff6\004\ufff6\005\ufff6\007\ufff6\014\ufff6\001" +
    "\002\000\004\132\043\001\002\000\016\002\ufff2\003\ufff2" +
    "\004\ufff2\005\ufff2\007\ufff2\014\ufff2\001\002\000\004\132" +
    "\043\001\002\000\016\002\ufff8\003\ufff8\004\ufff8\005\ufff8" +
    "\007\ufff8\014\ufff8\001\002\000\016\002\ufff4\003\ufff4\004" +
    "\ufff4\005\ufff4\007\ufff4\014\ufff4\001\002\000\102\031\063" +
    "\036\032\037\131\040\064\041\120\042\076\043\126\044" +
    "\121\045\135\046\125\047\123\050\055\051\151\052\124" +
    "\053\143\054\100\055\152\056\102\057\132\060\106\061" +
    "\065\062\140\063\107\064\067\065\156\066\147\073\037" +
    "\074\071\075\053\076\033\100\031\126\075\001\002\000" +
    "\102\031\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066" +
    "\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\100\uffcc\126\uffcc" +
    "\001\002\000\004\132\uffb3\001\002\000\004\132\uffb4\001" +
    "\002\000\110\017\u01ea\020\u01ef\031\063\036\032\037\131" +
    "\040\064\041\120\042\076\043\126\044\121\045\135\046" +
    "\125\047\123\050\055\051\151\052\124\053\143\054\100" +
    "\055\152\056\102\057\132\060\106\061\065\062\140\063" +
    "\107\064\067\065\156\066\147\073\037\074\071\075\053" +
    "\076\033\100\031\126\075\132\uffaf\001\002\000\106\031" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\073" +
    "\uffcb\074\uffcb\075\uffcb\076\uffcb\100\uffcb\126\uffcb\130\uffcb" +
    "\132\uffcb\001\002\000\106\031\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac" +
    "\064\uffac\065\uffac\066\uffac\073\uffac\074\uffac\075\uffac\076" +
    "\uffac\100\uffac\126\uffac\130\uffac\132\uffac\001\002\000\106" +
    "\031\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab" +
    "\073\uffab\074\uffab\075\uffab\076\uffab\100\uffab\126\uffab\130" +
    "\uffab\132\uffab\001\002\000\106\031\063\036\032\037\131" +
    "\040\064\041\120\042\076\043\126\044\121\045\135\046" +
    "\125\047\123\050\055\051\151\052\124\053\143\054\100" +
    "\055\152\056\102\057\132\060\106\061\065\062\140\063" +
    "\107\064\067\065\156\066\147\073\037\074\071\075\053" +
    "\076\033\100\031\126\075\130\u01f1\132\uffad\001\002\000" +
    "\004\132\uffb2\001\002\000\106\031\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063" +
    "\uffca\064\uffca\065\uffca\066\uffca\073\uffca\074\uffca\075\uffca" +
    "\076\uffca\100\uffca\126\uffca\130\uffca\132\uffca\001\002\000" +
    "\004\132\uffb0\001\002\000\104\031\063\036\032\037\131" +
    "\040\064\041\120\042\076\043\126\044\121\045\135\046" +
    "\125\047\123\050\055\051\151\052\124\053\143\054\100" +
    "\055\152\056\102\057\132\060\106\061\065\062\140\063" +
    "\107\064\067\065\156\066\147\073\037\074\071\075\053" +
    "\076\033\100\031\126\075\132\uffae\001\002\000\004\132" +
    "\uffb1\001\002\000\004\010\uffd5\001\002\000\004\010\uffd3" +
    "\001\002\000\102\031\063\036\032\037\131\040\064\041" +
    "\120\042\076\043\126\044\121\045\135\046\125\047\123" +
    "\050\055\051\151\052\124\053\143\054\100\055\152\056" +
    "\102\057\132\060\106\061\065\062\140\063\107\064\067" +
    "\065\156\066\147\073\037\074\071\075\053\076\033\100" +
    "\031\126\075\001\002\000\004\010\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01f4\000\032\002\003\003\013\017\011\020\015\022" +
    "\020\023\010\024\006\030\004\161\007\162\022\164\023" +
    "\175\021\001\001\000\122\012\104\034\141\041\u01b6\042" +
    "\115\043\061\044\102\045\071\046\110\047\152\050\136" +
    "\052\114\053\153\054\056\055\127\056\112\057\067\060" +
    "\126\061\053\062\140\064\143\066\111\070\055\072\072" +
    "\074\065\076\100\100\103\102\147\104\050\106\113\110" +
    "\156\112\144\114\145\117\u01f3\121\073\122\037\147\u01b8" +
    "\151\u01b7\152\132\153\154\165\060\001\001\000\006\004" +
    "\u015b\115\u01d2\001\001\000\002\001\001\000\010\002\003" +
    "\022\u01d1\030\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\003\003\013\020\u01d0\022\020\023\010" +
    "\024\006\030\004\161\007\162\022\164\023\175\021\001" +
    "\001\000\002\001\001\000\010\025\u01a8\026\u01aa\123\u01a9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\u01a6\010\u0169\011\u016a\001\001\000\004\163" +
    "\024\001\001\000\012\121\027\122\037\166\034\167\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\174" +
    "\u01a1\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\047\021\046\116" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\121\027\122\037\166\041\167\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u0199\001\001\000\002\001" +
    "\001\000\124\012\104\034\141\042\115\043\061\044\102" +
    "\045\071\046\110\047\152\050\136\052\114\053\153\054" +
    "\056\055\127\056\112\057\067\060\126\061\053\062\140" +
    "\064\143\066\111\070\055\072\072\074\065\076\100\100" +
    "\103\102\147\104\050\106\113\110\156\112\144\114\145" +
    "\121\073\122\076\124\057\141\135\142\133\146\121\151" +
    "\116\152\132\153\154\165\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\114" +
    "\012\104\034\141\042\115\043\061\044\102\045\071\046" +
    "\110\047\152\050\136\052\114\053\153\054\056\055\127" +
    "\056\112\057\067\060\126\061\053\062\140\064\143\066" +
    "\111\070\055\072\072\074\065\076\100\100\103\102\147" +
    "\104\050\106\113\110\156\112\144\114\145\121\073\122" +
    "\037\151\u0134\152\132\153\154\165\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\173\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\144\360\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\143\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\121\212\122\037\154\215\155\211\157\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\114\012\104\034" +
    "\141\042\115\043\061\044\102\045\071\046\110\047\152" +
    "\050\136\052\114\053\153\054\056\055\127\056\112\057" +
    "\067\060\126\061\053\062\140\064\143\066\111\070\055" +
    "\072\072\074\065\076\100\100\103\102\147\104\050\106" +
    "\113\110\156\112\144\114\145\121\073\122\037\151\160" +
    "\152\132\153\154\165\060\001\001\000\004\173\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\114\012\104\034\141\042\115\043\061\044\102\045" +
    "\071\046\110\047\152\050\136\052\114\053\153\054\056" +
    "\055\127\056\112\057\067\060\126\061\053\062\140\064" +
    "\143\066\111\070\055\072\072\074\065\076\100\100\103" +
    "\102\147\104\050\106\113\110\156\112\144\114\145\121" +
    "\073\122\037\151\175\152\132\153\154\165\060\001\001" +
    "\000\114\012\104\034\141\042\115\043\061\044\102\045" +
    "\071\046\110\047\152\050\136\052\114\053\153\054\056" +
    "\055\127\056\112\057\067\060\126\061\053\062\140\064" +
    "\143\066\111\070\055\072\072\074\065\076\100\100\103" +
    "\102\147\104\050\106\113\110\156\112\144\114\145\121" +
    "\073\122\037\151\170\152\132\153\154\165\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\173\164\001" +
    "\001\000\114\012\104\034\141\042\115\043\061\044\102" +
    "\045\071\046\110\047\152\050\136\052\114\053\153\054" +
    "\056\055\127\056\112\057\067\060\126\061\053\062\140" +
    "\064\143\066\111\070\055\072\072\074\065\076\100\100" +
    "\103\102\147\104\050\106\113\110\156\112\144\114\145" +
    "\121\073\122\037\151\173\152\132\153\154\165\060\001" +
    "\001\000\002\001\001\000\004\173\164\001\001\000\002" +
    "\001\001\000\004\173\164\001\001\000\006\107\204\123" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\154\252\155\211\157\213\001" +
    "\001\000\010\154\246\155\211\157\213\001\001\000\004" +
    "\160\244\001\001\000\126\012\104\034\141\042\115\043" +
    "\061\044\102\045\071\046\110\047\152\050\136\052\114" +
    "\053\153\054\056\055\127\056\112\057\067\060\126\061" +
    "\053\062\140\064\143\066\111\070\055\072\072\074\065" +
    "\076\100\100\103\102\147\104\050\106\113\110\156\112" +
    "\144\114\145\121\073\122\076\124\057\141\241\142\133" +
    "\145\242\146\121\151\116\152\132\153\154\165\060\001" +
    "\001\000\004\156\217\001\001\000\020\121\073\122\037" +
    "\153\154\165\225\170\226\171\223\172\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\121\073\122\037\153\154\165\225\170\231\171\223\172" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\173\227\001\001\000\020\121\073\122" +
    "\037\153\154\165\225\170\230\171\223\172\224\001\001" +
    "\000\004\173\227\001\001\000\004\173\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\121\073" +
    "\122\037\153\154\165\225\170\245\171\223\172\224\001" +
    "\001\000\002\001\001\000\004\173\227\001\001\000\004" +
    "\156\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\103\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\124\012\104\034" +
    "\141\042\115\043\061\044\102\045\071\046\110\047\152" +
    "\050\136\052\114\053\153\054\056\055\127\056\112\057" +
    "\067\060\126\061\053\062\140\064\143\066\111\070\055" +
    "\072\072\074\065\076\100\100\103\102\147\104\050\106" +
    "\113\110\156\112\144\114\145\121\073\122\076\124\057" +
    "\141\274\142\133\146\121\151\116\152\132\153\154\165" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\063\303\065\302\122" +
    "\301\001\001\000\004\122\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\063\303\065\306\122\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\123\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\063\315" +
    "\122\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\071\324\122\323" +
    "\001\001\000\004\122\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\101\335\121\334\122\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\063\342\122\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\073\347\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\116\012\104\034" +
    "\141\042\115\043\061\044\102\045\071\046\110\047\152" +
    "\050\136\052\114\053\153\054\056\055\127\056\112\057" +
    "\067\060\126\061\053\062\140\064\143\066\111\070\055" +
    "\072\072\074\065\076\100\100\103\102\147\104\050\106" +
    "\113\110\156\112\144\114\145\121\073\122\037\146\366" +
    "\151\116\152\132\153\154\165\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\075\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\063\u0100\122\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\063\u0113\122\301" +
    "\001\001\000\002\001\001\000\006\063\u0115\122\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\123\u0118" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\033" +
    "\u011b\121\073\122\037\153\154\165\225\170\u011c\171\223" +
    "\172\224\001\001\000\002\001\001\000\004\173\227\001" +
    "\001\000\022\033\u011e\121\073\122\037\153\154\165\225" +
    "\170\u011c\171\223\172\224\001\001\000\002\001\001\000" +
    "\022\033\u0120\121\073\122\037\153\154\165\225\170\u011c" +
    "\171\223\172\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\111\u0123\123\u0124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\105\u0128\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\123\u012c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\063\u0132\122\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\173\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\113\u013f\122\u013e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\063\u0145\122\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\173\u0149\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\125\u014d\001\001" +
    "\000\016\002\u0150\031\u0157\126\u014f\127\u0154\130\u0155\145" +
    "\u0153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\121\u0193\122\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\u015b\115" +
    "\u015c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\u018d\007\u018e\010\u0169\011\u016a\001" +
    "\001\000\014\005\047\116\u0163\131\u0165\132\u0161\136\u015e" +
    "\001\001\000\010\006\u0183\010\u0169\011\u016a\001\001\000" +
    "\010\006\u0179\010\u0169\011\u016a\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\131\u0173\132\u0161\136\u015e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\047\116\u016e\001\001\000\002\001\001\000" +
    "\010\006\u0168\010\u0169\011\u016a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\134\u017a\001\001\000\002\001\001\000\010\133\u017d" +
    "\135\u017c\145\u017e\001\001\000\002\001\001\000\004\143" +
    "\u0181\001\001\000\002\001\001\000\004\145\u0180\001\001" +
    "\000\002\001\001\000\010\133\u017d\135\u0182\145\u017e\001" +
    "\001\000\002\001\001\000\006\134\u0184\140\u0186\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\122\u0188\137\u0189\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\122\u0188\137\u018c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\u018d\007\u0190\010\u0169\011\u016a\001\001\000" +
    "\002\001\001\000\006\127\u0192\145\u0153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\121\073\122\037\153" +
    "\154\165\225\170\u01a4\171\223\172\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\173\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\u01ad\001\001\000\002\001\001\000" +
    "\002\001\001\000\122\012\104\034\141\041\u01b6\042\115" +
    "\043\061\044\102\045\071\046\110\047\152\050\136\052" +
    "\114\053\153\054\056\055\127\056\112\057\067\060\126" +
    "\061\053\062\140\064\143\066\111\070\055\072\072\074" +
    "\065\076\100\100\103\102\147\104\050\106\113\110\156" +
    "\112\144\114\145\117\u01b9\121\073\122\037\147\u01b8\151" +
    "\u01b7\152\132\153\154\165\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\003\030\u01b0\001\001\000" +
    "\006\004\u015b\115\u01b1\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\u01b5\123\u01b4\001\001\000\004\027" +
    "\u01ad\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\173\164\001\001\000\006\123\u01bc\150\u01bd\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\123\u01be\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\122\012\104\034\141\041\u01b6\042\115\043\061\044\102" +
    "\045\071\046\110\047\152\050\136\052\114\053\153\054" +
    "\056\055\127\056\112\057\067\060\126\061\053\062\140" +
    "\064\143\066\111\070\055\072\072\074\065\076\100\100" +
    "\103\102\147\104\050\106\113\110\156\112\144\114\145" +
    "\117\u01c0\121\073\122\037\147\u01b8\151\u01b7\152\132\153" +
    "\154\165\060\001\001\000\002\001\001\000\006\002\003" +
    "\030\u01c2\001\001\000\006\004\u015b\115\u01c3\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\u01c6\123\u01c7" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\u01ca\010\u0169\011\u016a\001\001\000\010" +
    "\005\047\021\u01cc\116\u01cb\001\001\000\004\021\u01ce\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\047\013\u01d4\021\u01d3\035\u01d7\116\u01d5\131\u01d6" +
    "\132\u0161\136\u015e\001\001\000\002\001\001\000\004\014" +
    "\u01e4\001\001\000\010\013\u01d4\021\u01e2\035\u01e1\001\001" +
    "\000\014\005\047\013\u01d4\021\u01dc\035\u01db\116\u01da\001" +
    "\001\000\004\021\u01d9\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\u01d4\021\u01de\035\u01df\001\001\000" +
    "\004\021\u01dd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u01e0\001\001\000\002\001" +
    "\001\000\004\021\u01e3\001\001\000\002\001\001\000\002" +
    "\001\001\000\126\012\104\034\141\036\u01e7\037\u01e6\041" +
    "\u01b6\042\115\043\061\044\102\045\071\046\110\047\152" +
    "\050\136\052\114\053\153\054\056\055\127\056\112\057" +
    "\067\060\126\061\053\062\140\064\143\066\111\070\055" +
    "\072\072\074\065\076\100\100\103\102\147\104\050\106" +
    "\113\110\156\112\144\114\145\117\u01e8\121\073\122\037" +
    "\147\u01b8\151\u01b7\152\132\153\154\165\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\132" +
    "\012\104\015\u01ea\016\u01eb\034\141\037\u01ed\040\u01ec\041" +
    "\u01b6\042\115\043\061\044\102\045\071\046\110\047\152" +
    "\050\136\052\114\053\153\054\056\055\127\056\112\057" +
    "\067\060\126\061\053\062\140\064\143\066\111\070\055" +
    "\072\072\074\065\076\100\100\103\102\147\104\050\106" +
    "\113\110\156\112\144\114\145\117\u01e8\121\073\122\037" +
    "\147\u01b8\151\u01b7\152\132\153\154\165\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\124" +
    "\012\104\034\141\037\u01ef\041\u01b6\042\115\043\061\044" +
    "\102\045\071\046\110\047\152\050\136\052\114\053\153" +
    "\054\056\055\127\056\112\057\067\060\126\061\053\062" +
    "\140\064\143\066\111\070\055\072\072\074\065\076\100" +
    "\100\103\102\147\104\050\106\113\110\156\112\144\114" +
    "\145\117\u01e8\121\073\122\037\147\u01b8\151\u01b7\152\132" +
    "\153\154\165\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\124\012\104\034\141\037\u01f1" +
    "\041\u01b6\042\115\043\061\044\102\045\071\046\110\047" +
    "\152\050\136\052\114\053\153\054\056\055\127\056\112" +
    "\057\067\060\126\061\053\062\140\064\143\066\111\070" +
    "\055\072\072\074\065\076\100\100\103\102\147\104\050" +
    "\106\113\110\156\112\144\114\145\117\u01e8\121\073\122" +
    "\037\147\u01b8\151\u01b7\152\132\153\154\165\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\122\012\104\034\141\041\u01b6\042\115\043\061\044\102" +
    "\045\071\046\110\047\152\050\136\052\114\053\153\054" +
    "\056\055\127\056\112\057\067\060\126\061\053\062\140" +
    "\064\143\066\111\070\055\072\072\074\065\076\100\100" +
    "\103\102\147\104\050\106\113\110\156\112\144\114\145" +
    "\117\u01f5\121\073\122\037\147\u01b8\151\u01b7\152\132\153" +
    "\154\165\060\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup_Rules_SQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup_Rules_SQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup_Rules_SQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// This list will store every error found in the syntax analysis process. SE -> Syntax errors
	public static LinkedList<TError> TableSE = new LinkedList<TError>();

	// This object has a list with all columns found and its table
	//public static ColumnEvalutator Columns = new ColumnEvaluator();

	public HashSet<String> Tables  = new HashSet<String>();
	public HashSet<String> Columns = new HashSet<String>();

	public  Scanner s;
  	public  int errors = 0, line, column;
  	public 	String the_error = "";
	public 	StringBuilder the_error_message = new StringBuilder();

	public int selects_read = 0;
	public int updates_read = 0;
	public int deletes_read = 0;
	public int with_read = 0;


	public void clean_lists() {
		TableSE = new LinkedList<TError>();
	}

	/* This is the error handler */
	public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("\n\n---- Error message: " + message + "\n");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {

        	// Uncomment when Analyzer can handle multiple errors
			//errors++;
			errors = 1;

            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0 && s.right >= 0) {

            	
				the_error = (s.value == null) ? "Empty" : s.value.toString();
				//the_error = s.value.toString();
                
                m.append("--> Unexpected : " + the_error );
                m.append(" at line: "+(s.left));  
                m.append(", column: "+(s.right)); 

				the_error_message = m;
            }
        }
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/

    public void report_fatal_error(String message, Object info) {
        //report_error(message, info);
		//the_error_message.append("\n\n---- Unknown syntax error ლ(ಠ_ಠლ)" + "\n");
		the_error_message.append("\n\n---- Unknown syntax error." + "\n");
    }
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Cup_Rules_SQL$actions {


	

  private final Cup_Rules_SQL parser;

  /** Constructor */
  CUP$Cup_Rules_SQL$actions(Cup_Rules_SQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Cup_Rules_SQL$do_action_part00000000(
    int                        CUP$Cup_Rules_SQL$act_num,
    java_cup.runtime.lr_parser CUP$Cup_Rules_SQL$parser,
    java.util.Stack            CUP$Cup_Rules_SQL$stack,
    int                        CUP$Cup_Rules_SQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup_Rules_SQL$result;

      /* select the action based on the action number */
      switch (CUP$Cup_Rules_SQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statement_group EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		RESULT = start_val;
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup_Rules_SQL$parser.done_parsing();
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statement_group ::= statement_group statement 
            {
              Object RESULT =null;
		 System.out.println("statement_group ::= statement_group statement"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement_group",13, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_group ::= statement 
            {
              Object RESULT =null;
		 System.out.println("statement_group ::= statement"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement_group",13, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= select_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= select_s"); 	
						   selects_read++; 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= delete_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= delete_s");
						   deletes_read++; 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= update_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= update_s"); 
						   updates_read++; 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= with_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= with_s");
						   with_read++;	
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // _semicolon ::= _SEMCOL2 
            {
              Object RESULT =null;
		 System.out.println("_semicolon ::= _SEMICOL2"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_semicolon",15, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // select_s ::= select_part from_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // select_s ::= select_part from_part where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part where_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // select_s ::= select_part from_part joins_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part joins_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // select_s ::= select_part from_part joins_part where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part joins_part where_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // select_s ::= select_part from_part order_by_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part order_by_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // select_s ::= select_part from_part where_part order_by_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part where_part order_by_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // select_s ::= select_part from_part joins_part order_by_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part joins_part order_by_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // select_s ::= select_part from_part joins_part where_part order_by_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part joins_part where_part order_by_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // with_s ::= with_part select_s 
            {
              Object RESULT =null;
		 System.out.println("with_s	::=	with_part select_s"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_s",17, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // joins_part ::= join_p joins_part 
            {
              Object RESULT =null;
		 System.out.println("joins_part ::= join_p joins_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("joins_part",87, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // joins_part ::= join_p 
            {
              Object RESULT =null;
		 System.out.println("joins_part ::= join_p"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("joins_part",87, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // join_p ::= NATURAL JOIN table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",88, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // join_p ::= JOIN table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",88, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // join_p ::= JOIN table_name join_using 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",88, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // join_p ::= JOIN table_name join_cond 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",88, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // join_p ::= join table_name join_cond 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",88, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // join_using ::= USING _OPENPAR join_using_cols _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_using",94, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // join_using_cols ::= cl _COMMA join_using_cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_using_cols",93, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // join_using_cols ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_using_cols",93, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // join ::= INNER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",92, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // join ::= LEFT JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",92, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // join ::= RIGHT JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",92, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // join ::= LEFT OUTER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",92, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // join ::= RIGHT OUTER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",92, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // join ::= FULL OUTER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",92, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // join_cond ::= ON join_c 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_cond",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // join_c ::= join_on log_oper join_c 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_c",91, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // join_c ::= join_on 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_c",91, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // join_on ::= element _EQU element 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_on",89, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // with_part ::= _with with_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_part",18, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // with_part ::= _with with_exp2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_part",18, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // with_exp ::= col_ali AS _OPENPAR select_part from_part _CLOSEPAR _COMMA with_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp",19, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-7)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // with_exp ::= col_ali AS _OPENPAR select_part from_part _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp",19, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // with_exp2 ::= col_ali with_exp2_1 AS _OPENPAR select_part from_part _CLOSEPAR _COMMA with_exp2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp2",20, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-8)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // with_exp2 ::= col_ali with_exp2_1 AS _OPENPAR select_part from_part _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp2",20, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-6)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // with_exp2_1 ::= _OPENPAR cols _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp2_1",21, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // select_part ::= _select _STAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // select_part ::= _select DISTINCT cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // select_part ::= _select cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nvl2_exp ::= _OPENPAR nvl2_exp_nested _COMMA nvl2_exp_nested _COMMA nvl2_exp_nested _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nvl2_exp",24, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-6)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nvl2_exp_nested ::= ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nvl2_exp_nested",25, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // _with ::= WITH 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_with",1, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // _select ::= SELECT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_select",0, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // _nvl2 ::= NVL2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_nvl2",8, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // _order ::= ORDER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_order",9, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // _by ::= BY 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_by",10, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // _asc ::= ASC 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asc",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // _desc ::= DESC 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_desc",12, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cols ::= col_el _COMMA cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols",77, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cols ::= col_el 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols",77, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cols_nvl2 ::= col_el _COMMA cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols_nvl2",78, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cols_nvl2 ::= col_el _COMMA 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols_nvl2",78, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // col_el ::= c_el c_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_el",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // col_el ::= c_el 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_el",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // c_el ::= mix_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_el",101, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // c_ali ::= col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_ali",102, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // c_ali ::= AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_ali",102, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // mix_exp ::= _OPENPAR mix_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",103, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // mix_exp ::= func_ls 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",103, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // mix_exp ::= m_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",103, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // mix_exp ::= ari_value 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",103, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // m_exp ::= mix_exp _ari_opr mix_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("m_exp",104, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // func_ls ::= aggregates 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // func_ls ::= stringFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // func_ls ::= dateFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // func_ls ::= nullFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // func_ls ::= logicalFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // func_ls ::= function_to_date 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // func_ls ::= function_to_char 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // order_by_part ::= _order _by order_by_part_nested 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("order_by_part",27, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // order_by_part_nested ::= order_cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("order_by_part_nested",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // order_cols ::= cols order_cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("order_cols",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // order_cols ::= cols asc_desc _COMMA order_cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("order_cols",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // order_cols ::= cols asc_desc order_cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("order_cols",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // order_cols ::= cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("order_cols",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // order_cols ::= cols asc_desc _COMMA 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("order_cols",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // order_cols ::= cols asc_desc 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("order_cols",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asc_desc ::= _asc 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("asc_desc",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asc_desc ::= _desc 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("asc_desc",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // aggregates ::= agg_count 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // aggregates ::= agg_sum 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // aggregates ::= agg_max 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // aggregates ::= agg_min 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // aggregates ::= agg_avg 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // stringFunctions ::= stringFunction_concat 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // stringFunctions ::= stringFunction_lpad 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // stringFunctions ::= stringFunction_rpad 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // stringFunctions ::= stringFunction_replace 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stringFunctions ::= stringFunction_upper 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stringFunctions ::= stringFunction_lower 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // stringFunctions ::= stringFunction_trim 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // stringFunctions ::= stringFunction_length 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // stringFunctions ::= stringFunction_ltrim 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // stringFunctions ::= stringFunction_rtrim 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // stringFunctions ::= stringFunction_instr 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // dateFunctions ::= sysdate 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("dateFunctions",41, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // logicalFunctions ::= logFunc_choose 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logicalFunctions",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // logicalFunctions ::= logFunc_iif 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logicalFunctions",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // nullFunctions ::= nullFunction_nvl2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunctions",34, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // nullFunctions ::= nullFunction_nvl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunctions",34, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // nullFunctions ::= nullFunction_nullif 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunctions",34, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // nullFunction_nvl2 ::= _nvl2 nvl2_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunction_nvl2",35, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // nullFunction_nullif ::= NULLIF _OPENPAR LITERAL_STRING _COMMA LITERAL_STRING _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunction_nullif",36, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // function_to_date ::= TO_DATE _OPENPAR LITERAL_STRING _COMMA LITERAL_STRING _COMMA LITERAL_STRING _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("function_to_date",37, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-7)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // function_to_char ::= TO_CHAR _OPENPAR mix_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("function_to_char",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // function_to_char ::= TO_CHAR _OPENPAR mix_exp _COMMA mix_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("function_to_char",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // function_to_char ::= TO_CHAR _OPENPAR mix_exp _COMMA mix_exp _COMMA mix_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("function_to_char",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-7)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // stringFunction_concat ::= CONCAT _OPENPAR concat_exp _CLOSEPAR AS LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_concat",56, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // stringFunction_lpad ::= LPAD _OPENPAR lpad_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_lpad",58, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // stringFunction_rpad ::= RPAD _OPENPAR rpad_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_rpad",60, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // stringFunction_length ::= LENGTH _OPENPAR length_exp _CLOSEPAR AS LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_length",62, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // stringFunction_replace ::= REPLACE _OPENPAR replace_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_replace",64, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // stringFunction_trim ::= TRIM _OPENPAR trim_exp _CLOSEPAR AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_trim",66, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // stringFunction_lower ::= LOWER _OPENPAR lower_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_lower",70, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // stringFunction_upper ::= UPPER _OPENPAR upper_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_upper",68, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // nullFunction_nvl ::= NVL _OPENPAR nvl_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunction_nvl",72, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // agg_count ::= COUNT _OPENPAR count_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_count",42, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // agg_count ::= COUNT _OPENPAR _STAR _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_count",42, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // stringFunction_ltrim ::= LTRIM _OPENPAR LITERAL_STRING _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_ltrim",43, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // stringFunction_rtrim ::= RTRIM _OPENPAR LITERAL_STRING _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_rtrim",44, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // stringFunction_instr ::= INSTR _OPENPAR count_exp _COMMA LITERAL_STRING _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_instr",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // agg_sum ::= SUM _OPENPAR count_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_sum",46, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // agg_max ::= MAX _OPENPAR count_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_max",47, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // agg_min ::= MIN _OPENPAR count_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_min",48, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // agg_avg ::= AVG _OPENPAR avg_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_avg",54, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // agg_avg ::= AVG _OPENPAR _STAR _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_avg",54, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // count_exp ::= DISTINCT cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",49, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // count_exp ::= DISTINCT NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",49, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // count_exp ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",49, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // count_exp ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",49, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // logFunc_choose ::= CHOOSE _OPENPAR INTEGER _COMMA choose_exp _CLOSEPAR AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logFunc_choose",50, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-7)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // logFunc_iif ::= IIF _OPENPAR INTEGER iif_exp INTEGER _COMMA count_exp _COMMA count_exp _CLOSEPAR AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logFunc_iif",52, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-11)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // choose_exp ::= count_exp _COMMA choose_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("choose_exp",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // choose_exp ::= count_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("choose_exp",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // concat_exp ::= LITERAL_STRING _COMMA concat_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("concat_exp",57, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // concat_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("concat_exp",57, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // replace_exp ::= LITERAL_STRING _COMMA replace_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("replace_exp",65, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // replace_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("replace_exp",65, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // trim_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("trim_exp",67, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // upper_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("upper_exp",69, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // upper_exp ::= col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("upper_exp",69, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // lower_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("lower_exp",71, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // lower_exp ::= col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("lower_exp",71, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // lpad_exp ::= LITERAL_STRING _COMMA INTEGER _COMMA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("lpad_exp",59, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // rpad_exp ::= LITERAL_STRING _COMMA INTEGER _COMMA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("rpad_exp",61, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sysdate ::= SYSDATE _OPENPAR _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("sysdate",74, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sysdate ::= SYSDATE _OPENPAR _CLOSEPAR _ari_opr INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("sysdate",74, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // length_exp ::= col 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("length_exp",63, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // avg_exp ::= DISTINCT cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",55, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // avg_exp ::= DISTINCT NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",55, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // avg_exp ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",55, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // avg_exp ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",55, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // iif_exp ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // iif_exp ::= _GT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // iif_exp ::= _LT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // iif_exp ::= _LET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // iif_exp ::= _GET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // iif_exp ::= _DIFF 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // iif_exp ::= _DIFF2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // nvl_exp ::= cl _COMMA INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nvl_exp",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // nvl_exp ::= cl _COMMA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nvl_exp",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // col ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col",79, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // col ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col",79, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // cl ::= IDENTIFIER 
            {
              Object RESULT =null;
		int col1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int col1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object col1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Columns.add(col1 + ""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",80, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // cl ::= TABDOTCOL 
            {
              Object RESULT =null;
		int col1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int col1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object col1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Columns.add(col1 + ""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",80, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // cl ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",80, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // col_ali ::= QTABLENAME 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 /*Tables.add(t+"");*/ 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",81, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // col_ali ::= IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 /*Tables.add(t+"");*/ 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",81, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // col_ali ::= QCOLALIAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 /*Tables.add(t+"");*/ 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",81, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // case_exp ::= CASE case_rules END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE case_rules END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",105, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // case_exp ::= CASE case_rules case_else END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE case_rules case_else END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",105, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // case_exp ::= CASE col case_rules END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE col case_rules END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",105, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // case_exp ::= CASE col case_rules case_else END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE col case_rules case_else END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",105, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // case_rules ::= case_rul case_rules 
            {
              Object RESULT =null;
		 System.out.println("case_rules ::= case_rul case_rules"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_rules",106, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // case_rules ::= case_rul 
            {
              Object RESULT =null;
		 System.out.println("case_rules ::= case_rul"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_rules",106, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // case_rul ::= case_cond case_act 
            {
              Object RESULT =null;
		 System.out.println("case_rul ::= WHEN case_cond THEN case_act"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_rul",107, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // case_cond ::= WHEN w_condition 
            {
              Object RESULT =null;
		 System.out.println("case_cond ::= w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_cond",109, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // case_cond ::= WHEN element 
            {
              Object RESULT =null;
		 System.out.println("case_cond ::= element"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_cond",109, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // case_act ::= THEN ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_act",110, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // case_else ::= ELSE ari_exp 
            {
              Object RESULT =null;
		 System.out.println("case_else ::= ELSE ari_exp"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_else",108, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // update_s ::= update_part _set set_exp_list where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("update_s	::= update_part _set set_cols where_part _semicolon"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",111, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // update_s ::= update_part _set set_exp_list error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE section. \nMissing semicolon."); //Original error message: UPDATE error after set of columns.
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part _set set_cols error. \nMissing semicolon on UPDATE."); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",111, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // update_s ::= update_part _set set_exp_list _semicolon error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE section. Missing where clause (WHERE).");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part _set set_exp_list _semicolon error.\nMissing WHERE CLAUSE on UPDATE."); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",111, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // update_s ::= update_part error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Incomplete UPDATE.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",111, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // update_s ::= _update error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= _update error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",111, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // _set ::= SET 
            {
              Object RESULT =null;
		 System.out.println("_set ::= SET"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_set",113, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // update_part ::= _update table_name 
            {
              Object RESULT =null;
		 System.out.println("update_part ::= _update table_name OK"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_part",114, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // update_part ::= error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE.");
				  	  	   TableSE.add(errors_found); 
						   System.out.println("update_part ::= _update table_name ERROR"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_part",114, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // _update ::= UPDATE 
            {
              Object RESULT =null;
		 System.out.println("_update ::= UPDATE"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_update",112, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // set_exp_list ::= set_exp _COMMA set_exp_list 
            {
              Object RESULT =null;
		 System.out.println("set_exp_list	::= set_exp _COMMA set_exp_list "); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",116, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // set_exp_list ::= set_exp 
            {
              Object RESULT =null;
		 System.out.println("set_exp_list	::= set_exp "); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",116, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // set_exp_list ::= error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid set of columns in UPDATE");
				  	  	   TableSE.add(errors_found); 
						   System.out.println("set_cols	::=	error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",116, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // set_exp ::= col _asig_opr ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp",117, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // set_exp ::= col _EQU LITERAL_STRING 
            {
              Object RESULT =null;
		 System.out.println("set_exp ::= col _EQU LITERAL_STRING"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp",117, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ari_exp ::= par_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",118, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ari_exp ::= exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",118, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ari_exp ::= ari_value 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",118, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ari_value ::= col 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= col"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",115, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ari_value ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= INTEGER"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",115, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ari_value ::= REAL 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= REAL"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",115, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ari_value ::= case_exp 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= case_exp"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",115, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // par_exp ::= _OPENPAR ari_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("par_exp",119, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // exp ::= ari_exp _ari_opr ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("exp",120, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // _ari_opr ::= _PLUS 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",121, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // _ari_opr ::= _MINUS 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",121, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // _ari_opr ::= _STAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",121, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // _ari_opr ::= _DIVIDE 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",121, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // _asig_opr ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",122, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // _asig_opr ::= _PLUSEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",122, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // _asig_opr ::= _MINUSEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",122, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // _asig_opr ::= _TIMESEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",122, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // _asig_opr ::= _DIVIDEEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",122, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // _asig_opr ::= _MODEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",122, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // _asig_opr ::= _ANDEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",122, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // _asig_opr ::= _POWEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",122, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // _asig_opr ::= _OREQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",122, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // delete_s ::= DELETE FROM table_name where_part _semicolon 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("delete_s",123, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // delete_s ::= DELETE FROM table_name _semicolon error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid DELETE section. Missing where clause (WHERE).");
				  	  	   TableSE.add(errors_found);
						   System.out.println("DELETE FROM table_name _semicolon error.\nMissing WHERE CLAUSE on DELETE."); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("delete_s",123, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // delete_s ::= DELETE error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid DELETE statement.");
				  	  			 		TableSE.add(errors_found);
										System.out.println("value ::= LITERAL_STRING"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("delete_s",123, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // from_part ::= _from table_name_mult 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("from_part",75, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // table_name_mult ::= table_name _COMMA table_name_mult 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name_mult",5, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // table_name_mult ::= table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name_mult",5, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // _from ::= FROM 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_from",2, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // table_name ::= tab 
            {
              Object RESULT =null;
		 System.out.println("table_name ::= tab"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name",4, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // table_name ::= tab_ali 
            {
              Object RESULT =null;
		 System.out.println("table_name ::= tab_ali"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name",4, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // tab ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Tables.add(id+"");
						   System.out.println("tab ::= IDENTIFIER"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab",6, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // tab_ali ::= IDENTIFIER IDENTIFIER 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 System.out.println("tab_ali ::= IDENTIFIER IDENTIFIER");	
						   Tables.add(id1+""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab_ali",7, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // tab_ali ::= IDENTIFIER QTABLENAME 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 System.out.println("tab_ali ::= IDENTIFIER QTABLENAME"); 
						   Tables.add(id1+""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab_ali",7, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // where_part ::= _where w_condition 
            {
              Object RESULT =null;
		 System.out.println("where_part ::= _where w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("where_part",76, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // _where ::= WHERE 
            {
              Object RESULT =null;
		 System.out.println("_where ::= WHERE"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_where",3, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // w_condition ::= cond log_oper w_condition 
            {
              Object RESULT =null;
		 System.out.println("w_condition ::= cond log_oper w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("w_condition",95, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // w_condition ::= cond 
            {
              Object RESULT =null;
		 System.out.println("w_condition ::= cond"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("w_condition",95, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // cond ::= cond_el cmp_oper cond_el 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // cond ::= element_in IN in_list 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // cond ::= cl IS NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // cond ::= cl IS NOT NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // cond_el ::= mix_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond_el",100, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // in_list ::= _OPENPAR in_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_list",83, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // in_exp ::= in_array 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_exp",84, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // in_exp ::= in_subquery 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_exp",84, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // in_subquery ::= select_part_sub from_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // in_subquery ::= select_part_sub from_part where_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // in_subquery ::= select_part_sub from_part joins_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // in_subquery ::= select_part_sub from_part joins_part where_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // select_part_sub ::= _select col 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part_sub",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // in_array ::= element _COMMA in_array 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_array",85, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // in_array ::= element 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_array",85, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // element_in ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element_in",82, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // element_in ::= TABDOTCOL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element_in",82, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // element ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",99, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // element ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",99, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // element ::= REAL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",99, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // element ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",99, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // element ::= TABDOTCOL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",99, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // element ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",99, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // cmp_oper ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",98, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // cmp_oper ::= _GT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",98, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // cmp_oper ::= _LT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",98, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // cmp_oper ::= _LET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",98, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // cmp_oper ::= _GET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",98, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // cmp_oper ::= _DIFF 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",98, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // cmp_oper ::= _DIFF2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",98, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // log_oper ::= _AND 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("log_oper",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // log_oper ::= _OR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("log_oper",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Cup_Rules_SQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Cup_Rules_SQL$do_action(
    int                        CUP$Cup_Rules_SQL$act_num,
    java_cup.runtime.lr_parser CUP$Cup_Rules_SQL$parser,
    java.util.Stack            CUP$Cup_Rules_SQL$stack,
    int                        CUP$Cup_Rules_SQL$top)
    throws java.lang.Exception
    {
              return CUP$Cup_Rules_SQL$do_action_part00000000(
                               CUP$Cup_Rules_SQL$act_num,
                               CUP$Cup_Rules_SQL$parser,
                               CUP$Cup_Rules_SQL$stack,
                               CUP$Cup_Rules_SQL$top);
    }
}

}
