
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.kerberus.model.syntaxValidator.rules.sql;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.HashSet;
import java.io.*;
import com.kerberus.model.syntaxValidator.rules.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Cup_Rules_SQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Cup_Rules_SQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Cup_Rules_SQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup_Rules_SQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\333\000\002\002\004\000\002\012\004\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\003\000\002\015\005\000" +
    "\002\015\006\000\002\015\006\000\002\015\007\000\002" +
    "\016\004\000\002\101\004\000\002\101\003\000\002\102" +
    "\005\000\002\102\004\000\002\102\005\000\002\102\005" +
    "\000\002\106\004\000\002\106\004\000\002\106\004\000" +
    "\002\106\005\000\002\106\005\000\002\106\005\000\002" +
    "\104\004\000\002\105\005\000\002\105\003\000\002\103" +
    "\005\000\002\017\004\000\002\017\004\000\002\020\012" +
    "\000\002\020\010\000\002\021\013\000\002\021\011\000" +
    "\002\022\005\000\002\023\004\000\002\023\005\000\002" +
    "\023\004\000\002\003\003\000\002\002\003\000\002\070" +
    "\005\000\002\070\003\000\002\025\004\000\002\025\003" +
    "\000\002\115\003\000\002\115\003\000\002\115\003\000" +
    "\002\115\003\000\002\115\003\000\002\116\003\000\002" +
    "\116\004\000\002\117\005\000\002\117\003\000\002\117" +
    "\003\000\002\117\003\000\002\120\005\000\002\026\003" +
    "\000\002\026\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\032" +
    "\003\000\002\031\003\000\002\027\003\000\002\027\003" +
    "\000\002\043\010\000\002\045\006\000\002\047\006\000" +
    "\002\051\010\000\002\053\006\000\002\055\010\000\002" +
    "\061\006\000\002\057\006\000\002\063\006\000\002\033" +
    "\006\000\002\033\006\000\002\041\006\000\002\041\006" +
    "\000\002\034\004\000\002\034\004\000\002\034\003\000" +
    "\002\034\003\000\002\035\012\000\002\037\016\000\002" +
    "\036\005\000\002\036\003\000\002\044\005\000\002\044" +
    "\003\000\002\054\005\000\002\054\003\000\002\056\003" +
    "\000\002\060\003\000\002\060\003\000\002\062\003\000" +
    "\002\062\003\000\002\046\007\000\002\050\007\000\002" +
    "\065\005\000\002\065\007\000\002\052\003\000\002\042" +
    "\004\000\002\042\004\000\002\042\003\000\002\042\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\064\005\000\002\064\005\000\002\071" +
    "\003\000\002\071\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\121\005\000\002\121\006\000\002" +
    "\121\006\000\002\121\007\000\002\122\004\000\002\122" +
    "\003\000\002\123\004\000\002\125\004\000\002\125\004" +
    "\000\002\126\004\000\002\124\004\000\002\127\007\000" +
    "\002\127\007\000\002\127\006\000\002\127\004\000\002" +
    "\127\004\000\002\131\003\000\002\132\004\000\002\132" +
    "\003\000\002\130\003\000\002\134\005\000\002\134\003" +
    "\000\002\134\003\000\002\135\005\000\002\135\005\000" +
    "\002\136\003\000\002\136\003\000\002\136\003\000\002" +
    "\133\003\000\002\133\003\000\002\133\003\000\002\133" +
    "\003\000\002\137\005\000\002\140\005\000\002\141\003" +
    "\000\002\141\003\000\002\141\003\000\002\141\003\000" +
    "\002\142\003\000\002\142\003\000\002\142\003\000\002" +
    "\142\003\000\002\142\003\000\002\142\003\000\002\142" +
    "\003\000\002\142\003\000\002\142\003\000\002\143\007" +
    "\000\002\143\004\000\002\066\004\000\002\007\005\000" +
    "\002\007\003\000\002\004\003\000\002\006\003\000\002" +
    "\006\003\000\002\010\003\000\002\011\004\000\002\011" +
    "\004\000\002\067\004\000\002\005\003\000\002\107\005" +
    "\000\002\107\003\000\002\110\005\000\002\110\005\000" +
    "\002\114\003\000\002\075\005\000\002\076\003\000\002" +
    "\076\003\000\002\100\004\000\002\100\005\000\002\100" +
    "\005\000\002\100\006\000\002\024\004\000\002\077\005" +
    "\000\002\077\003\000\002\074\003\000\002\074\003\000" +
    "\002\113\003\000\002\113\003\000\002\113\003\000\002" +
    "\113\003\000\002\113\003\000\002\113\003\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\112\003\000" +
    "\002\111\003\000\002\111\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0184\000\014\003\016\004\017\005\006\007\013\012" +
    "\020\001\002\000\062\022\362\026\u0185\027\032\030\367" +
    "\031\361\032\063\033\336\034\333\035\352\036\372\037" +
    "\374\040\345\041\370\042\337\043\343\044\373\045\061" +
    "\052\037\053\064\054\070\055\033\057\031\105\067\110" +
    "\u0183\001\002\000\004\010\206\001\002\000\006\003\uff6f" +
    "\052\uff6f\001\002\000\004\004\017\001\002\000\016\002" +
    "\ufffc\003\ufffc\004\ufffc\005\ufffc\007\ufffc\012\ufffc\001\002" +
    "\000\016\002\ufffb\003\ufffb\004\ufffb\005\ufffb\007\ufffb\012" +
    "\ufffb\001\002\000\016\002\u0178\003\016\004\017\005\006" +
    "\007\013\012\020\001\002\000\006\003\u0173\010\u0174\001" +
    "\002\000\010\052\316\056\312\060\315\001\002\000\016" +
    "\002\uffff\003\uffff\004\uffff\005\uffff\007\uffff\012\uffff\001" +
    "\002\000\006\003\uff70\006\uff70\001\002\000\062\022\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\052\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\057\uffd9\105\uffd9\110\uffd9\001\002\000\010\052\uffda" +
    "\056\uffda\060\uffda\001\002\000\016\002\ufffe\003\ufffe\004" +
    "\ufffe\005\ufffe\007\ufffe\012\ufffe\001\002\000\016\002\ufffd" +
    "\003\ufffd\004\ufffd\005\ufffd\007\ufffd\012\ufffd\001\002\000" +
    "\006\003\311\052\227\001\002\000\006\003\026\006\027" +
    "\001\002\000\014\003\034\027\032\052\037\055\033\057" +
    "\031\001\002\000\016\002\uff74\003\uff74\004\uff74\005\uff74" +
    "\007\uff74\012\uff74\001\002\000\014\003\uff72\027\uff72\052" +
    "\uff72\055\uff72\057\uff72\001\002\000\024\061\276\075\304" +
    "\076\301\077\302\100\275\101\274\102\300\103\305\104" +
    "\277\001\002\000\110\003\uff87\010\uff87\011\uff87\023\uff87" +
    "\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\056\uff87\060" +
    "\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066\uff87" +
    "\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075" +
    "\uff87\076\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103\uff87" +
    "\104\uff87\106\uff87\107\uff87\110\uff87\111\uff87\001\002\000" +
    "\110\003\uff89\010\uff89\011\uff89\023\uff89\046\uff89\047\uff89" +
    "\050\uff89\051\uff89\052\uff89\056\uff89\060\uff89\061\uff89\062" +
    "\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89" +
    "\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077" +
    "\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\106\uff89" +
    "\107\uff89\110\uff89\111\uff89\001\002\000\110\003\uff86\010" +
    "\uff86\011\uff86\023\uff86\046\uff86\047\uff86\050\uff86\051\uff86" +
    "\052\uff86\056\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064" +
    "\uff86\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86" +
    "\073\uff86\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101" +
    "\uff86\102\uff86\103\uff86\104\uff86\106\uff86\107\uff86\110\uff86" +
    "\111\uff86\001\002\000\006\003\uff6c\011\uff6c\001\002\000" +
    "\006\003\043\011\044\001\002\000\010\003\uff6d\011\uff6d" +
    "\107\041\001\002\000\110\003\uff88\010\uff88\011\uff88\023" +
    "\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\056\uff88" +
    "\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88\065\uff88\066" +
    "\uff88\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88" +
    "\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88\102\uff88\103" +
    "\uff88\104\uff88\106\uff88\107\uff88\110\uff88\111\uff88\001\002" +
    "\000\110\003\uff8a\010\uff8a\011\uff8a\023\uff8a\046\uff8a\047" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\056\uff8a\060\uff8a\061\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070" +
    "\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a" +
    "\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\106" +
    "\uff8a\107\uff8a\110\uff8a\111\uff8a\001\002\000\014\003\034" +
    "\027\032\052\037\055\033\057\031\001\002\000\006\003" +
    "\uff6e\011\uff6e\001\002\000\016\002\uff75\003\uff75\004\uff75" +
    "\005\uff75\007\uff75\012\uff75\001\002\000\024\027\uff47\032" +
    "\uff47\045\uff47\052\uff47\053\uff47\054\uff47\055\uff47\057\uff47" +
    "\105\uff47\001\002\000\006\003\272\111\271\001\002\000" +
    "\024\027\032\032\063\045\061\052\054\053\064\054\070" +
    "\055\033\057\055\105\067\001\002\000\070\003\uff63\010" +
    "\uff63\011\uff63\023\uff63\046\uff63\047\uff63\050\uff63\051\uff63" +
    "\052\uff63\056\uff63\060\uff63\061\uff63\062\uff63\063\uff63\064" +
    "\uff63\065\uff63\066\uff63\067\uff63\070\uff63\071\uff63\072\uff63" +
    "\073\uff63\074\uff63\106\uff63\107\uff63\110\uff63\111\uff63\001" +
    "\002\000\060\003\uffbe\010\uffbe\023\uffbe\047\uffbe\052\uffbe" +
    "\056\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe" +
    "\074\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\001\002\000" +
    "\004\025\167\001\002\000\020\061\165\062\164\063\163" +
    "\064\160\065\157\066\156\067\162\001\002\000\070\003" +
    "\uff66\010\uff66\011\uff66\023\uff66\046\uff66\047\uff66\050\uff66" +
    "\051\uff66\052\uff66\056\uff66\060\uff66\061\uff66\062\uff66\063" +
    "\uff66\064\uff66\065\uff66\066\uff66\067\uff66\070\uff66\071\uff66" +
    "\072\uff66\073\uff66\074\uff66\106\uff66\107\uff66\110\uff66\111" +
    "\uff66\001\002\000\032\025\uff37\061\uff88\062\uff88\063\uff88" +
    "\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88\072" +
    "\uff88\110\uff88\001\002\000\032\025\uff36\061\uff87\062\uff87" +
    "\063\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071" +
    "\uff87\072\uff87\110\uff87\001\002\000\016\003\uff45\047\uff45" +
    "\073\154\074\153\106\uff45\111\uff45\001\002\000\060\003" +
    "\uffca\010\uffca\023\uffca\047\uffca\052\uffca\056\uffca\060\uffca" +
    "\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\106\uffca" +
    "\107\uffca\110\uffca\111\uffca\001\002\000\060\003\uffcc\010" +
    "\uffcc\023\uffcc\047\uffcc\052\uffcc\056\uffcc\060\uffcc\061\uffcc" +
    "\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070" +
    "\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\106\uffcc\107\uffcc" +
    "\110\uffcc\111\uffcc\001\002\000\014\027\032\046\113\052" +
    "\037\055\033\057\031\001\002\000\060\003\uffcb\010\uffcb" +
    "\023\uffcb\047\uffcb\052\uffcb\056\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\074\uffcb\106\uffcb\107\uffcb\110" +
    "\uffcb\111\uffcb\001\002\000\004\105\101\001\002\000\070" +
    "\003\uff65\010\uff65\011\uff65\023\uff65\046\uff65\047\uff65\050" +
    "\uff65\051\uff65\052\uff65\056\uff65\060\uff65\061\uff65\062\uff65" +
    "\063\uff65\064\uff65\065\uff65\066\uff65\067\uff65\070\uff65\071" +
    "\uff65\072\uff65\073\uff65\074\uff65\106\uff65\107\uff65\110\uff65" +
    "\111\uff65\001\002\000\044\003\uff42\047\uff42\061\uff42\062" +
    "\uff42\063\uff42\064\uff42\065\uff42\066\uff42\067\uff42\070\073" +
    "\071\072\072\074\073\uff42\074\uff42\106\uff42\110\077\111" +
    "\uff42\001\002\000\010\003\uff48\106\uff48\111\uff48\001\002" +
    "\000\024\027\032\032\063\045\061\052\037\053\064\054" +
    "\070\055\033\057\031\105\067\001\002\000\070\003\uff64" +
    "\010\uff64\011\uff64\023\uff64\046\uff64\047\uff64\050\uff64\051" +
    "\uff64\052\uff64\056\uff64\060\uff64\061\uff64\062\uff64\063\uff64" +
    "\064\uff64\065\uff64\066\uff64\067\uff64\070\uff64\071\uff64\072" +
    "\uff64\073\uff64\074\uff64\106\uff64\107\uff64\110\uff64\111\uff64" +
    "\001\002\000\014\070\073\071\072\072\074\106\076\110" +
    "\077\001\002\000\024\027\uff5f\032\uff5f\045\uff5f\052\uff5f" +
    "\053\uff5f\054\uff5f\055\uff5f\057\uff5f\105\uff5f\001\002\000" +
    "\024\027\uff60\032\uff60\045\uff60\052\uff60\053\uff60\054\uff60" +
    "\055\uff60\057\uff60\105\uff60\001\002\000\024\027\uff5d\032" +
    "\uff5d\045\uff5d\052\uff5d\053\uff5d\054\uff5d\055\uff5d\057\uff5d" +
    "\105\uff5d\001\002\000\024\027\032\032\063\045\061\052" +
    "\037\053\064\054\070\055\033\057\031\105\067\001\002" +
    "\000\060\003\uffcd\010\uffcd\023\uffcd\047\uffcd\052\uffcd\056" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074" +
    "\uffcd\106\uffcd\107\uffcd\110\uffcd\111\uffcd\001\002\000\024" +
    "\027\uff5e\032\uff5e\045\uff5e\052\uff5e\053\uff5e\054\uff5e\055" +
    "\uff5e\057\uff5e\105\uff5e\001\002\000\060\003\uffc9\010\uffc9" +
    "\023\uffc9\047\uffc9\052\uffc9\056\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\073" +
    "\071\072\072\074\073\uffc9\074\uffc9\106\uffc9\107\uffc9\110" +
    "\077\111\uffc9\001\002\000\010\052\037\055\033\057\031" +
    "\001\002\000\004\107\105\001\002\000\004\106\104\001" +
    "\002\000\060\003\uffb2\010\uffb2\023\uffb2\047\uffb2\052\uffb2" +
    "\056\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2" +
    "\074\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2\001\002\000" +
    "\006\053\106\055\107\001\002\000\004\106\uff8c\001\002" +
    "\000\004\106\uff8b\001\002\000\010\046\113\050\uff7d\051" +
    "\uff7d\001\002\000\004\046\113\001\002\000\004\047\142" +
    "\001\002\000\024\027\141\032\063\045\061\052\133\053" +
    "\135\054\140\055\137\057\134\105\067\001\002\000\006" +
    "\050\115\051\117\001\002\000\022\027\032\045\061\052" +
    "\037\053\064\054\070\055\033\057\031\105\121\001\002" +
    "\000\004\051\120\001\002\000\070\003\uff82\010\uff82\011" +
    "\uff82\023\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82" +
    "\056\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065" +
    "\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82" +
    "\074\uff82\106\uff82\107\uff82\110\uff82\111\uff82\001\002\000" +
    "\070\003\uff81\010\uff81\011\uff81\023\uff81\046\uff81\047\uff81" +
    "\050\uff81\051\uff81\052\uff81\056\uff81\060\uff81\061\uff81\062" +
    "\uff81\063\uff81\064\uff81\065\uff81\066\uff81\067\uff81\070\uff81" +
    "\071\uff81\072\uff81\073\uff81\074\uff81\106\uff81\107\uff81\110" +
    "\uff81\111\uff81\001\002\000\022\027\032\045\061\052\037" +
    "\053\064\054\070\055\033\057\031\105\121\001\002\000" +
    "\030\003\uff69\011\uff69\046\uff69\050\uff69\051\uff69\070\uff69" +
    "\071\uff69\072\uff69\106\uff69\107\uff69\110\uff69\001\002\000" +
    "\030\003\uff68\011\uff68\046\uff68\050\uff68\051\uff68\070\uff68" +
    "\071\uff68\072\uff68\106\uff68\107\uff68\110\uff68\001\002\000" +
    "\030\003\uff67\011\uff67\046\uff67\050\uff67\051\uff67\070\uff67" +
    "\071\uff67\072\uff67\106\uff67\107\uff67\110\uff67\001\002\000" +
    "\014\051\uff78\070\073\071\072\072\074\110\077\001\002" +
    "\000\022\027\032\045\061\052\037\053\064\054\070\055" +
    "\033\057\031\105\121\001\002\000\030\003\uff61\011\uff61" +
    "\046\uff61\050\uff61\051\uff61\070\073\071\072\072\074\106" +
    "\uff61\107\uff61\110\077\001\002\000\014\070\073\071\072" +
    "\072\074\106\131\110\077\001\002\000\030\003\uff62\011" +
    "\uff62\046\uff62\050\uff62\051\uff62\070\uff62\071\uff62\072\uff62" +
    "\106\uff62\107\uff62\110\uff62\001\002\000\004\047\uff7a\001" +
    "\002\000\034\025\uff37\047\uff35\061\uff88\062\uff88\063\uff88" +
    "\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88\072" +
    "\uff88\110\uff88\001\002\000\034\025\uff36\047\uff31\061\uff87" +
    "\062\uff87\063\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070" +
    "\uff87\071\uff87\072\uff87\110\uff87\001\002\000\032\047\uff34" +
    "\061\uff65\062\uff65\063\uff65\064\uff65\065\uff65\066\uff65\067" +
    "\uff65\070\uff65\071\uff65\072\uff65\110\uff65\001\002\000\004" +
    "\047\uff7b\001\002\000\032\047\uff32\061\uff86\062\uff86\063" +
    "\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86" +
    "\072\uff86\110\uff86\001\002\000\032\047\uff33\061\uff64\062" +
    "\uff64\063\uff64\064\uff64\065\uff64\066\uff64\067\uff64\070\uff64" +
    "\071\uff64\072\uff64\110\uff64\001\002\000\032\047\uff30\061" +
    "\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89" +
    "\070\uff89\071\uff89\072\uff89\110\uff89\001\002\000\022\027" +
    "\032\045\061\052\037\053\064\054\070\055\033\057\031" +
    "\105\121\001\002\000\010\046\uff7c\050\uff7c\051\uff7c\001" +
    "\002\000\020\046\uff79\050\uff79\051\uff79\070\073\071\072" +
    "\072\074\110\077\001\002\000\006\050\115\051\147\001" +
    "\002\000\004\051\150\001\002\000\070\003\uff80\010\uff80" +
    "\011\uff80\023\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052" +
    "\uff80\056\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80" +
    "\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80\073" +
    "\uff80\074\uff80\106\uff80\107\uff80\110\uff80\111\uff80\001\002" +
    "\000\070\003\uff7f\010\uff7f\011\uff7f\023\uff7f\046\uff7f\047" +
    "\uff7f\050\uff7f\051\uff7f\052\uff7f\056\uff7f\060\uff7f\061\uff7f" +
    "\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070" +
    "\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\106\uff7f\107\uff7f" +
    "\110\uff7f\111\uff7f\001\002\000\006\050\uff7e\051\uff7e\001" +
    "\002\000\024\027\032\032\063\045\061\052\054\053\064" +
    "\054\070\055\033\057\055\105\067\001\002\000\024\027" +
    "\uff27\032\uff27\045\uff27\052\uff27\053\uff27\054\uff27\055\uff27" +
    "\057\uff27\105\uff27\001\002\000\024\027\uff28\032\uff28\045" +
    "\uff28\052\uff28\053\uff28\054\uff28\055\uff28\057\uff28\105\uff28" +
    "\001\002\000\012\003\uff46\047\uff46\106\uff46\111\uff46\001" +
    "\002\000\024\027\uff2a\032\uff2a\045\uff2a\052\uff2a\053\uff2a" +
    "\054\uff2a\055\uff2a\057\uff2a\105\uff2a\001\002\000\024\027" +
    "\uff2b\032\uff2b\045\uff2b\052\uff2b\053\uff2b\054\uff2b\055\uff2b" +
    "\057\uff2b\105\uff2b\001\002\000\024\027\uff2c\032\uff2c\045" +
    "\uff2c\052\uff2c\053\uff2c\054\uff2c\055\uff2c\057\uff2c\105\uff2c" +
    "\001\002\000\024\027\032\032\063\045\061\052\037\053" +
    "\064\054\070\055\033\057\031\105\067\001\002\000\024" +
    "\027\uff29\032\uff29\045\uff29\052\uff29\053\uff29\054\uff29\055" +
    "\uff29\057\uff29\105\uff29\001\002\000\024\027\uff2d\032\uff2d" +
    "\045\uff2d\052\uff2d\053\uff2d\054\uff2d\055\uff2d\057\uff2d\105" +
    "\uff2d\001\002\000\024\027\uff2e\032\uff2e\045\uff2e\052\uff2e" +
    "\053\uff2e\054\uff2e\055\uff2e\057\uff2e\105\uff2e\001\002\000" +
    "\024\027\uff2f\032\uff2f\045\uff2f\052\uff2f\053\uff2f\054\uff2f" +
    "\055\uff2f\057\uff2f\105\uff2f\001\002\000\016\003\uff44\047" +
    "\uff44\073\uff44\074\uff44\106\uff44\111\uff44\001\002\000\004" +
    "\105\170\001\002\000\020\004\017\027\176\052\205\053" +
    "\172\054\204\055\202\057\175\001\002\000\016\003\uff43" +
    "\047\uff43\073\uff43\074\uff43\106\uff43\111\uff43\001\002\000" +
    "\034\011\uff34\013\uff34\014\uff34\015\uff34\016\uff34\020\uff34" +
    "\021\uff34\061\uff34\073\uff34\074\uff34\106\uff34\107\uff34\111" +
    "\uff34\001\002\000\004\106\270\001\002\000\012\027\032" +
    "\052\037\055\033\057\031\001\002\000\034\011\uff31\013" +
    "\uff31\014\uff31\015\uff31\016\uff31\020\uff31\021\uff31\061\uff31" +
    "\073\uff31\074\uff31\106\uff31\107\uff31\111\uff31\001\002\000" +
    "\034\011\uff30\013\uff30\014\uff30\015\uff30\016\uff30\020\uff30" +
    "\021\uff30\061\uff30\073\uff30\074\uff30\106\uff30\107\uff30\111" +
    "\uff30\001\002\000\004\106\uff40\001\002\000\006\106\uff38" +
    "\107\265\001\002\000\004\106\uff3f\001\002\000\034\011" +
    "\uff32\013\uff32\014\uff32\015\uff32\016\uff32\020\uff32\021\uff32" +
    "\061\uff32\073\uff32\074\uff32\106\uff32\107\uff32\111\uff32\001" +
    "\002\000\004\010\206\001\002\000\034\011\uff33\013\uff33" +
    "\014\uff33\015\uff33\016\uff33\020\uff33\021\uff33\061\uff33\073" +
    "\uff33\074\uff33\106\uff33\107\uff33\111\uff33\001\002\000\034" +
    "\011\uff35\013\uff35\014\uff35\015\uff35\016\uff35\020\uff35\021" +
    "\uff35\061\uff35\073\uff35\074\uff35\106\uff35\107\uff35\111\uff35" +
    "\001\002\000\004\052\uff4e\001\002\000\004\052\227\001" +
    "\002\000\022\011\044\013\222\014\213\015\216\016\214" +
    "\020\220\021\211\106\uff3e\001\002\000\004\052\227\001" +
    "\002\000\004\052\227\001\002\000\006\017\243\021\242" +
    "\001\002\000\004\017\240\001\002\000\024\011\ufff3\013" +
    "\222\014\213\015\216\016\214\020\220\021\211\106\ufff3" +
    "\111\ufff3\001\002\000\006\017\235\021\234\001\002\000" +
    "\004\106\uff3d\001\002\000\004\021\233\001\002\000\006" +
    "\011\044\106\uff3c\001\002\000\004\021\223\001\002\000" +
    "\004\052\227\001\002\000\024\011\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\020\ufff2\021\ufff2\106\ufff2\111\ufff2\001" +
    "\002\000\034\003\uff4d\006\uff4d\011\uff4d\013\uff4d\014\uff4d" +
    "\015\uff4d\016\uff4d\020\uff4d\021\uff4d\024\uff4d\106\uff4d\107" +
    "\uff4d\111\uff4d\001\002\000\034\003\uff4c\006\uff4c\011\uff4c" +
    "\013\uff4c\014\uff4c\015\uff4c\016\uff4c\020\uff4c\021\uff4c\024" +
    "\uff4c\106\uff4c\107\uff4c\111\uff4c\001\002\000\040\003\uff4b" +
    "\006\uff4b\011\uff4b\013\uff4b\014\uff4b\015\uff4b\016\uff4b\020" +
    "\uff4b\021\uff4b\024\uff4b\052\231\056\230\106\uff4b\107\uff4b" +
    "\111\uff4b\001\002\000\034\003\uff49\006\uff49\011\uff49\013" +
    "\uff49\014\uff49\015\uff49\016\uff49\020\uff49\021\uff49\024\uff49" +
    "\106\uff49\107\uff49\111\uff49\001\002\000\034\003\uff4a\006" +
    "\uff4a\011\uff4a\013\uff4a\014\uff4a\015\uff4a\016\uff4a\020\uff4a" +
    "\021\uff4a\024\uff4a\106\uff4a\107\uff4a\111\uff4a\001\002\000" +
    "\004\106\uff3b\001\002\000\004\052\uffee\001\002\000\004" +
    "\052\uffec\001\002\000\004\021\236\001\002\000\004\052" +
    "\uffea\001\002\000\010\011\ufff4\106\ufff4\111\ufff4\001\002" +
    "\000\004\021\241\001\002\000\004\052\uffe9\001\002\000" +
    "\004\052\uffed\001\002\000\004\021\244\001\002\000\004" +
    "\052\uffeb\001\002\000\004\024\247\001\002\000\024\011" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\020\uffef\021\uffef" +
    "\106\uffef\111\uffef\001\002\000\016\027\176\052\205\053" +
    "\172\054\204\055\202\057\175\001\002\000\024\011\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\021\uffe8\106" +
    "\uffe8\111\uffe8\001\002\000\030\011\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\020\uffe6\021\uffe6\073\154\074\153\106" +
    "\uffe6\111\uffe6\001\002\000\004\061\253\001\002\000\016" +
    "\027\176\052\205\053\172\054\204\055\202\057\175\001" +
    "\002\000\030\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\020\uffe5\021\uffe5\073\uffe5\074\uffe5\106\uffe5\111\uffe5\001" +
    "\002\000\016\027\176\052\205\053\172\054\204\055\202" +
    "\057\175\001\002\000\024\011\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\020\uffe7\021\uffe7\106\uffe7\111\uffe7\001\002" +
    "\000\026\011\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020" +
    "\ufff1\021\ufff1\024\247\106\ufff1\111\ufff1\001\002\000\024" +
    "\011\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\021" +
    "\ufff0\106\ufff0\111\ufff0\001\002\000\026\011\uff4f\013\uff4f" +
    "\014\uff4f\015\uff4f\016\uff4f\020\uff4f\021\uff4f\106\uff4f\107" +
    "\263\111\uff4f\001\002\000\024\011\uff51\013\uff51\014\uff51" +
    "\015\uff51\016\uff51\020\uff51\021\uff51\106\uff51\111\uff51\001" +
    "\002\000\004\052\227\001\002\000\024\011\uff50\013\uff50" +
    "\014\uff50\015\uff50\016\uff50\020\uff50\021\uff50\106\uff50\111" +
    "\uff50\001\002\000\016\027\176\052\205\053\172\054\204" +
    "\055\202\057\175\001\002\000\004\106\uff39\001\002\000" +
    "\004\010\uff3a\001\002\000\016\003\uff41\047\uff41\073\uff41" +
    "\074\uff41\106\uff41\111\uff41\001\002\000\016\002\ufffa\003" +
    "\ufffa\004\ufffa\005\ufffa\007\ufffa\012\ufffa\001\002\000\016" +
    "\002\uff76\003\uff76\004\uff76\005\uff76\007\uff76\012\uff76\001" +
    "\002\000\016\002\uff77\003\uff77\004\uff77\005\uff77\007\uff77" +
    "\012\uff77\001\002\000\022\027\uff57\045\uff57\052\uff57\053" +
    "\uff57\054\uff57\055\uff57\057\uff57\105\uff57\001\002\000\022" +
    "\027\uff58\045\uff58\052\uff58\053\uff58\054\uff58\055\uff58\057" +
    "\uff58\105\uff58\001\002\000\022\027\uff5c\045\uff5c\052\uff5c" +
    "\053\uff5c\054\uff5c\055\uff5c\057\uff5c\105\uff5c\001\002\000" +
    "\022\027\uff54\045\uff54\052\uff54\053\uff54\054\uff54\055\uff54" +
    "\057\uff54\105\uff54\001\002\000\022\027\uff56\045\uff56\052" +
    "\uff56\053\uff56\054\uff56\055\uff56\057\uff56\105\uff56\001\002" +
    "\000\022\027\uff5a\045\uff5a\052\uff5a\053\uff5a\054\uff5a\055" +
    "\uff5a\057\uff5a\105\uff5a\001\002\000\022\027\uff59\045\uff59" +
    "\052\uff59\053\uff59\054\uff59\055\uff59\057\uff59\105\uff59\001" +
    "\002\000\022\027\032\045\061\052\037\053\064\054\070" +
    "\055\033\057\031\105\121\001\002\000\022\027\uff5b\045" +
    "\uff5b\052\uff5b\053\uff5b\054\uff5b\055\uff5b\057\uff5b\105\uff5b" +
    "\001\002\000\022\027\uff55\045\uff55\052\uff55\053\uff55\054" +
    "\uff55\055\uff55\057\uff55\105\uff55\001\002\000\020\003\uff6b" +
    "\011\uff6b\070\073\071\072\072\074\107\uff6b\110\077\001" +
    "\002\000\010\003\uff6a\011\uff6a\107\uff6a\001\002\000\006" +
    "\003\uff71\006\uff71\001\002\000\016\002\uff73\003\uff73\004" +
    "\uff73\005\uff73\007\uff73\012\uff73\001\002\000\022\010\uff85" +
    "\023\uff85\052\uff85\056\uff85\060\uff85\105\uff85\106\uff85\107" +
    "\uff85\001\002\000\004\004\uffe4\001\002\000\006\023\320" +
    "\105\321\001\002\000\022\010\uff83\023\uff83\052\uff83\056" +
    "\uff83\060\uff83\105\uff83\106\uff83\107\uff83\001\002\000\022" +
    "\010\uff84\023\uff84\052\uff84\056\uff84\060\uff84\105\uff84\106" +
    "\uff84\107\uff84\001\002\000\004\004\uffe3\001\002\000\004" +
    "\105\u016c\001\002\000\056\022\362\027\032\030\367\031" +
    "\361\032\063\033\336\034\333\035\352\036\372\037\374" +
    "\040\345\041\370\042\337\043\343\044\373\045\061\052" +
    "\037\053\064\054\070\055\033\057\031\105\067\001\002" +
    "\000\004\023\323\001\002\000\004\105\324\001\002\000" +
    "\004\004\017\001\002\000\004\010\206\001\002\000\004" +
    "\106\327\001\002\000\006\004\uffdf\107\330\001\002\000" +
    "\010\052\316\056\312\060\315\001\002\000\004\105\321" +
    "\001\002\000\004\004\uffe0\001\002\000\004\105\u0164\001" +
    "\002\000\020\010\uffc1\023\uffc1\052\uffc1\056\uffc1\060\uffc1" +
    "\106\uffc1\107\uffc1\001\002\000\020\010\uffbb\023\uffbb\052" +
    "\uffbb\056\uffbb\060\uffbb\106\uffbb\107\uffbb\001\002\000\004" +
    "\105\u015c\001\002\000\004\105\u0157\001\002\000\020\010" +
    "\uffbd\023\uffbd\052\uffbd\056\uffbd\060\uffbd\106\uffbd\107\uffbd" +
    "\001\002\000\020\010\uffc3\023\uffc3\052\uffc3\056\uffc3\060" +
    "\uffc3\106\uffc3\107\uffc3\001\002\000\020\010\uffd0\023\uffd0" +
    "\052\uffd0\056\uffd0\060\uffd0\106\uffd0\107\uffd0\001\002\000" +
    "\004\105\u014d\001\002\000\004\106\u014c\001\002\000\004" +
    "\105\u0146\001\002\000\020\010\uffc7\023\uffc7\052\uffc7\056" +
    "\uffc7\060\uffc7\106\uffc7\107\uffc7\001\002\000\020\010\uffc5" +
    "\023\uffc5\052\uffc5\056\uffc5\060\uffc5\106\uffc5\107\uffc5\001" +
    "\002\000\020\010\uffbf\023\uffbf\052\uffbf\056\uffbf\060\uffbf" +
    "\106\uffbf\107\uffbf\001\002\000\020\010\uffc8\023\uffc8\052" +
    "\uffc8\056\uffc8\060\uffc8\106\uffc8\107\uffc8\001\002\000\004" +
    "\105\u013e\001\002\000\020\010\uffd3\023\uffd3\052\uffd3\056" +
    "\uffd3\060\uffd3\106\uffd3\107\uffd3\001\002\000\020\010\uffbc" +
    "\023\uffbc\052\uffbc\056\uffbc\060\uffbc\106\uffbc\107\uffbc\001" +
    "\002\000\020\010\uffd5\023\u013a\052\316\056\312\060\315" +
    "\106\uffd5\107\uffd5\001\002\000\020\010\uffc6\023\uffc6\052" +
    "\uffc6\056\uffc6\060\uffc6\106\uffc6\107\uffc6\001\002\000\030" +
    "\010\uffd4\023\uffd4\052\uffd4\056\uffd4\060\uffd4\070\073\071" +
    "\072\072\074\106\uffd4\107\uffd4\110\077\001\002\000\020" +
    "\010\uffd2\023\uffd2\052\uffd2\056\uffd2\060\uffd2\106\uffd2\107" +
    "\uffd2\001\002\000\004\105\u0130\001\002\000\004\105\u012c" +
    "\001\002\000\020\010\uffd1\023\uffd1\052\uffd1\056\uffd1\060" +
    "\uffd1\106\uffd1\107\uffd1\001\002\000\020\010\uffc0\023\uffc0" +
    "\052\uffc0\056\uffc0\060\uffc0\106\uffc0\107\uffc0\001\002\000" +
    "\020\010\uffc2\023\uffc2\052\uffc2\056\uffc2\060\uffc2\106\uffc2" +
    "\107\uffc2\001\002\000\020\010\uffc4\023\uffc4\052\uffc4\056" +
    "\uffc4\060\uffc4\106\uffc4\107\uffc4\001\002\000\004\105\u0127" +
    "\001\002\000\004\105\u0122\001\002\000\010\010\uffd7\106" +
    "\uffd7\107\u0120\001\002\000\004\105\u011a\001\002\000\004" +
    "\105\u0103\001\002\000\004\105\375\001\002\000\004\055" +
    "\377\001\002\000\004\106\u0102\001\002\000\006\106\uffa2" +
    "\107\u0100\001\002\000\004\055\377\001\002\000\004\106" +
    "\uffa3\001\002\000\020\010\uffb6\023\uffb6\052\uffb6\056\uffb6" +
    "\060\uffb6\106\uffb6\107\uffb6\001\002\000\004\053\u0104\001" +
    "\002\000\020\061\u010c\062\u010b\063\u010a\064\u0108\065\u0106" +
    "\066\u0105\067\u0109\001\002\000\004\053\uff8e\001\002\000" +
    "\004\053\uff8f\001\002\000\004\053\u010d\001\002\000\004" +
    "\053\uff90\001\002\000\004\053\uff8d\001\002\000\004\053" +
    "\uff91\001\002\000\004\053\uff92\001\002\000\004\053\uff93" +
    "\001\002\000\004\107\u010e\001\002\000\014\026\u010f\027" +
    "\u0112\052\037\055\033\057\031\001\002\000\012\027\u0119" +
    "\052\037\055\033\057\031\001\002\000\006\106\uffaa\107" +
    "\uffaa\001\002\000\004\107\u0113\001\002\000\006\106\uffab" +
    "\107\uffab\001\002\000\014\026\u010f\027\u0112\052\037\055" +
    "\033\057\031\001\002\000\004\106\u0115\001\002\000\004" +
    "\023\u0116\001\002\000\010\052\316\056\312\060\315\001" +
    "\002\000\020\010\uffa8\023\uffa8\052\uffa8\056\uffa8\060\uffa8" +
    "\106\uffa8\107\uffa8\001\002\000\006\106\uffad\107\uffad\001" +
    "\002\000\006\106\uffac\107\uffac\001\002\000\012\027\032" +
    "\052\037\055\033\057\031\001\002\000\004\106\uff98\001" +
    "\002\000\004\106\u011d\001\002\000\004\023\u011e\001\002" +
    "\000\004\055\u011f\001\002\000\020\010\uffb7\023\uffb7\052" +
    "\uffb7\056\uffb7\060\uffb7\106\uffb7\107\uffb7\001\002\000\056" +
    "\022\362\027\032\030\367\031\361\032\063\033\336\034" +
    "\333\035\352\036\372\037\374\040\345\041\370\042\337" +
    "\043\343\044\373\045\061\052\037\053\064\054\070\055" +
    "\033\057\031\105\067\001\002\000\006\010\uffd8\106\uffd8" +
    "\001\002\000\012\052\316\055\u0124\056\312\060\315\001" +
    "\002\000\004\106\uff9f\001\002\000\004\106\uffa0\001\002" +
    "\000\004\106\u0126\001\002\000\020\010\uffb3\023\uffb3\052" +
    "\uffb3\056\uffb3\060\uffb3\106\uffb3\107\uffb3\001\002\000\016" +
    "\026\u010f\027\u0112\052\037\055\033\057\031\110\u0129\001" +
    "\002\000\004\106\u012b\001\002\000\004\106\u012a\001\002" +
    "\000\020\010\uffb0\023\uffb0\052\uffb0\056\uffb0\060\uffb0\106" +
    "\uffb0\107\uffb0\001\002\000\020\010\uffb1\023\uffb1\052\uffb1" +
    "\056\uffb1\060\uffb1\106\uffb1\107\uffb1\001\002\000\004\106" +
    "\u012d\001\002\000\030\010\uff9a\023\uff9a\052\uff9a\056\uff9a" +
    "\060\uff9a\070\073\071\072\072\074\106\uff9a\107\uff9a\110" +
    "\077\001\002\000\004\053\u012f\001\002\000\020\010\uff99" +
    "\023\uff99\052\uff99\056\uff99\060\uff99\106\uff99\107\uff99\001" +
    "\002\000\016\026\u0131\027\u0134\052\037\055\033\057\031" +
    "\110\u0135\001\002\000\012\027\u0139\052\037\055\033\057" +
    "\031\001\002\000\004\106\uff94\001\002\000\004\106\u0137" +
    "\001\002\000\004\106\uff95\001\002\000\004\106\u0136\001" +
    "\002\000\020\010\uffae\023\uffae\052\uffae\056\uffae\060\uffae" +
    "\106\uffae\107\uffae\001\002\000\020\010\uffaf\023\uffaf\052" +
    "\uffaf\056\uffaf\060\uffaf\106\uffaf\107\uffaf\001\002\000\004" +
    "\106\uff97\001\002\000\004\106\uff96\001\002\000\010\052" +
    "\316\056\312\060\315\001\002\000\010\010\uffcf\106\uffcf" +
    "\107\uffcf\001\002\000\010\010\uffd6\106\uffd6\107\uffd6\001" +
    "\002\000\010\010\uffce\106\uffce\107\uffce\001\002\000\004" +
    "\055\u013f\001\002\000\004\107\u0142\001\002\000\004\106" +
    "\u0141\001\002\000\020\010\uffb8\023\uffb8\052\uffb8\056\uffb8" +
    "\060\uffb8\106\uffb8\107\uffb8\001\002\000\004\053\u0143\001" +
    "\002\000\004\107\u0144\001\002\000\004\055\u0145\001\002" +
    "\000\004\106\uff9b\001\002\000\004\055\u0148\001\002\000" +
    "\004\106\u0149\001\002\000\004\106\uffa1\001\002\000\004" +
    "\023\u014a\001\002\000\010\052\316\056\312\060\315\001" +
    "\002\000\020\010\uffb5\023\uffb5\052\uffb5\056\uffb5\060\uffb5" +
    "\106\uffb5\107\uffb5\001\002\000\004\023\uffde\001\002\000" +
    "\004\053\u014e\001\002\000\004\107\u014f\001\002\000\014" +
    "\026\u010f\027\u0112\052\037\055\033\057\031\001\002\000" +
    "\004\106\u0154\001\002\000\006\106\uffa6\107\u0152\001\002" +
    "\000\014\026\u010f\027\u0112\052\037\055\033\057\031\001" +
    "\002\000\004\106\uffa7\001\002\000\004\023\u0155\001\002" +
    "\000\010\052\316\056\312\060\315\001\002\000\020\010" +
    "\uffa9\023\uffa9\052\uffa9\056\uffa9\060\uffa9\106\uffa9\107\uffa9" +
    "\001\002\000\012\052\316\055\u015a\056\312\060\315\001" +
    "\002\000\004\106\u015b\001\002\000\004\106\uff9d\001\002" +
    "\000\004\106\uff9e\001\002\000\020\010\uffb4\023\uffb4\052" +
    "\uffb4\056\uffb4\060\uffb4\106\uffb4\107\uffb4\001\002\000\004" +
    "\055\u015e\001\002\000\004\106\u0161\001\002\000\006\106" +
    "\uffa4\107\u015f\001\002\000\004\055\u015e\001\002\000\004" +
    "\106\uffa5\001\002\000\004\023\u0162\001\002\000\004\055" +
    "\u0163\001\002\000\020\010\uffba\023\uffba\052\uffba\056\uffba" +
    "\060\uffba\106\uffba\107\uffba\001\002\000\004\055\u0165\001" +
    "\002\000\004\107\u0168\001\002\000\004\106\u0167\001\002" +
    "\000\020\010\uffb9\023\uffb9\052\uffb9\056\uffb9\060\uffb9\106" +
    "\uffb9\107\uffb9\001\002\000\004\053\u0169\001\002\000\004" +
    "\107\u016a\001\002\000\004\055\u016b\001\002\000\004\106" +
    "\uff9c\001\002\000\004\004\017\001\002\000\004\010\206" +
    "\001\002\000\004\106\u016f\001\002\000\006\004\uffe1\107" +
    "\u0170\001\002\000\010\052\316\056\312\060\315\001\002" +
    "\000\004\004\uffe2\001\002\000\004\023\320\001\002\000" +
    "\016\002\uff52\003\uff52\004\uff52\005\uff52\007\uff52\012\uff52" +
    "\001\002\000\004\052\227\001\002\000\004\011\044\001" +
    "\002\000\004\111\271\001\002\000\016\002\uff53\003\uff53" +
    "\004\uff53\005\uff53\007\uff53\012\uff53\001\002\000\004\002" +
    "\001\001\002\000\016\002\000\003\000\004\000\005\000" +
    "\007\000\012\000\001\002\000\016\002\ufff5\003\ufff5\004" +
    "\ufff5\005\ufff5\007\ufff5\012\ufff5\001\002\000\022\011\044" +
    "\013\222\014\213\015\216\016\214\020\220\021\211\111" +
    "\271\001\002\000\016\002\ufff9\003\ufff9\004\ufff9\005\ufff9" +
    "\007\ufff9\012\ufff9\001\002\000\004\111\271\001\002\000" +
    "\006\011\044\111\271\001\002\000\004\111\271\001\002" +
    "\000\016\002\ufff7\003\ufff7\004\ufff7\005\ufff7\007\ufff7\012" +
    "\ufff7\001\002\000\016\002\ufff6\003\ufff6\004\ufff6\005\ufff6" +
    "\007\ufff6\012\ufff6\001\002\000\016\002\ufff8\003\ufff8\004" +
    "\ufff8\005\ufff8\007\ufff8\012\ufff8\001\002\000\004\010\uffdd" +
    "\001\002\000\004\010\uffdb\001\002\000\056\022\362\027" +
    "\032\030\367\031\361\032\063\033\336\034\333\035\352" +
    "\036\372\037\374\040\345\041\370\042\337\043\343\044" +
    "\373\045\061\052\037\053\064\054\070\055\033\057\031" +
    "\105\067\001\002\000\004\010\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0184\000\032\002\003\003\013\012\011\013\014\015" +
    "\020\016\010\017\006\023\004\127\007\130\022\132\023" +
    "\143\021\001\001\000\072\025\370\026\352\027\341\030" +
    "\357\031\362\032\057\033\350\035\353\037\334\041\345" +
    "\043\355\045\346\047\365\051\347\053\340\055\363\057" +
    "\364\061\333\063\047\065\337\070\u0183\071\052\072\037" +
    "\115\354\117\356\120\061\121\046\133\056\001\001\000" +
    "\006\004\206\066\u017a\001\001\000\002\001\001\000\010" +
    "\002\003\015\u0179\023\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\003\003\013\013\u0178\015\020" +
    "\016\010\017\006\023\004\127\007\130\022\132\023\143" +
    "\021\001\001\000\002\001\001\000\010\020\312\021\316" +
    "\073\313\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\307\010\224\011\225\001\001\000" +
    "\004\131\024\001\001\000\012\071\027\072\037\134\034" +
    "\135\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\142\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\045\067" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\071\027\072\037\134\041\135\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\272\001\001\000\032\032\057\063\047\071" +
    "\052\072\037\074\050\107\065\110\055\114\051\117\064" +
    "\120\061\121\046\133\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\112\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\111\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\071\110\072\037\122\113\123\107\125\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\141\074\001\001\000\002\001\001\000\022\032" +
    "\057\063\047\071\052\072\037\117\070\120\061\121\046" +
    "\133\056\001\001\000\002\001\001\000\004\141\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\032\057\063\047\071\052\072\037\117\077\120" +
    "\061\121\046\133\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\141\074\001\001\000\006\064\102\072" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\122\150\123\107\125\111\001\001\000\010" +
    "\122\144\123\107\125\111\001\001\000\004\126\142\001" +
    "\001\000\034\032\057\063\047\071\052\072\037\074\050" +
    "\107\135\110\055\113\131\114\051\117\064\120\061\121" +
    "\046\133\056\001\001\000\004\124\115\001\001\000\020" +
    "\071\052\072\037\121\046\133\123\136\124\137\121\140" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\071\052\072\037\121\046\133\123\136" +
    "\127\137\121\140\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\141\125\001\001\000" +
    "\020\071\052\072\037\121\046\133\123\136\126\137\121" +
    "\140\122\001\001\000\004\141\125\001\001\000\004\141" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\071\052\072\037\121\046\133\123\136\143\137" +
    "\121\140\122\001\001\000\002\001\001\000\004\141\125" +
    "\001\001\000\004\124\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\032\057\063\047\071\052\072\037\074\050\107\154\110" +
    "\055\114\051\117\064\120\061\121\046\133\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\032\057\063\047\071\052\072\037\114\165\117\064\120" +
    "\061\121\046\133\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\170\001\001\000\016\002\173\024\202" +
    "\076\172\077\176\100\200\113\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\071\266" +
    "\072\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\206\066\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\260" +
    "\007\261\010\224\011\225\001\001\000\014\005\045\067" +
    "\216\101\220\102\214\106\211\001\001\000\010\006\256" +
    "\010\224\011\225\001\001\000\010\006\244\010\224\011" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\101\236\102\214\106\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\045\067\231" +
    "\001\001\000\002\001\001\000\010\006\223\010\224\011" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\104\245\001\001\000" +
    "\002\001\001\000\010\103\250\105\247\113\251\001\001" +
    "\000\002\001\001\000\004\111\254\001\001\000\002\001" +
    "\001\000\004\113\253\001\001\000\002\001\001\000\010" +
    "\103\250\105\255\113\251\001\001\000\002\001\001\000" +
    "\004\104\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\260\007\263\010\224\011" +
    "\225\001\001\000\002\001\001\000\006\077\265\113\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\071\052\072\037\121\046\133\123\136" +
    "\305\137\121\140\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\141\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\025\370\026\352\027\341\030\357\031\362\032\057\033" +
    "\350\035\353\037\334\041\345\043\355\045\346\047\365" +
    "\051\347\053\340\055\363\057\364\061\333\063\047\065" +
    "\337\070\343\071\052\072\037\115\354\117\356\120\061" +
    "\121\046\133\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\003\023\324\001\001\000\006\004\206" +
    "\066\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\331\073\330\001\001\000\004\022\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\073\u013a\116\u013b\001\001\000\002\001\001\000\004\141" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\375\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u0106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\u0110\072\u010f\001\001\000\004\072\u0117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\u0113\072\u010f\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\073\u0116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\052\u011b\071\u011a" +
    "\072\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\025\370\026\352\027\341\030\357\031\362\032\057\033" +
    "\350\035\353\037\334\041\345\043\355\045\346\047\365" +
    "\051\347\053\340\055\363\057\364\061\333\063\047\065" +
    "\337\070\u0120\071\052\072\037\115\354\117\356\120\061" +
    "\121\046\133\056\001\001\000\002\001\001\000\006\060" +
    "\u0124\073\u0122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\u0127\072" +
    "\u010f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\141" +
    "\u012d\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\u0132\072\u0131\001\001\000\004\072\u0137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\073\u013c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u013f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\u0146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\u014a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\u0150\036\u014f\072" +
    "\u010f\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\u0150\036\u0152\072\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\073\u0155\001\001\000\002\001\001" +
    "\000\006\062\u0157\073\u0158\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\u015c\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\u015f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u0165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\003\023\u016c\001\001\000\006" +
    "\004\206\066\u016d\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\u0170\073\u0171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\u0174\010" +
    "\224\011\225\001\001\000\006\005\045\067\u0175\001\001" +
    "\000\004\014\u0176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\045" +
    "\014\u017b\067\u017c\101\u017d\102\214\106\211\001\001\000" +
    "\002\001\001\000\004\014\u0181\001\001\000\010\005\045" +
    "\014\u017f\067\u017e\001\001\000\004\014\u0180\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\025\370\026\352\027" +
    "\341\030\357\031\362\032\057\033\350\035\353\037\334" +
    "\041\345\043\355\045\346\047\365\051\347\053\340\055" +
    "\363\057\364\061\333\063\047\065\337\070\u0185\071\052" +
    "\072\037\115\354\117\356\120\061\121\046\133\056\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup_Rules_SQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup_Rules_SQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup_Rules_SQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// This list will store every error found in the syntax analysis process. SE -> Syntax errors
	public static LinkedList<TError> TableSE = new LinkedList<TError>();

	// This object has a list with all columns found and its table
	//public static ColumnEvalutator Columns = new ColumnEvaluator();

	public HashSet<String> Tables  = new HashSet<String>();
	public HashSet<String> Columns = new HashSet<String>();

	public  Scanner s;
  	public  int errors = 0, line, column;
  	public 	String the_error = "";
	public 	StringBuilder the_error_message = new StringBuilder();

	public int selects_read = 0;
	public int updates_read = 0;
	public int deletes_read = 0;
	public int with_read = 0;


	public void clean_lists() {
		TableSE = new LinkedList<TError>();
	}

	/* This is the error handler */
	public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("\n\n---- Error message: " + message + "\n");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {

        	// Uncomment when Analyzer can handle multiple errors
			//errors++;
			errors = 1;

            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0 && s.right >= 0) {

            	
				the_error = (s.value == null) ? "Empty" : s.value.toString();
				//the_error = s.value.toString();
                
                m.append("--> Unexpected : " + the_error );
                m.append(" at line: "+(s.left));  
                m.append(", column: "+(s.right)); 

				the_error_message = m;
            }
        }
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/

    public void report_fatal_error(String message, Object info) {
        //report_error(message, info);
		//the_error_message.append("\n\n---- Unknown syntax error ლ(ಠ_ಠლ)" + "\n");
		the_error_message.append("\n\n---- Unknown syntax error." + "\n");
    }
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Cup_Rules_SQL$actions {


	

  private final Cup_Rules_SQL parser;

  /** Constructor */
  CUP$Cup_Rules_SQL$actions(Cup_Rules_SQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Cup_Rules_SQL$do_action_part00000000(
    int                        CUP$Cup_Rules_SQL$act_num,
    java_cup.runtime.lr_parser CUP$Cup_Rules_SQL$parser,
    java.util.Stack            CUP$Cup_Rules_SQL$stack,
    int                        CUP$Cup_Rules_SQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup_Rules_SQL$result;

      /* select the action based on the action number */
      switch (CUP$Cup_Rules_SQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statement_group EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		RESULT = start_val;
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup_Rules_SQL$parser.done_parsing();
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statement_group ::= statement_group statement 
            {
              Object RESULT =null;
		 System.out.println("statement_group ::= statement_group statement"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement_group",8, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_group ::= statement 
            {
              Object RESULT =null;
		 System.out.println("statement_group ::= statement"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement_group",8, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= select_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= select_s"); 	
						   selects_read++; 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= delete_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= delete_s");
						   deletes_read++; 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= update_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= update_s"); 
						   updates_read++; 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= with_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= with_s");
						   with_read++;	
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // _semicolon ::= _SEMCOL2 
            {
              Object RESULT =null;
		 System.out.println("_semicolon ::= _SEMICOL2"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_semicolon",10, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // select_s ::= select_part from_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // select_s ::= select_part from_part where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part where_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // select_s ::= select_part from_part joins_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part joins_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // select_s ::= select_part from_part joins_part where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part joins_part where_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // with_s ::= with_part select_s 
            {
              Object RESULT =null;
		 System.out.println("with_s	::=	with_part select_s"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_s",12, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // joins_part ::= join_p joins_part 
            {
              Object RESULT =null;
		 System.out.println("joins_part ::= join_p joins_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("joins_part",63, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // joins_part ::= join_p 
            {
              Object RESULT =null;
		 System.out.println("joins_part ::= join_p"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("joins_part",63, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // join_p ::= NATURAL JOIN table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",64, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // join_p ::= JOIN table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",64, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // join_p ::= JOIN table_name join_cond 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",64, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // join_p ::= join table_name join_cond 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",64, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // join ::= INNER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",68, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // join ::= LEFT JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",68, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // join ::= RIGHT JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",68, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // join ::= LEFT OUTER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",68, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // join ::= RIGHT OUTER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",68, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // join ::= FULL OUTER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",68, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // join_cond ::= ON join_c 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_cond",66, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // join_c ::= join_on log_oper join_c 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_c",67, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // join_c ::= join_on 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_c",67, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // join_on ::= element _EQU element 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_on",65, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // with_part ::= _with with_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_part",13, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // with_part ::= _with with_exp2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_part",13, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // with_exp ::= col_ali AS _OPENPAR select_part from_part _CLOSEPAR _COMMA with_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp",14, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-7)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // with_exp ::= col_ali AS _OPENPAR select_part from_part _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp",14, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // with_exp2 ::= col_ali with_exp2_1 AS _OPENPAR select_part from_part _CLOSEPAR _COMMA with_exp2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp2",15, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-8)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // with_exp2 ::= col_ali with_exp2_1 AS _OPENPAR select_part from_part _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp2",15, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-6)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // with_exp2_1 ::= _OPENPAR cols _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp2_1",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // select_part ::= _select _STAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",17, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // select_part ::= _select DISTINCT cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",17, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // select_part ::= _select cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",17, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // _with ::= WITH 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_with",1, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // _select ::= SELECT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_select",0, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cols ::= col_el _COMMA cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols",54, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cols ::= col_el 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols",54, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // col_el ::= c_el c_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_el",19, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // col_el ::= c_el 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_el",19, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // c_el ::= mix_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_el",75, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // c_el ::= aggregates 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_el",75, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // c_el ::= stringFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_el",75, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // c_el ::= dateFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_el",75, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // c_el ::= logicalFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_el",75, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // c_ali ::= col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_ali",76, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // c_ali ::= AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_ali",76, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mix_exp ::= _OPENPAR mix_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",77, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mix_exp ::= nullFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",77, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mix_exp ::= m_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",77, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mix_exp ::= ari_value 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",77, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // m_exp ::= mix_exp _ari_opr mix_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("m_exp",78, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // aggregates ::= agg_count 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",20, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // aggregates ::= agg_avg 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",20, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stringFunctions ::= stringFunction_concat 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stringFunctions ::= stringFunction_lpad 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stringFunctions ::= stringFunction_rpad 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stringFunctions ::= stringFunction_replace 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stringFunctions ::= stringFunction_upper 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stringFunctions ::= stringFunction_lower 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stringFunctions ::= stringFunction_trim 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stringFunctions ::= stringFunction_length 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // nullFunctions ::= nullFunction_nvl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunctions",24, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dateFunctions ::= sysdate 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("dateFunctions",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logicalFunctions ::= logFunc_choose 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logicalFunctions",21, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logicalFunctions ::= logFunc_iif 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logicalFunctions",21, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stringFunction_concat ::= CONCAT _OPENPAR concat_exp _CLOSEPAR AS LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_concat",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stringFunction_lpad ::= LPAD _OPENPAR lpad_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_lpad",35, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stringFunction_rpad ::= RPAD _OPENPAR rpad_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_rpad",37, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stringFunction_length ::= LENGTH _OPENPAR length_exp _CLOSEPAR AS LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_length",39, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stringFunction_replace ::= REPLACE _OPENPAR replace_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_replace",41, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stringFunction_trim ::= TRIM _OPENPAR trim_exp _CLOSEPAR AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_trim",43, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stringFunction_lower ::= LOWER _OPENPAR lower_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_lower",47, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stringFunction_upper ::= UPPER _OPENPAR upper_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_upper",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // nullFunction_nvl ::= NVL _OPENPAR nvl_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunction_nvl",49, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // agg_count ::= COUNT _OPENPAR count_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_count",25, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // agg_count ::= COUNT _OPENPAR _STAR _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_count",25, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // agg_avg ::= AVG _OPENPAR avg_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_avg",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // agg_avg ::= AVG _OPENPAR _STAR _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_avg",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // count_exp ::= DISTINCT cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // count_exp ::= DISTINCT NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // count_exp ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // count_exp ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // logFunc_choose ::= CHOOSE _OPENPAR INTEGER _COMMA choose_exp _CLOSEPAR AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logFunc_choose",27, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-7)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // logFunc_iif ::= IIF _OPENPAR INTEGER iif_exp INTEGER _COMMA count_exp _COMMA count_exp _CLOSEPAR AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logFunc_iif",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-11)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // choose_exp ::= count_exp _COMMA choose_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("choose_exp",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // choose_exp ::= count_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("choose_exp",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // concat_exp ::= LITERAL_STRING _COMMA concat_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("concat_exp",34, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // concat_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("concat_exp",34, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // replace_exp ::= LITERAL_STRING _COMMA replace_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("replace_exp",42, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // replace_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("replace_exp",42, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // trim_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("trim_exp",44, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // upper_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("upper_exp",46, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // upper_exp ::= col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("upper_exp",46, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lower_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("lower_exp",48, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lower_exp ::= col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("lower_exp",48, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lpad_exp ::= LITERAL_STRING _COMMA INTEGER _COMMA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("lpad_exp",36, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // rpad_exp ::= LITERAL_STRING _COMMA INTEGER _COMMA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("rpad_exp",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sysdate ::= SYSDATE _OPENPAR _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("sysdate",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sysdate ::= SYSDATE _OPENPAR _CLOSEPAR _ari_opr INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("sysdate",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // length_exp ::= col 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("length_exp",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // avg_exp ::= DISTINCT cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // avg_exp ::= DISTINCT NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // avg_exp ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // avg_exp ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // iif_exp ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // iif_exp ::= _GT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // iif_exp ::= _LT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // iif_exp ::= _LET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // iif_exp ::= _GET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // iif_exp ::= _DIFF 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // iif_exp ::= _DIFF2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // nvl_exp ::= cl _COMMA INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nvl_exp",50, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // nvl_exp ::= cl _COMMA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nvl_exp",50, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // col ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col",55, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // col ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col",55, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cl ::= IDENTIFIER 
            {
              Object RESULT =null;
		int col1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int col1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object col1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Columns.add(col1 + ""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",56, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cl ::= TABDOTCOL 
            {
              Object RESULT =null;
		int col1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int col1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object col1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Columns.add(col1 + ""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",56, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cl ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",56, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // col_ali ::= QTABLENAME 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 /*Tables.add(t+"");*/ 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",57, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // col_ali ::= IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 /*Tables.add(t+"");*/ 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",57, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // col_ali ::= QCOLALIAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 /*Tables.add(t+"");*/ 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",57, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // case_exp ::= CASE case_rules END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE case_rules END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",79, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // case_exp ::= CASE case_rules case_else END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE case_rules case_else END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",79, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // case_exp ::= CASE col case_rules END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE col case_rules END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",79, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // case_exp ::= CASE col case_rules case_else END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE col case_rules case_else END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",79, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // case_rules ::= case_rul case_rules 
            {
              Object RESULT =null;
		 System.out.println("case_rules ::= case_rul case_rules"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_rules",80, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // case_rules ::= case_rul 
            {
              Object RESULT =null;
		 System.out.println("case_rules ::= case_rul"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_rules",80, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // case_rul ::= case_cond case_act 
            {
              Object RESULT =null;
		 System.out.println("case_rul ::= WHEN case_cond THEN case_act"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_rul",81, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // case_cond ::= WHEN w_condition 
            {
              Object RESULT =null;
		 System.out.println("case_cond ::= w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_cond",83, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // case_cond ::= WHEN element 
            {
              Object RESULT =null;
		 System.out.println("case_cond ::= element"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_cond",83, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // case_act ::= THEN ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_act",84, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // case_else ::= ELSE ari_exp 
            {
              Object RESULT =null;
		 System.out.println("case_else ::= ELSE ari_exp"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_else",82, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // update_s ::= update_part _set set_exp_list where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("update_s	::= update_part _set set_cols where_part _semicolon"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",85, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // update_s ::= update_part _set set_exp_list where_part error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE section. Missing semicolon (;).");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part _set set_cols where_part errorerror.\nMissing semicolon on UPDATE."); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",85, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // update_s ::= update_part _set set_exp_list error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","UPDATE error after set of columns.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part _set set_cols error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",85, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // update_s ::= update_part error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Incomplete UPDATE.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",85, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // update_s ::= _update error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= _update error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",85, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // _set ::= SET 
            {
              Object RESULT =null;
		 System.out.println("_set ::= SET"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_set",87, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // update_part ::= _update table_name 
            {
              Object RESULT =null;
		 System.out.println("update_part ::= _update table_name"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_part",88, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // update_part ::= error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE.");
				  	  	   TableSE.add(errors_found); 
						   System.out.println("update_part ::= _update table_name"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_part",88, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // _update ::= UPDATE 
            {
              Object RESULT =null;
		 System.out.println("_update ::= UPDATE"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_update",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // set_exp_list ::= set_exp _COMMA set_exp_list 
            {
              Object RESULT =null;
		 System.out.println("set_exp_list	::= set_exp _COMMA set_exp_list "); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // set_exp_list ::= set_exp 
            {
              Object RESULT =null;
		 System.out.println("set_exp_list	::= set_exp "); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // set_exp_list ::= error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid set of columns in UPDATE");
				  	  	   TableSE.add(errors_found); 
						   System.out.println("set_cols	::=	error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // set_exp ::= col _asig_opr ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp",91, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // set_exp ::= col _EQU LITERAL_STRING 
            {
              Object RESULT =null;
		 System.out.println("set_exp ::= col _EQU LITERAL_STRING"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp",91, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ari_exp ::= par_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",92, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ari_exp ::= exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",92, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ari_exp ::= ari_value 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",92, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ari_value ::= col 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= col"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",89, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ari_value ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= INTEGER"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",89, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ari_value ::= REAL 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= REAL"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",89, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ari_value ::= case_exp 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= case_exp"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",89, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // par_exp ::= _OPENPAR ari_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("par_exp",93, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // exp ::= ari_exp _ari_opr ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("exp",94, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // _ari_opr ::= _PLUS 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",95, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // _ari_opr ::= _MINUS 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",95, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // _ari_opr ::= _STAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",95, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // _ari_opr ::= _DIVIDE 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",95, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // _asig_opr ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // _asig_opr ::= _PLUSEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // _asig_opr ::= _MINUSEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // _asig_opr ::= _TIMESEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // _asig_opr ::= _DIVIDEEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // _asig_opr ::= _MODEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // _asig_opr ::= _ANDEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // _asig_opr ::= _POWEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // _asig_opr ::= _OREQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // delete_s ::= DELETE FROM table_name where_part _semicolon 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("delete_s",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // delete_s ::= DELETE error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid DELETE statement.");
				  	  			 		TableSE.add(errors_found);
										System.out.println("value ::= LITERAL_STRING"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("delete_s",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // from_part ::= _from table_name_mult 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("from_part",52, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // table_name_mult ::= table_name _COMMA table_name_mult 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name_mult",5, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // table_name_mult ::= table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name_mult",5, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // _from ::= FROM 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_from",2, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // table_name ::= tab 
            {
              Object RESULT =null;
		 System.out.println("table_name ::= tab"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name",4, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // table_name ::= tab_ali 
            {
              Object RESULT =null;
		 System.out.println("table_name ::= tab_ali"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name",4, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // tab ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Tables.add(id+"");
						   System.out.println("tab ::= IDENTIFIER"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab",6, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // tab_ali ::= IDENTIFIER IDENTIFIER 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 System.out.println("tab_ali ::= IDENTIFIER IDENTIFIER");	
						   Tables.add(id1+""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab_ali",7, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // tab_ali ::= IDENTIFIER QTABLENAME 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 System.out.println("tab_ali ::= IDENTIFIER QTABLENAME"); 
						   Tables.add(id1+""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab_ali",7, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // where_part ::= _where w_condition 
            {
              Object RESULT =null;
		 System.out.println("where_part ::= _where w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("where_part",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // _where ::= WHERE 
            {
              Object RESULT =null;
		 System.out.println("_where ::= WHERE"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_where",3, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // w_condition ::= cond log_oper w_condition 
            {
              Object RESULT =null;
		 System.out.println("w_condition ::= cond log_oper w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("w_condition",69, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // w_condition ::= cond 
            {
              Object RESULT =null;
		 System.out.println("w_condition ::= cond"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("w_condition",69, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // cond ::= cond_el cmp_oper cond_el 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",70, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // cond ::= element_in IN in_list 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",70, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // cond_el ::= mix_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond_el",74, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // in_list ::= _OPENPAR in_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_list",59, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // in_exp ::= in_array 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_exp",60, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // in_exp ::= in_subquery 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_exp",60, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // in_subquery ::= select_part_sub from_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",62, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // in_subquery ::= select_part_sub from_part where_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",62, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // in_subquery ::= select_part_sub from_part joins_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",62, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // in_subquery ::= select_part_sub from_part joins_part where_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",62, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // select_part_sub ::= _select col 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part_sub",18, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // in_array ::= element _COMMA in_array 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_array",61, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // in_array ::= element 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_array",61, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // element_in ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element_in",58, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // element_in ::= TABDOTCOL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element_in",58, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // element ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // element ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // element ::= REAL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // element ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // element ::= TABDOTCOL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // element ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // cmp_oper ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",72, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // cmp_oper ::= _GT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",72, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // cmp_oper ::= _LT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",72, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // cmp_oper ::= _LET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",72, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // cmp_oper ::= _GET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",72, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // cmp_oper ::= _DIFF 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",72, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // cmp_oper ::= _DIFF2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",72, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // log_oper ::= _AND 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("log_oper",71, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // log_oper ::= _OR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("log_oper",71, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Cup_Rules_SQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Cup_Rules_SQL$do_action(
    int                        CUP$Cup_Rules_SQL$act_num,
    java_cup.runtime.lr_parser CUP$Cup_Rules_SQL$parser,
    java.util.Stack            CUP$Cup_Rules_SQL$stack,
    int                        CUP$Cup_Rules_SQL$top)
    throws java.lang.Exception
    {
              return CUP$Cup_Rules_SQL$do_action_part00000000(
                               CUP$Cup_Rules_SQL$act_num,
                               CUP$Cup_Rules_SQL$parser,
                               CUP$Cup_Rules_SQL$stack,
                               CUP$Cup_Rules_SQL$top);
    }
}

}
