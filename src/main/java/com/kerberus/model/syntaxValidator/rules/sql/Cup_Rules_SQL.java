
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.kerberus.model.syntaxValidator.rules.sql;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.io.*;
import com.kerberus.model.syntaxValidator.rules.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Cup_Rules_SQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Cup_Rules_SQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Cup_Rules_SQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup_Rules_SQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\011\004\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\003\000\002\014\005\000\002\014\006\000" +
    "\002\014\006\000\002\014\007\000\002\032\004\000\002" +
    "\032\003\000\002\033\005\000\002\035\004\000\002\036" +
    "\005\000\002\036\003\000\002\034\005\000\002\015\004" +
    "\000\002\015\004\000\002\002\003\000\002\021\005\000" +
    "\002\021\003\000\002\022\003\000\002\022\005\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\044\007\000\002\044\007" +
    "\000\002\044\006\000\002\044\004\000\002\044\004\000" +
    "\002\046\003\000\002\047\004\000\002\047\003\000\002" +
    "\045\003\000\002\051\005\000\002\051\003\000\002\051" +
    "\003\000\002\052\005\000\002\052\005\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\054\005\000\002" +
    "\055\005\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\060\007\000\002\060\004\000\002\017" +
    "\004\000\002\006\005\000\002\006\003\000\002\003\003" +
    "\000\002\005\003\000\002\005\003\000\002\007\003\000" +
    "\002\010\004\000\002\010\004\000\002\020\004\000\002" +
    "\004\003\000\002\037\005\000\002\037\003\000\002\040" +
    "\005\000\002\040\005\000\002\026\005\000\002\027\003" +
    "\000\002\027\003\000\002\031\004\000\002\031\005\000" +
    "\002\031\005\000\002\031\006\000\002\016\004\000\002" +
    "\030\005\000\002\030\003\000\002\025\003\000\002\025" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\041\003\000\002\041" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\012\003\012\004\014\005\006\007\011\001" +
    "\002\000\010\016\030\023\031\053\227\001\002\000\004" +
    "\010\120\001\002\000\006\003\uffdb\016\uffdb\001\002\000" +
    "\014\002\ufffc\003\ufffc\004\ufffc\005\ufffc\007\ufffc\001\002" +
    "\000\014\002\213\003\012\004\014\005\006\007\011\001" +
    "\002\000\006\003\206\010\207\001\002\000\006\003\uffdc" +
    "\006\uffdc\001\002\000\014\002\uffff\003\uffff\004\uffff\005" +
    "\uffff\007\uffff\001\002\000\010\016\uffed\023\uffed\053\uffed" +
    "\001\002\000\014\002\ufffe\003\ufffe\004\ufffe\005\ufffe\007" +
    "\ufffe\001\002\000\014\002\ufffd\003\ufffd\004\ufffd\005\ufffd" +
    "\007\ufffd\001\002\000\006\003\205\016\134\001\002\000" +
    "\006\003\022\006\023\001\002\000\010\003\026\016\030" +
    "\023\031\001\002\000\014\002\uffe0\003\uffe0\004\uffe0\005" +
    "\uffe0\007\uffe0\001\002\000\010\003\uffde\016\uffde\023\uffde" +
    "\001\002\000\050\003\uffea\010\uffea\011\uffea\013\177\025" +
    "\uffea\033\uffea\034\uffea\035\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\051\uffea\052" +
    "\uffea\053\uffea\001\002\000\006\003\071\011\070\001\002" +
    "\000\006\003\uffd8\011\uffd8\001\002\000\024\025\037\040" +
    "\045\041\042\042\043\043\036\044\035\045\041\046\046" +
    "\047\040\001\002\000\050\003\uffe8\010\uffe8\011\uffe8\013" +
    "\uffe8\025\uffe8\033\uffe8\034\uffe8\035\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\001\002\000\050\003\uffe7\010\uffe7" +
    "\011\uffe7\013\uffe7\025\uffe7\033\uffe7\034\uffe7\035\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\051\uffe7\052\uffe7\053\uffe7\001\002\000\010\003" +
    "\uffd9\011\uffd9\052\033\001\002\000\010\003\026\016\030" +
    "\023\031\001\002\000\006\003\uffda\011\uffda\001\002\000" +
    "\014\016\uffc4\017\uffc4\020\uffc4\023\uffc4\050\uffc4\001\002" +
    "\000\014\016\uffc5\017\uffc5\020\uffc5\023\uffc5\050\uffc5\001" +
    "\002\000\016\016\uffc9\017\uffc9\020\uffc9\021\067\023\uffc9" +
    "\050\uffc9\001\002\000\014\016\uffc1\017\uffc1\020\uffc1\023" +
    "\uffc1\050\uffc1\001\002\000\014\016\uffc3\017\uffc3\020\uffc3" +
    "\023\uffc3\050\uffc3\001\002\000\014\016\uffc7\017\uffc7\020" +
    "\uffc7\023\uffc7\050\uffc7\001\002\000\014\016\uffc6\017\uffc6" +
    "\020\uffc6\023\uffc6\050\uffc6\001\002\000\014\016\030\017" +
    "\051\020\055\023\031\050\047\001\002\000\014\016\uffc8" +
    "\017\uffc8\020\uffc8\023\uffc8\050\uffc8\001\002\000\014\016" +
    "\uffc2\017\uffc2\020\uffc2\023\uffc2\050\uffc2\001\002\000\014" +
    "\016\030\017\051\020\055\023\031\050\047\001\002\000" +
    "\022\003\uffd5\011\uffd5\033\uffd5\034\uffd5\035\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\001\002\000\022\003\uffd1\011\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\051\uffd1\052\uffd1\053\uffd1\001\002" +
    "\000\022\003\uffd2\011\uffd2\033\uffd2\034\uffd2\035\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\001\002\000\022\003\uffd4\011\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\051\uffd4\052\uffd4\053\uffd4\001" +
    "\002\000\022\003\uffd3\011\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\001\002\000\022\003\uffd0\011" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\001\002\000\020\003\uffd7\011\uffd7\033\061\034\057\035" +
    "\060\052\uffd7\053\063\001\002\000\014\016\uffcc\017\uffcc" +
    "\020\uffcc\023\uffcc\050\uffcc\001\002\000\014\016\uffca\017" +
    "\uffca\020\uffca\023\uffca\050\uffca\001\002\000\014\016\uffcd" +
    "\017\uffcd\020\uffcd\023\uffcd\050\uffcd\001\002\000\014\016" +
    "\030\017\051\020\055\023\031\050\047\001\002\000\014" +
    "\016\uffcb\017\uffcb\020\uffcb\023\uffcb\050\uffcb\001\002\000" +
    "\022\003\uffce\011\uffce\033\061\034\057\035\060\051\uffce" +
    "\052\uffce\053\063\001\002\000\014\033\061\034\057\035" +
    "\060\051\066\053\063\001\002\000\022\003\uffcf\011\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\051\uffcf\052\uffcf\053\uffcf\001" +
    "\002\000\010\003\uffd6\011\uffd6\052\uffd6\001\002\000\014" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\023\uffb4\001\002\000" +
    "\014\002\uffe1\003\uffe1\004\uffe1\005\uffe1\007\uffe1\001\002" +
    "\000\006\003\175\054\174\001\002\000\014\016\103\017" +
    "\074\020\102\021\100\023\076\001\002\000\036\003\uffa2" +
    "\011\uffa2\012\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\036\uffa2\037\uffa2\051\uffa2\052\uffa2\054\uffa2" +
    "\001\002\000\010\003\uffb5\051\uffb5\054\uffb5\001\002\000" +
    "\020\015\uffa4\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\001\002\000\016\025\172\026\171\027\170\030" +
    "\166\031\165\032\164\001\002\000\036\003\uffa0\011\uffa0" +
    "\012\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\036\uffa0\037\uffa0\051\uffa0\052\uffa0\054\uffa0\001\002" +
    "\000\014\003\uffb2\036\150\037\147\051\uffb2\054\uffb2\001" +
    "\002\000\036\003\uffa1\011\uffa1\012\uffa1\025\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\036\uffa1\037\uffa1\051" +
    "\uffa1\052\uffa1\054\uffa1\001\002\000\020\015\uffa5\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\001\002\000" +
    "\004\015\105\001\002\000\004\050\106\001\002\000\016" +
    "\004\014\016\117\017\074\020\102\021\100\023\112\001" +
    "\002\000\014\003\uffb0\036\uffb0\037\uffb0\051\uffb0\054\uffb0" +
    "\001\002\000\004\051\161\001\002\000\006\016\030\023" +
    "\031\001\002\000\024\003\uff9f\011\uff9f\012\uff9f\025\uff9f" +
    "\036\uff9f\037\uff9f\051\uff9f\052\uff9f\054\uff9f\001\002\000" +
    "\006\051\uffa6\052\156\001\002\000\004\051\uffae\001\002" +
    "\000\004\051\uffad\001\002\000\004\010\120\001\002\000" +
    "\024\003\uffa3\011\uffa3\012\uffa3\025\uffa3\036\uffa3\037\uffa3" +
    "\051\uffa3\052\uffa3\054\uffa3\001\002\000\004\016\uffbb\001" +
    "\002\000\004\016\134\001\002\000\010\011\070\012\123" +
    "\051\uffac\001\002\000\004\016\134\001\002\000\004\051" +
    "\uffab\001\002\000\012\011\ufff5\012\123\051\ufff5\054\ufff5" +
    "\001\002\000\006\011\070\051\uffaa\001\002\000\004\051" +
    "\uffa9\001\002\000\010\011\ufff6\051\ufff6\054\ufff6\001\002" +
    "\000\004\014\140\001\002\000\022\003\uffb9\006\uffb9\011" +
    "\uffb9\012\uffb9\014\uffb9\051\uffb9\052\uffb9\054\uffb9\001\002" +
    "\000\022\003\uffba\006\uffba\011\uffba\012\uffba\014\uffba\051" +
    "\uffba\052\uffba\054\uffba\001\002\000\026\003\uffb8\006\uffb8" +
    "\011\uffb8\012\uffb8\014\uffb8\016\136\022\135\051\uffb8\052" +
    "\uffb8\054\uffb8\001\002\000\022\003\uffb6\006\uffb6\011\uffb6" +
    "\012\uffb6\014\uffb6\051\uffb6\052\uffb6\054\uffb6\001\002\000" +
    "\022\003\uffb7\006\uffb7\011\uffb7\012\uffb7\014\uffb7\051\uffb7" +
    "\052\uffb7\054\uffb7\001\002\000\012\011\ufff4\012\ufff4\051" +
    "\ufff4\054\ufff4\001\002\000\014\016\117\017\074\020\102" +
    "\021\100\023\112\001\002\000\016\011\ufff1\012\ufff1\036" +
    "\150\037\147\051\ufff1\054\ufff1\001\002\000\004\025\144" +
    "\001\002\000\012\011\ufff3\012\ufff3\051\ufff3\054\ufff3\001" +
    "\002\000\014\016\117\017\074\020\102\021\100\023\112" +
    "\001\002\000\016\011\ufff0\012\ufff0\036\ufff0\037\ufff0\051" +
    "\ufff0\054\ufff0\001\002\000\014\016\117\017\074\020\102" +
    "\021\100\023\112\001\002\000\014\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\023\uff97\001\002\000\014\016\uff98\017\uff98" +
    "\020\uff98\021\uff98\023\uff98\001\002\000\012\011\ufff2\012" +
    "\ufff2\051\ufff2\054\ufff2\001\002\000\014\011\uffbc\012\uffbc" +
    "\051\uffbc\052\154\054\uffbc\001\002\000\012\011\uffbe\012" +
    "\uffbe\051\uffbe\054\uffbe\001\002\000\004\016\134\001\002" +
    "\000\012\011\uffbd\012\uffbd\051\uffbd\054\uffbd\001\002\000" +
    "\014\016\117\017\074\020\102\021\100\023\112\001\002" +
    "\000\004\051\uffa7\001\002\000\004\010\uffa8\001\002\000" +
    "\014\003\uffaf\036\uffaf\037\uffaf\051\uffaf\054\uffaf\001\002" +
    "\000\014\016\103\017\074\020\102\021\100\023\076\001" +
    "\002\000\010\003\uffb3\051\uffb3\054\uffb3\001\002\000\014" +
    "\016\uff99\017\uff99\020\uff99\021\uff99\023\uff99\001\002\000" +
    "\014\016\uff9a\017\uff9a\020\uff9a\021\uff9a\023\uff9a\001\002" +
    "\000\014\016\uff9b\017\uff9b\020\uff9b\021\uff9b\023\uff9b\001" +
    "\002\000\014\016\117\017\074\020\102\021\100\023\112" +
    "\001\002\000\014\016\uff9c\017\uff9c\020\uff9c\021\uff9c\023" +
    "\uff9c\001\002\000\014\016\uff9d\017\uff9d\020\uff9d\021\uff9d" +
    "\023\uff9d\001\002\000\014\016\uff9e\017\uff9e\020\uff9e\021" +
    "\uff9e\023\uff9e\001\002\000\014\003\uffb1\036\uffb1\037\uffb1" +
    "\051\uffb1\054\uffb1\001\002\000\014\002\ufffb\003\ufffb\004" +
    "\ufffb\005\ufffb\007\ufffb\001\002\000\014\002\uffe2\003\uffe2" +
    "\004\uffe2\005\uffe2\007\uffe2\001\002\000\014\002\uffe3\003" +
    "\uffe3\004\uffe3\005\uffe3\007\uffe3\001\002\000\010\016\203" +
    "\022\200\024\202\001\002\000\046\003\uffe6\010\uffe6\011" +
    "\uffe6\025\uffe6\033\uffe6\034\uffe6\035\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\001\002\000\046\003\uffe9\010\uffe9" +
    "\011\uffe9\025\uffe9\033\uffe9\034\uffe9\035\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\001\002\000\046\003\uffe4\010" +
    "\uffe4\011\uffe4\025\uffe4\033\uffe4\034\uffe4\035\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\001\002\000\046\003\uffe5" +
    "\010\uffe5\011\uffe5\025\uffe5\033\uffe5\034\uffe5\035\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\051\uffe5\052\uffe5\053\uffe5\001\002\000\006\003" +
    "\uffdd\006\uffdd\001\002\000\014\002\uffdf\003\uffdf\004\uffdf" +
    "\005\uffdf\007\uffdf\001\002\000\014\002\uffbf\003\uffbf\004" +
    "\uffbf\005\uffbf\007\uffbf\001\002\000\004\016\134\001\002" +
    "\000\004\011\070\001\002\000\004\054\174\001\002\000" +
    "\014\002\uffc0\003\uffc0\004\uffc0\005\uffc0\007\uffc0\001\002" +
    "\000\004\002\001\001\002\000\014\002\000\003\000\004" +
    "\000\005\000\007\000\001\002\000\010\011\070\012\123" +
    "\054\174\001\002\000\004\054\174\001\002\000\014\002" +
    "\ufffa\003\ufffa\004\ufffa\005\ufffa\007\ufffa\001\002\000\006" +
    "\011\070\054\174\001\002\000\004\054\174\001\002\000" +
    "\014\002\ufff8\003\ufff8\004\ufff8\005\ufff8\007\ufff8\001\002" +
    "\000\014\002\ufff7\003\ufff7\004\ufff7\005\ufff7\007\ufff7\001" +
    "\002\000\014\002\ufff9\003\ufff9\004\ufff9\005\ufff9\007\ufff9" +
    "\001\002\000\006\010\uffeb\052\230\001\002\000\004\010" +
    "\uffee\001\002\000\004\010\uffef\001\002\000\006\016\030" +
    "\023\031\001\002\000\004\010\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\024\002\003\011\007\012\012\014\014\015" +
    "\004\044\006\045\016\047\017\060\015\001\001\000\010" +
    "\021\225\022\224\023\023\001\001\000\006\003\120\017" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\002\003\012\213\014\014\015\004\044\006\045\016\047" +
    "\017\060\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\203\007\132\010\131\001\001" +
    "\000\004\046\020\001\001\000\012\022\026\023\023\051" +
    "\024\052\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\072\020\071\001\001\000" +
    "\002\001\001\000\004\057\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\026\023" +
    "\023\051\033\052\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\051\023\023\050\053\053\055\054\047\055" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\051\023\023\050\053\053\064\054\047\055\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\051\023\023\050\053\053" +
    "\063\054\047\055\052\001\001\000\002\001\001\000\004" +
    "\056\061\001\001\000\004\056\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\175\001\001\000\012\025\103\037\074\040" +
    "\100\043\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\166\001\001\000\002\001" +
    "\001\000\004\041\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\106\001\001\000" +
    "\016\002\110\016\115\027\107\030\113\031\114\043\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\157\023\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\120\017" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\151\006\152\007\132\010\131\001\001\000\012\004" +
    "\072\020\123\032\125\033\124\001\001\000\010\005\130" +
    "\007\132\010\131\001\001\000\002\001\001\000\006\032" +
    "\127\033\124\001\001\000\006\004\072\020\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\140\036\142\043\141\001\001\000\004\041\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\144\001\001\000\002\001\001\000\010\034\140\036\150" +
    "\043\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\151\006\154\007\132\010\131\001\001\000\002\001" +
    "\001\000\006\030\156\043\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\103\037" +
    "\162\040\100\043\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\207\007\132\010\131\001\001\000\006\004" +
    "\072\020\210\001\001\000\004\013\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\072\013\216\020\215\032\217\033\124\001\001\000\004" +
    "\013\223\001\001\000\002\001\001\000\010\004\072\013" +
    "\221\020\220\001\001\000\004\013\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\230" +
    "\022\224\023\023\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup_Rules_SQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup_Rules_SQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup_Rules_SQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// This list will store every error found in the syntax analysis process. SE -> Syntax errors
	public static LinkedList<TError> TableSE = new LinkedList<TError>();

	// This object has a list with all columns found and its table
	//public static ColumnEvalutator Columns = new ColumnEvaluator();

	public LinkedList<String> Tables  = new LinkedList<String>();
	public LinkedList<String> Columns = new LinkedList<String>();

	public  Scanner s;
  	public  int errors = 0, line, column;
  	public 	String the_error = "";
	public 	StringBuilder the_error_message = new StringBuilder();


	public void clean_lists() {
		TableSE = new LinkedList<TError>();
	}

	/* This is the error handler */
	public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("\n\n---- Error message: " + message + "\n");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {

        	// Uncomment when Analyzer can handle multiple errors
			//errors++;
			errors = 1;

            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0 && s.right >= 0) {

            	
				the_error = (s.value == null) ? "Empty" : s.value.toString();
				//the_error = s.value.toString();
                
                m.append("--> Unexpected : " + the_error );
                m.append(" at line: "+(s.left));  
                m.append(", column: "+(s.right)); 

				the_error_message = m;
            }
        }
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/

    public void report_fatal_error(String message, Object info) {
        //report_error(message, info);
		the_error_message.append("\n\n---- Unknown syntax error ლ(ಠ_ಠლ)" + "\n");
    }
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Cup_Rules_SQL$actions {


	

  private final Cup_Rules_SQL parser;

  /** Constructor */
  CUP$Cup_Rules_SQL$actions(Cup_Rules_SQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Cup_Rules_SQL$do_action_part00000000(
    int                        CUP$Cup_Rules_SQL$act_num,
    java_cup.runtime.lr_parser CUP$Cup_Rules_SQL$parser,
    java.util.Stack            CUP$Cup_Rules_SQL$stack,
    int                        CUP$Cup_Rules_SQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup_Rules_SQL$result;

      /* select the action based on the action number */
      switch (CUP$Cup_Rules_SQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statement_group EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		RESULT = start_val;
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup_Rules_SQL$parser.done_parsing();
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statement_group ::= statement_group statement 
            {
              Object RESULT =null;
		 System.out.println("statement_group ::= statement_group statement"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement_group",7, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_group ::= statement 
            {
              Object RESULT =null;
		 System.out.println("statement_group ::= statement"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement_group",7, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= select_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= select_s"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= delete_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= delete_s"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= update_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= update_s"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // _semicolon ::= _SEMCOL2 
            {
              Object RESULT =null;
		 System.out.println("_semicolon ::= _SEMICOL2"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_semicolon",9, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // select_s ::= select_part from_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",10, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // select_s ::= select_part from_part where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part where_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",10, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // select_s ::= select_part from_part join_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part join_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",10, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // select_s ::= select_part from_part join_part where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part join_part where_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",10, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // join_part ::= join_p join_part 
            {
              Object RESULT =null;
		 System.out.println("join_part ::= join_p join_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_part",24, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // join_part ::= join_p 
            {
              Object RESULT =null;
		 System.out.println("join_part ::= join_p"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_part",24, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // join_p ::= JOIN table_name join_cond 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",25, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // join_cond ::= ON join_c 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_cond",27, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // join_c ::= join_on log_oper join_c 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_c",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // join_c ::= join_on 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_c",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // join_on ::= element _EQU element 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_on",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // select_part ::= _select _STAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // select_part ::= _select cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // _select ::= SELECT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_select",0, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cols ::= col _COMMA cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols",15, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cols ::= col 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols",15, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // col ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // col ::= cl AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cl ::= IDENTIFIER 
            {
              Object RESULT =null;
		int col1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int col1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object col1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Columns.add(col1 + ""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",17, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cl ::= TABDOTCOL 
            {
              Object RESULT =null;
		int col1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int col1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object col1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Columns.add(col1 + ""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",17, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // col_ali ::= QTABLENAME 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Tables.add(t+""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",18, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // col_ali ::= IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Tables.add(t+""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",18, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // col_ali ::= QCOLALIAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Tables.add(t+""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",18, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // update_s ::= update_part _set set_exp_list where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("update_s	::= update_part _set set_cols where_part _semicolon"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",34, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // update_s ::= update_part _set set_exp_list where_part error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE section. Missing semicolon (;).");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part _set set_cols where_part errorerror.\nMissing semicolon on UPDATE."); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",34, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // update_s ::= update_part _set set_exp_list error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","UPDATE error after set of columns.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part _set set_cols error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",34, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // update_s ::= update_part error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Incomplete UPDATE.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",34, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // update_s ::= _update error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= _update error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",34, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // _set ::= SET 
            {
              Object RESULT =null;
		 System.out.println("_set ::= SET"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_set",36, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // update_part ::= _update table_name 
            {
              Object RESULT =null;
		 System.out.println("update_part ::= _update table_name"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_part",37, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // update_part ::= error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE.");
				  	  	   TableSE.add(errors_found); 
						   System.out.println("update_part ::= _update table_name"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_part",37, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // _update ::= UPDATE 
            {
              Object RESULT =null;
		 System.out.println("_update ::= UPDATE"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_update",35, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // set_exp_list ::= set_exp _COMMA set_exp_list 
            {
              Object RESULT =null;
		 System.out.println("set_exp_list	::= set_exp _COMMA set_exp_list "); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",39, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // set_exp_list ::= set_exp 
            {
              Object RESULT =null;
		 System.out.println("set_exp_list	::= set_exp "); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",39, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // set_exp_list ::= error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid set of columns in UPDATE");
				  	  	   TableSE.add(errors_found); 
						   System.out.println("set_cols	::=	error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",39, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // set_exp ::= col _asig_opr ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // set_exp ::= col _EQU LITERAL_STRING 
            {
              Object RESULT =null;
		 System.out.println("set_exp ::= col _EQU LITERAL_STRING"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ari_exp ::= par_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",41, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ari_exp ::= exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",41, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ari_exp ::= ari_value 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",41, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ari_value ::= col 
            {
              Object RESULT =null;
		 System.out.println("value ::= col"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ari_value ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("value ::= INTEGER"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ari_value ::= REAL 
            {
              Object RESULT =null;
		 System.out.println("value ::= value"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // par_exp ::= _OPENPAR ari_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("par_exp",42, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= ari_exp _ari_opr ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // _ari_opr ::= _PLUS 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",44, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // _ari_opr ::= _MINUS 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",44, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // _ari_opr ::= _STAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",44, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // _ari_opr ::= _DIVIDE 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",44, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // _asig_opr ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // _asig_opr ::= _PLUSEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // _asig_opr ::= _MINUSEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // _asig_opr ::= _TIMESEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // _asig_opr ::= _DIVIDEEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // _asig_opr ::= _MODEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // _asig_opr ::= _ANDEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _asig_opr ::= _POWEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _asig_opr ::= _OREQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // delete_s ::= DELETE FROM table_name where_part _semicolon 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("delete_s",46, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // delete_s ::= DELETE error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid DELETE statement.");
				  	  			 		TableSE.add(errors_found);
										System.out.println("value ::= LITERAL_STRING"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("delete_s",46, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // from_part ::= _from table_name_mult 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("from_part",13, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // table_name_mult ::= table_name _COMMA table_name_mult 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name_mult",4, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // table_name_mult ::= table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name_mult",4, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _from ::= FROM 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_from",1, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // table_name ::= tab 
            {
              Object RESULT =null;
		 System.out.println("table_name ::= tab"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name",3, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // table_name ::= tab_ali 
            {
              Object RESULT =null;
		 System.out.println("table_name ::= tab_ali"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name",3, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tab ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Tables.add(id+"");
						   System.out.println("tab ::= IDENTIFIER"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab",5, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tab_ali ::= IDENTIFIER IDENTIFIER 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 System.out.println("tab_ali ::= IDENTIFIER IDENTIFIER");	
						   Tables.add(id1+" "+id2); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab_ali",6, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tab_ali ::= IDENTIFIER QTABLENAME 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 System.out.println("tab_ali ::= IDENTIFIER QTABLENAME"); 
						   Tables.add(id1+" "+id2); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab_ali",6, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // where_part ::= _where w_condition 
            {
              Object RESULT =null;
		 System.out.println("where_part ::= _where w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("where_part",14, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _where ::= WHERE 
            {
              Object RESULT =null;
		 System.out.println("_where ::= WHERE"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_where",2, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // w_condition ::= cond log_oper w_condition 
            {
              Object RESULT =null;
		 System.out.println("w_condition ::= cond log_oper w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("w_condition",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // w_condition ::= cond 
            {
              Object RESULT =null;
		 System.out.println("w_condition ::= cond"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("w_condition",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond ::= element ari_oper element 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond ::= element_in IN in_list 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // in_list ::= _OPENPAR in_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_list",20, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // in_exp ::= in_array 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_exp",21, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // in_exp ::= in_subquery 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_exp",21, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // in_subquery ::= select_part_sub from_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // in_subquery ::= select_part_sub from_part where_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // in_subquery ::= select_part_sub from_part join_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // in_subquery ::= select_part_sub from_part join_part where_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // select_part_sub ::= _select col 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part_sub",12, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // in_array ::= element _COMMA in_array 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_array",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // in_array ::= element 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_array",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // element_in ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element_in",19, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // element_in ::= TABDOTCOL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element_in",19, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // element ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // element ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // element ::= REAL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // element ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // element ::= TABDOTCOL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ari_oper ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_oper",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ari_oper ::= _GT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_oper",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ari_oper ::= _LT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_oper",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ari_oper ::= _LET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_oper",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ari_oper ::= _GET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_oper",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ari_oper ::= _DIFF 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_oper",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // log_oper ::= _AND 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("log_oper",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // log_oper ::= _OR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("log_oper",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Cup_Rules_SQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Cup_Rules_SQL$do_action(
    int                        CUP$Cup_Rules_SQL$act_num,
    java_cup.runtime.lr_parser CUP$Cup_Rules_SQL$parser,
    java.util.Stack            CUP$Cup_Rules_SQL$stack,
    int                        CUP$Cup_Rules_SQL$top)
    throws java.lang.Exception
    {
              return CUP$Cup_Rules_SQL$do_action_part00000000(
                               CUP$Cup_Rules_SQL$act_num,
                               CUP$Cup_Rules_SQL$parser,
                               CUP$Cup_Rules_SQL$stack,
                               CUP$Cup_Rules_SQL$top);
    }
}

}
