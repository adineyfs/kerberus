
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.kerberus.model.syntaxValidator.rules.sql;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.HashSet;
import java.io.*;
import com.kerberus.model.syntaxValidator.rules.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Cup_Rules_SQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Cup_Rules_SQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Cup_Rules_SQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup_Rules_SQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\002\002\004\000\002\014\004\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\003\000" +
    "\002\017\005\000\002\017\006\000\002\017\006\000\002" +
    "\017\007\000\002\020\004\000\002\025\003\000\002\127" +
    "\004\000\002\127\003\000\002\130\005\000\002\130\004" +
    "\000\002\130\005\000\002\130\005\000\002\130\005\000" +
    "\002\030\006\000\002\031\003\000\002\136\006\000\002" +
    "\135\005\000\002\135\003\000\002\134\004\000\002\134" +
    "\004\000\002\134\004\000\002\134\005\000\002\134\005" +
    "\000\002\134\005\000\002\132\004\000\002\133\005\000" +
    "\002\133\003\000\002\131\005\000\002\026\004\000\002" +
    "\021\004\000\002\021\004\000\002\022\012\000\002\022" +
    "\010\000\002\023\013\000\002\023\011\000\002\024\005" +
    "\000\002\027\013\000\002\032\004\000\002\032\005\000" +
    "\002\032\004\000\002\034\011\000\002\035\003\000\002" +
    "\013\004\000\002\003\003\000\002\002\003\000\002\012" +
    "\003\000\002\115\005\000\002\115\003\000\002\116\005" +
    "\000\002\116\004\000\002\037\004\000\002\037\003\000" +
    "\002\145\003\000\002\146\003\000\002\146\004\000\002" +
    "\147\005\000\002\147\003\000\002\147\003\000\002\147" +
    "\003\000\002\150\005\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\051\003\000\002\041" +
    "\003\000\002\041\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\043\004\000\002\044\010\000" +
    "\002\045\012\000\002\046\006\000\002\046\010\000\002" +
    "\046\012\000\002\070\010\000\002\072\006\000\002\074" +
    "\006\000\002\076\010\000\002\100\006\000\002\102\010" +
    "\000\002\106\006\000\002\104\006\000\002\110\006\000" +
    "\002\052\006\000\002\052\006\000\002\053\006\000\002" +
    "\054\006\000\002\055\010\000\002\056\006\000\002\057" +
    "\006\000\002\060\006\000\002\066\006\000\002\066\006" +
    "\000\002\061\004\000\002\061\004\000\002\061\003\000" +
    "\002\061\003\000\002\062\012\000\002\064\016\000\002" +
    "\063\005\000\002\063\003\000\002\071\005\000\002\071" +
    "\003\000\002\101\005\000\002\101\003\000\002\103\003" +
    "\000\002\105\003\000\002\105\003\000\002\107\003\000" +
    "\002\107\003\000\002\073\007\000\002\075\007\000\002" +
    "\112\005\000\002\112\007\000\002\077\003\000\002\067" +
    "\004\000\002\067\004\000\002\067\003\000\002\067\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\111\005\000\002\111\005\000\002\117" +
    "\003\000\002\117\003\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\121\003\000\002\121\003\000" +
    "\002\121\003\000\002\151\005\000\002\151\006\000\002" +
    "\151\006\000\002\151\007\000\002\152\004\000\002\152" +
    "\003\000\002\153\004\000\002\155\004\000\002\155\004" +
    "\000\002\156\004\000\002\154\004\000\002\157\007\000" +
    "\002\157\006\000\002\157\007\000\002\157\004\000\002" +
    "\157\004\000\002\161\003\000\002\162\004\000\002\162" +
    "\003\000\002\160\003\000\002\164\005\000\002\164\003" +
    "\000\002\164\003\000\002\165\005\000\002\165\005\000" +
    "\002\166\003\000\002\166\003\000\002\166\003\000\002" +
    "\163\003\000\002\163\003\000\002\163\003\000\002\163" +
    "\003\000\002\167\005\000\002\170\005\000\002\171\003" +
    "\000\002\171\003\000\002\171\003\000\002\171\003\000" +
    "\002\172\003\000\002\172\003\000\002\172\003\000\002" +
    "\172\003\000\002\172\003\000\002\172\003\000\002\172" +
    "\003\000\002\172\003\000\002\172\003\000\002\173\007" +
    "\000\002\173\007\000\002\173\004\000\002\113\004\000" +
    "\002\007\005\000\002\007\003\000\002\004\003\000\002" +
    "\006\003\000\002\006\003\000\002\010\003\000\002\011" +
    "\004\000\002\011\004\000\002\114\004\000\002\005\003" +
    "\000\002\137\005\000\002\137\003\000\002\140\005\000" +
    "\002\140\005\000\002\140\005\000\002\140\006\000\002" +
    "\144\003\000\002\123\005\000\002\124\003\000\002\124" +
    "\003\000\002\126\004\000\002\126\005\000\002\126\005" +
    "\000\002\126\006\000\002\033\004\000\002\125\005\000" +
    "\002\125\003\000\002\122\003\000\002\122\003\000\002" +
    "\143\003\000\002\143\003\000\002\143\003\000\002\143" +
    "\003\000\002\143\003\000\002\143\003\000\002\142\003" +
    "\000\002\142\003\000\002\142\003\000\002\142\003\000" +
    "\002\142\003\000\002\142\003\000\002\142\003\000\002" +
    "\141\003\000\002\141\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01f0\000\016\003\022\004\006\005\026\007\027\014" +
    "\014\015\025\001\002\000\106\027\067\033\u01f1\034\036" +
    "\035\135\036\070\037\124\040\102\041\132\042\125\043" +
    "\141\044\131\045\126\046\061\047\155\050\130\051\147" +
    "\052\104\053\156\054\106\055\136\056\112\057\071\060" +
    "\144\061\113\062\073\063\162\064\153\071\043\072\075" +
    "\073\057\074\037\076\035\124\101\127\u01ef\001\002\000" +
    "\020\002\uffff\003\uffff\004\uffff\005\uffff\007\uffff\014\uffff" +
    "\015\uffff\001\002\000\106\027\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\071\uffcc\072\uffcc\073" +
    "\uffcc\074\uffcc\076\uffcc\124\uffcc\127\uffcc\001\002\000\020" +
    "\002\ufffb\003\ufffb\004\ufffb\005\ufffb\007\ufffb\014\ufffb\015" +
    "\ufffb\001\002\000\020\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\007\ufffa\014\ufffa\015\ufffa\001\002\000\020\002\ufffe\003" +
    "\ufffe\004\ufffe\005\ufffe\007\ufffe\014\ufffe\015\ufffe\001\002" +
    "\000\020\002\ufffc\003\ufffc\004\ufffc\005\ufffc\007\ufffc\014" +
    "\ufffc\015\ufffc\001\002\000\004\010\u015f\001\002\000\010" +
    "\071\uffcd\075\uffcd\077\uffcd\001\002\000\020\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\007\ufffd\014\ufffd\015\ufffd\001\002" +
    "\000\020\002\u01e6\003\022\004\006\005\026\007\027\014" +
    "\014\015\025\001\002\000\020\002\ufff3\003\ufff3\004\ufff3" +
    "\005\ufff3\007\ufff3\014\ufff3\015\ufff3\001\002\000\010\071" +
    "\207\075\204\077\206\001\002\000\004\004\006\001\002" +
    "\000\006\003\uff49\006\uff49\001\002\000\006\003\u01c3\071" +
    "\u0170\001\002\000\012\034\036\071\043\074\037\076\035" +
    "\001\002\000\004\016\u01b2\001\002\000\010\003\uff48\006" +
    "\uff48\071\uff48\001\002\000\006\003\u01ab\010\u01ac\001\002" +
    "\000\006\003\032\006\033\001\002\000\014\003\040\034" +
    "\036\071\043\074\037\076\035\001\002\000\020\002\uff4d" +
    "\003\uff4d\004\uff4d\005\uff4d\007\uff4d\014\uff4d\015\uff4d\001" +
    "\002\000\014\003\uff4b\034\uff4b\071\uff4b\074\uff4b\076\uff4b" +
    "\001\002\000\024\100\u01a1\114\u01a7\115\u01a4\116\u01a5\117" +
    "\u01a0\120\u019f\121\u01a2\122\u01a8\123\u01a3\001\002\000\112" +
    "\003\uff60\010\uff60\011\uff60\026\uff60\030\uff60\065\uff60\066" +
    "\uff60\067\uff60\070\uff60\071\uff60\075\uff60\077\uff60\100\uff60" +
    "\101\uff60\102\uff60\103\uff60\104\uff60\105\uff60\106\uff60\107" +
    "\uff60\110\uff60\111\uff60\112\uff60\113\uff60\114\uff60\115\uff60" +
    "\116\uff60\117\uff60\120\uff60\121\uff60\122\uff60\123\uff60\125" +
    "\uff60\126\uff60\127\uff60\130\uff60\001\002\000\112\003\uff62" +
    "\010\uff62\011\uff62\026\uff62\030\uff62\065\uff62\066\uff62\067" +
    "\uff62\070\uff62\071\uff62\075\uff62\077\uff62\100\uff62\101\uff62" +
    "\102\uff62\103\uff62\104\uff62\105\uff62\106\uff62\107\uff62\110" +
    "\uff62\111\uff62\112\uff62\113\uff62\114\uff62\115\uff62\116\uff62" +
    "\117\uff62\120\uff62\121\uff62\122\uff62\123\uff62\125\uff62\126" +
    "\uff62\127\uff62\130\uff62\001\002\000\114\003\uff5f\010\uff5f" +
    "\011\uff5f\012\uff5f\026\uff5f\030\uff5f\065\uff5f\066\uff5f\067" +
    "\uff5f\070\uff5f\071\uff5f\075\uff5f\077\uff5f\100\uff5f\101\uff5f" +
    "\102\uff5f\103\uff5f\104\uff5f\105\uff5f\106\uff5f\107\uff5f\110" +
    "\uff5f\111\uff5f\112\uff5f\113\uff5f\114\uff5f\115\uff5f\116\uff5f" +
    "\117\uff5f\120\uff5f\121\uff5f\122\uff5f\123\uff5f\125\uff5f\126" +
    "\uff5f\127\uff5f\130\uff5f\001\002\000\010\003\uff45\011\uff45" +
    "\130\uff45\001\002\000\010\003\050\011\051\130\047\001" +
    "\002\000\012\003\uff46\011\uff46\126\045\130\uff46\001\002" +
    "\000\112\003\uff61\010\uff61\011\uff61\026\uff61\030\uff61\065" +
    "\uff61\066\uff61\067\uff61\070\uff61\071\uff61\075\uff61\077\uff61" +
    "\100\uff61\101\uff61\102\uff61\103\uff61\104\uff61\105\uff61\106" +
    "\uff61\107\uff61\110\uff61\111\uff61\112\uff61\113\uff61\114\uff61" +
    "\115\uff61\116\uff61\117\uff61\120\uff61\121\uff61\122\uff61\123" +
    "\uff61\125\uff61\126\uff61\127\uff61\130\uff61\001\002\000\112" +
    "\003\uff63\010\uff63\011\uff63\026\uff63\030\uff63\065\uff63\066" +
    "\uff63\067\uff63\070\uff63\071\uff63\075\uff63\077\uff63\100\uff63" +
    "\101\uff63\102\uff63\103\uff63\104\uff63\105\uff63\106\uff63\107" +
    "\uff63\110\uff63\111\uff63\112\uff63\113\uff63\114\uff63\115\uff63" +
    "\116\uff63\117\uff63\120\uff63\121\uff63\122\uff63\123\uff63\125" +
    "\uff63\126\uff63\127\uff63\130\uff63\001\002\000\014\003\040" +
    "\034\036\071\043\074\037\076\035\001\002\000\010\003" +
    "\uff47\011\uff47\130\uff47\001\002\000\020\002\ufff9\003\ufff9" +
    "\004\ufff9\005\ufff9\007\ufff9\014\ufff9\015\ufff9\001\002\000" +
    "\020\002\uff4f\003\uff4f\004\uff4f\005\uff4f\007\uff4f\014\uff4f" +
    "\015\uff4f\001\002\000\102\027\uff1f\034\uff1f\035\uff1f\036" +
    "\uff1f\037\uff1f\040\uff1f\041\uff1f\042\uff1f\043\uff1f\044\uff1f" +
    "\045\uff1f\046\uff1f\047\uff1f\050\uff1f\051\uff1f\052\uff1f\053" +
    "\uff1f\054\uff1f\055\uff1f\056\uff1f\057\uff1f\060\uff1f\061\uff1f" +
    "\062\uff1f\063\uff1f\064\uff1f\071\uff1f\072\uff1f\073\uff1f\074" +
    "\uff1f\076\uff1f\124\uff1f\001\002\000\004\130\047\001\002" +
    "\000\004\003\u019d\001\002\000\102\027\067\034\036\035" +
    "\135\036\070\037\124\040\102\041\132\042\125\043\141" +
    "\044\131\045\126\046\061\047\155\050\130\051\147\052" +
    "\104\053\156\054\106\055\136\056\112\057\071\060\144" +
    "\061\113\062\073\063\162\064\153\071\056\072\075\073" +
    "\057\074\037\076\114\124\101\001\002\000\056\010\uffaa" +
    "\030\uffaa\066\uffaa\071\uffaa\075\uffaa\077\uffaa\100\uffaa\101" +
    "\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa" +
    "\110\uffaa\111\uffaa\112\uffaa\113\uffaa\125\uffaa\126\uffaa\127" +
    "\uffaa\130\uffaa\001\002\000\034\012\uff61\032\uff0d\100\uff61" +
    "\101\uff61\102\uff61\103\uff61\104\uff61\105\uff61\106\uff61\107" +
    "\uff61\110\uff61\111\uff61\127\uff61\001\002\000\070\003\uff3d" +
    "\010\uff3d\011\uff3d\030\uff3d\065\uff3d\066\uff3d\067\uff3d\070" +
    "\uff3d\071\uff3d\075\uff3d\077\uff3d\100\uff3d\101\uff3d\102\uff3d" +
    "\103\uff3d\104\uff3d\105\uff3d\106\uff3d\107\uff3d\110\uff3d\111" +
    "\uff3d\112\uff3d\113\uff3d\125\uff3d\126\uff3d\127\uff3d\130\uff3d" +
    "\001\002\000\056\010\uffb3\030\uffb3\066\uffb3\071\uffb3\075" +
    "\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3" +
    "\105\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3\112\uffb3\113" +
    "\uffb3\125\uffb3\126\uffb3\127\uffb3\130\uffb3\001\002\000\004" +
    "\124\u019a\001\002\000\056\010\uffb1\030\uffb1\066\uffb1\071" +
    "\uffb1\075\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1" +
    "\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\112" +
    "\uffb1\113\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1\001\002" +
    "\000\056\010\uffb5\030\uffb5\066\uffb5\071\uffb5\075\uffb5\077" +
    "\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5" +
    "\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5\125" +
    "\uffb5\126\uffb5\127\uffb5\130\uffb5\001\002\000\004\032\u0150" +
    "\001\002\000\056\010\uffbe\030\uffbe\066\uffbe\071\uffbe\075" +
    "\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe" +
    "\105\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe\113" +
    "\uffbe\125\uffbe\126\uffbe\127\uffbe\130\uffbe\001\002\000\056" +
    "\010\uffb8\030\uffb8\066\uffb8\071\uffb8\075\uffb8\077\uffb8\100" +
    "\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8" +
    "\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8\125\uffb8\126" +
    "\uffb8\127\uffb8\130\uffb8\001\002\000\004\124\u014c\001\002" +
    "\000\004\124\u0149\001\002\000\004\124\u0142\001\002\000" +
    "\056\010\uffaf\030\uffaf\066\uffaf\071\uffaf\075\uffaf\077\uffaf" +
    "\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106" +
    "\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf\125\uffaf" +
    "\126\uffaf\127\uffaf\130\uffaf\001\002\000\004\124\u013b\001" +
    "\002\000\056\010\uffa6\030\uffa6\066\uffa6\071\uffa6\075\uffa6" +
    "\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105" +
    "\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6" +
    "\125\uffa6\126\uffa6\127\uffa6\130\uffa6\001\002\000\070\003" +
    "\uff3e\010\uff3e\011\uff3e\030\uff3e\065\uff3e\066\uff3e\067\uff3e" +
    "\070\uff3e\071\uff3e\075\uff3e\077\uff3e\100\uff3e\101\uff3e\102" +
    "\uff3e\103\uff3e\104\uff3e\105\uff3e\106\uff3e\107\uff3e\110\uff3e" +
    "\111\uff3e\112\uff3e\113\uff3e\125\uff3e\126\uff3e\127\uff3e\130" +
    "\uff3e\001\002\000\056\010\uffa2\030\uffa2\066\uffa2\071\uffa2" +
    "\075\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104" +
    "\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2" +
    "\113\uffa2\125\uffa2\126\uffa2\127\uffa2\130\uffa2\001\002\000" +
    "\056\010\uffb0\030\uffb0\066\uffb0\071\uffb0\075\uffb0\077\uffb0" +
    "\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106" +
    "\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0\125\uffb0" +
    "\126\uffb0\127\uffb0\130\uffb0\001\002\000\070\003\uff3f\010" +
    "\uff3f\011\uff3f\030\uff3f\065\uff3f\066\uff3f\067\uff3f\070\uff3f" +
    "\071\uff3f\075\uff3f\077\uff3f\100\uff3f\101\uff3f\102\uff3f\103" +
    "\uff3f\104\uff3f\105\uff3f\106\uff3f\107\uff3f\110\uff3f\111\uff3f" +
    "\112\uff3f\113\uff3f\125\uff3f\126\uff3f\127\uff3f\130\uff3f\001" +
    "\002\000\102\027\067\034\036\035\135\036\070\037\124" +
    "\040\102\041\132\042\125\043\141\044\131\045\126\046" +
    "\061\047\155\050\130\051\147\052\104\053\156\054\106" +
    "\055\136\056\112\057\071\060\144\061\113\062\073\063" +
    "\162\064\153\071\043\072\075\073\057\074\037\076\035" +
    "\124\101\001\002\000\004\124\u0136\001\002\000\032\012" +
    "\u0132\100\uff63\101\uff63\102\uff63\103\uff63\104\uff63\105\uff63" +
    "\106\uff63\107\uff63\110\uff63\111\uff63\127\uff63\001\002\000" +
    "\004\124\u012c\001\002\000\056\010\uffae\030\uffae\066\uffae" +
    "\071\uffae\075\uffae\077\uffae\100\uffae\101\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\111\uffae" +
    "\112\uffae\113\uffae\125\uffae\126\uffae\127\uffae\130\uffae\001" +
    "\002\000\004\124\u0127\001\002\000\056\010\uffb9\030\uffb9" +
    "\066\uffb9\071\uffb9\075\uffb9\077\uffb9\100\uffb9\101\uffb9\102" +
    "\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9" +
    "\111\uffb9\112\uffb9\113\uffb9\125\uffb9\126\uffb9\127\uffb9\130" +
    "\uffb9\001\002\000\056\010\uffa9\030\uffa9\066\uffa9\071\uffa9" +
    "\075\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104" +
    "\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9" +
    "\113\uffa9\125\uffa9\126\uffa9\127\uffa9\130\uffa9\001\002\000" +
    "\004\124\u011f\001\002\000\004\124\u010c\001\002\000\004" +
    "\124\u0107\001\002\000\034\012\uff60\032\uff0c\100\uff60\101" +
    "\uff60\102\uff60\103\uff60\104\uff60\105\uff60\106\uff60\107\uff60" +
    "\110\uff60\111\uff60\127\uff60\001\002\000\056\010\uffa0\030" +
    "\uffa0\066\uffa0\071\uffa0\075\uffa0\077\uffa0\100\uffa0\101\uffa0" +
    "\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110" +
    "\uffa0\111\uffa0\112\uffa0\113\uffa0\125\uffa0\126\uffa0\127\uffa0" +
    "\130\uffa0\001\002\000\056\010\uffa3\030\uffa3\066\uffa3\071" +
    "\uffa3\075\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3" +
    "\104\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\111\uffa3\112" +
    "\uffa3\113\uffa3\125\uffa3\126\uffa3\127\uffa3\130\uffa3\001\002" +
    "\000\056\010\uffa7\030\uffa7\066\uffa7\071\uffa7\075\uffa7\077" +
    "\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7" +
    "\106\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7\125" +
    "\uffa7\126\uffa7\127\uffa7\130\uffa7\001\002\000\056\010\uffac" +
    "\030\uffac\066\uffac\071\uffac\075\uffac\077\uffac\100\uffac\101" +
    "\uffac\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac" +
    "\110\uffac\111\uffac\112\uffac\113\uffac\125\uffac\126\uffac\127" +
    "\uffac\130\uffac\001\002\000\056\010\uffbb\030\uffbb\066\uffbb" +
    "\071\uffbb\075\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103" +
    "\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb" +
    "\112\uffbb\113\uffbb\125\uffbb\126\uffbb\127\uffbb\130\uffbb\001" +
    "\002\000\056\010\uffbc\030\uffbc\066\uffbc\071\uffbc\075\uffbc" +
    "\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105" +
    "\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc" +
    "\125\uffbc\126\uffbc\127\uffbc\130\uffbc\001\002\000\042\066" +
    "\uff18\100\uff18\101\uff18\102\uff18\103\uff18\104\uff18\105\uff18" +
    "\106\uff18\107\167\110\166\111\170\112\uff18\113\uff18\125" +
    "\uff18\127\174\130\uff18\001\002\000\004\124\u0104\001\002" +
    "\000\004\124\374\001\002\000\004\124\364\001\002\000" +
    "\020\100\362\101\361\102\360\103\356\104\354\105\353" +
    "\106\357\001\002\000\004\124\346\001\002\000\004\124" +
    "\340\001\002\000\004\124\326\001\002\000\056\010\uffb4" +
    "\030\uffb4\066\uffb4\071\uffb4\075\uffb4\077\uffb4\100\uffb4\101" +
    "\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4" +
    "\110\uffb4\111\uffb4\112\uffb4\113\uffb4\125\uffb4\126\uffb4\127" +
    "\uffb4\130\uffb4\001\002\000\056\010\uffa8\030\uffa8\066\uffa8" +
    "\071\uffa8\075\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\103" +
    "\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8" +
    "\112\uffa8\113\uffa8\125\uffa8\126\uffa8\127\uffa8\130\uffa8\001" +
    "\002\000\004\124\321\001\002\000\004\124\302\001\002" +
    "\000\056\010\uffbf\030\uffbf\066\uffbf\071\uffbf\075\uffbf\077" +
    "\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf" +
    "\106\uffbf\107\uffbf\110\uffbf\111\uffbf\112\uffbf\113\uffbf\125" +
    "\uffbf\126\uffbf\127\uffbf\130\uffbf\001\002\000\014\066\uff1d" +
    "\112\300\113\276\125\uff1d\130\uff1d\001\002\000\004\124" +
    "\266\001\002\000\006\125\uff20\130\uff20\001\002\000\056" +
    "\010\uffb6\030\uffb6\066\uffb6\071\uffb6\075\uffb6\077\uffb6\100" +
    "\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6" +
    "\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\125\uffb6\126" +
    "\uffb6\127\uffb6\130\uffb6\001\002\000\004\124\uffcb\001\002" +
    "\000\056\010\uffb2\030\uffb2\066\uffb2\071\uffb2\075\uffb2\077" +
    "\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2" +
    "\106\uffb2\107\uffb2\110\uffb2\111\uffb2\112\uffb2\113\uffb2\125" +
    "\uffb2\126\uffb2\127\uffb2\130\uffb2\001\002\000\056\010\uffc0" +
    "\030\uffc0\066\uffc0\071\uffc0\075\uffc0\077\uffc0\100\uffc0\101" +
    "\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0" +
    "\110\uffc0\111\uffc0\112\uffc0\113\uffc0\125\uffc0\126\uffc0\127" +
    "\uffc0\130\uffc0\001\002\000\004\124\260\001\002\000\056" +
    "\010\uffa4\030\uffa4\066\uffa4\071\uffa4\075\uffa4\077\uffa4\100" +
    "\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4" +
    "\107\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4\125\uffa4\126" +
    "\uffa4\127\uffa4\130\uffa4\001\002\000\056\010\uffa1\030\uffa1" +
    "\066\uffa1\071\uffa1\075\uffa1\077\uffa1\100\uffa1\101\uffa1\102" +
    "\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1" +
    "\111\uffa1\112\uffa1\113\uffa1\125\uffa1\126\uffa1\127\uffa1\130" +
    "\uffa1\001\002\000\056\010\uffa5\030\uffa5\066\uffa5\071\uffa5" +
    "\075\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104" +
    "\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5\112\uffa5" +
    "\113\uffa5\125\uffa5\126\uffa5\127\uffa5\130\uffa5\001\002\000" +
    "\014\034\036\065\221\071\043\074\037\076\035\001\002" +
    "\000\056\010\uffad\030\uffad\066\uffad\071\uffad\075\uffad\077" +
    "\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105\uffad" +
    "\106\uffad\107\uffad\110\uffad\111\uffad\112\uffad\113\uffad\125" +
    "\uffad\126\uffad\127\uffad\130\uffad\001\002\000\004\124\213" +
    "\001\002\000\004\124\203\001\002\000\056\010\uffb7\030" +
    "\uffb7\066\uffb7\071\uffb7\075\uffb7\077\uffb7\100\uffb7\101\uffb7" +
    "\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110" +
    "\uffb7\111\uffb7\112\uffb7\113\uffb7\125\uffb7\126\uffb7\127\uffb7" +
    "\130\uffb7\001\002\000\056\010\uffba\030\uffba\066\uffba\071" +
    "\uffba\075\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba" +
    "\104\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba\112" +
    "\uffba\113\uffba\125\uffba\126\uffba\127\uffba\130\uffba\001\002" +
    "\000\070\003\uff3c\010\uff3c\011\uff3c\030\uff3c\065\uff3c\066" +
    "\uff3c\067\uff3c\070\uff3c\071\uff3c\075\uff3c\077\uff3c\100\uff3c" +
    "\101\uff3c\102\uff3c\103\uff3c\104\uff3c\105\uff3c\106\uff3c\107" +
    "\uff3c\110\uff3c\111\uff3c\112\uff3c\113\uff3c\125\uff3c\126\uff3c" +
    "\127\uff3c\130\uff3c\001\002\000\004\124\164\001\002\000" +
    "\056\010\uffab\030\uffab\066\uffab\071\uffab\075\uffab\077\uffab" +
    "\100\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab\106" +
    "\uffab\107\uffab\110\uffab\111\uffab\112\uffab\113\uffab\125\uffab" +
    "\126\uffab\127\uffab\130\uffab\001\002\000\102\027\067\034" +
    "\036\035\135\036\070\037\124\040\102\041\132\042\125" +
    "\043\141\044\131\045\126\046\061\047\155\050\130\051" +
    "\147\052\104\053\156\054\106\055\136\056\112\057\071" +
    "\060\144\061\113\062\073\063\162\064\153\071\043\072" +
    "\075\073\057\074\037\076\035\124\101\001\002\000\016" +
    "\107\167\110\166\111\170\125\173\126\172\127\174\001" +
    "\002\000\102\027\uff38\034\uff38\035\uff38\036\uff38\037\uff38" +
    "\040\uff38\041\uff38\042\uff38\043\uff38\044\uff38\045\uff38\046" +
    "\uff38\047\uff38\050\uff38\051\uff38\052\uff38\053\uff38\054\uff38" +
    "\055\uff38\056\uff38\057\uff38\060\uff38\061\uff38\062\uff38\063" +
    "\uff38\064\uff38\071\uff38\072\uff38\073\uff38\074\uff38\076\uff38" +
    "\124\uff38\001\002\000\102\027\uff39\034\uff39\035\uff39\036" +
    "\uff39\037\uff39\040\uff39\041\uff39\042\uff39\043\uff39\044\uff39" +
    "\045\uff39\046\uff39\047\uff39\050\uff39\051\uff39\052\uff39\053" +
    "\uff39\054\uff39\055\uff39\056\uff39\057\uff39\060\uff39\061\uff39" +
    "\062\uff39\063\uff39\064\uff39\071\uff39\072\uff39\073\uff39\074" +
    "\uff39\076\uff39\124\uff39\001\002\000\102\027\uff36\034\uff36" +
    "\035\uff36\036\uff36\037\uff36\040\uff36\041\uff36\042\uff36\043" +
    "\uff36\044\uff36\045\uff36\046\uff36\047\uff36\050\uff36\051\uff36" +
    "\052\uff36\053\uff36\054\uff36\055\uff36\056\uff36\057\uff36\060" +
    "\uff36\061\uff36\062\uff36\063\uff36\064\uff36\071\uff36\072\uff36" +
    "\073\uff36\074\uff36\076\uff36\124\uff36\001\002\000\102\027" +
    "\067\034\036\035\135\036\070\037\124\040\102\041\132" +
    "\042\125\043\141\044\131\045\126\046\061\047\155\050" +
    "\130\051\147\052\104\053\156\054\106\055\136\056\112" +
    "\057\071\060\144\061\113\062\073\063\162\064\153\071" +
    "\043\072\075\073\057\074\037\076\035\124\101\001\002" +
    "\000\102\027\067\034\036\035\135\036\070\037\124\040" +
    "\102\041\132\042\125\043\141\044\131\045\126\046\061" +
    "\047\155\050\130\051\147\052\104\053\156\054\106\055" +
    "\136\056\112\057\071\060\144\061\113\062\073\063\162" +
    "\064\153\071\043\072\075\073\057\074\037\076\035\124" +
    "\101\001\002\000\056\010\uff9c\030\uff9c\066\uff9c\071\uff9c" +
    "\075\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104" +
    "\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c\111\uff9c\112\uff9c" +
    "\113\uff9c\125\uff9c\126\uff9c\127\uff9c\130\uff9c\001\002\000" +
    "\102\027\uff37\034\uff37\035\uff37\036\uff37\037\uff37\040\uff37" +
    "\041\uff37\042\uff37\043\uff37\044\uff37\045\uff37\046\uff37\047" +
    "\uff37\050\uff37\051\uff37\052\uff37\053\uff37\054\uff37\055\uff37" +
    "\056\uff37\057\uff37\060\uff37\061\uff37\062\uff37\063\uff37\064" +
    "\uff37\071\uff37\072\uff37\073\uff37\074\uff37\076\uff37\124\uff37" +
    "\001\002\000\016\107\167\110\166\111\170\125\177\126" +
    "\176\127\174\001\002\000\102\027\067\034\036\035\135" +
    "\036\070\037\124\040\102\041\132\042\125\043\141\044" +
    "\131\045\126\046\061\047\155\050\130\051\147\052\104" +
    "\053\156\054\106\055\136\056\112\057\071\060\144\061" +
    "\113\062\073\063\162\064\153\071\043\072\075\073\057" +
    "\074\037\076\035\124\101\001\002\000\056\010\uff9b\030" +
    "\uff9b\066\uff9b\071\uff9b\075\uff9b\077\uff9b\100\uff9b\101\uff9b" +
    "\102\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110" +
    "\uff9b\111\uff9b\112\uff9b\113\uff9b\125\uff9b\126\uff9b\127\uff9b" +
    "\130\uff9b\001\002\000\014\107\167\110\166\111\170\125" +
    "\201\127\174\001\002\000\056\010\uff9a\030\uff9a\066\uff9a" +
    "\071\uff9a\075\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\103" +
    "\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a\111\uff9a" +
    "\112\uff9a\113\uff9a\125\uff9a\126\uff9a\127\uff9a\130\uff9a\001" +
    "\002\000\056\010\uffbd\030\uffbd\066\uffbd\071\uffbd\075\uffbd" +
    "\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105" +
    "\uffbd\106\uffbd\107\167\110\166\111\170\112\uffbd\113\uffbd" +
    "\125\uffbd\126\uffbd\127\174\130\uffbd\001\002\000\012\071" +
    "\207\074\210\075\204\077\206\001\002\000\060\010\uff5e" +
    "\030\uff5e\066\uff5e\071\uff5e\075\uff5e\077\uff5e\100\uff5e\101" +
    "\uff5e\102\uff5e\103\uff5e\104\uff5e\105\uff5e\106\uff5e\107\uff5e" +
    "\110\uff5e\111\uff5e\112\uff5e\113\uff5e\124\uff5e\125\uff5e\126" +
    "\uff5e\127\uff5e\130\uff5e\001\002\000\004\125\uff78\001\002" +
    "\000\060\010\uff5c\030\uff5c\066\uff5c\071\uff5c\075\uff5c\077" +
    "\uff5c\100\uff5c\101\uff5c\102\uff5c\103\uff5c\104\uff5c\105\uff5c" +
    "\106\uff5c\107\uff5c\110\uff5c\111\uff5c\112\uff5c\113\uff5c\124" +
    "\uff5c\125\uff5c\126\uff5c\127\uff5c\130\uff5c\001\002\000\060" +
    "\010\uff5d\030\uff5d\066\uff5d\071\uff5d\075\uff5d\077\uff5d\100" +
    "\uff5d\101\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d" +
    "\107\uff5d\110\uff5d\111\uff5d\112\uff5d\113\uff5d\124\uff5d\125" +
    "\uff5d\126\uff5d\127\uff5d\130\uff5d\001\002\000\004\125\uff79" +
    "\001\002\000\004\125\212\001\002\000\056\010\uff92\030" +
    "\uff92\066\uff92\071\uff92\075\uff92\077\uff92\100\uff92\101\uff92" +
    "\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92\110" +
    "\uff92\111\uff92\112\uff92\113\uff92\125\uff92\126\uff92\127\uff92" +
    "\130\uff92\001\002\000\004\074\214\001\002\000\004\125" +
    "\215\001\002\000\056\010\uff8d\030\uff8d\066\uff8d\071\uff8d" +
    "\075\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104" +
    "\uff8d\105\uff8d\106\uff8d\107\uff8d\110\uff8d\111\uff8d\112\uff8d" +
    "\113\uff8d\125\uff8d\126\uff8d\127\uff8d\130\uff8d\001\002\000" +
    "\010\065\221\067\uff56\070\uff56\001\002\000\004\065\221" +
    "\001\002\000\004\066\250\001\002\000\102\027\067\034" +
    "\245\035\135\036\070\037\124\040\102\041\132\042\125" +
    "\043\141\044\131\045\126\046\061\047\155\050\130\051" +
    "\147\052\104\053\156\054\106\055\136\056\112\057\071" +
    "\060\144\061\113\062\073\063\162\064\153\071\240\072" +
    "\242\073\241\074\243\076\244\124\101\001\002\000\006" +
    "\067\223\070\225\001\002\000\022\034\036\064\153\071" +
    "\043\072\075\073\057\074\037\076\035\124\227\001\002" +
    "\000\004\070\226\001\002\000\070\003\uff5b\010\uff5b\011" +
    "\uff5b\030\uff5b\065\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b" +
    "\075\uff5b\077\uff5b\100\uff5b\101\uff5b\102\uff5b\103\uff5b\104" +
    "\uff5b\105\uff5b\106\uff5b\107\uff5b\110\uff5b\111\uff5b\112\uff5b" +
    "\113\uff5b\125\uff5b\126\uff5b\127\uff5b\130\uff5b\001\002\000" +
    "\070\003\uff5a\010\uff5a\011\uff5a\030\uff5a\065\uff5a\066\uff5a" +
    "\067\uff5a\070\uff5a\071\uff5a\075\uff5a\077\uff5a\100\uff5a\101" +
    "\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a\106\uff5a\107\uff5a" +
    "\110\uff5a\111\uff5a\112\uff5a\113\uff5a\125\uff5a\126\uff5a\127" +
    "\uff5a\130\uff5a\001\002\000\022\034\036\064\153\071\043" +
    "\072\075\073\057\074\037\076\035\124\227\001\002\000" +
    "\032\003\uff42\011\uff42\065\uff42\067\uff42\070\uff42\107\uff42" +
    "\110\uff42\111\uff42\125\uff42\126\uff42\127\uff42\130\uff42\001" +
    "\002\000\032\003\uff41\011\uff41\065\uff41\067\uff41\070\uff41" +
    "\107\uff41\110\uff41\111\uff41\125\uff41\126\uff41\127\uff41\130" +
    "\uff41\001\002\000\032\003\uff40\011\uff40\065\uff40\067\uff40" +
    "\070\uff40\107\uff40\110\uff40\111\uff40\125\uff40\126\uff40\127" +
    "\uff40\130\uff40\001\002\000\014\070\uff51\107\167\110\166" +
    "\111\170\127\174\001\002\000\022\034\036\064\153\071" +
    "\043\072\075\073\057\074\037\076\035\124\227\001\002" +
    "\000\032\003\uff3a\011\uff3a\065\uff3a\067\uff3a\070\uff3a\107" +
    "\167\110\166\111\170\125\uff3a\126\uff3a\127\174\130\uff3a" +
    "\001\002\000\014\107\167\110\166\111\170\125\237\127" +
    "\174\001\002\000\032\003\uff3b\011\uff3b\065\uff3b\067\uff3b" +
    "\070\uff3b\107\uff3b\110\uff3b\111\uff3b\125\uff3b\126\uff3b\127" +
    "\uff3b\130\uff3b\001\002\000\036\012\uff61\032\uff0d\066\uff0b" +
    "\100\uff61\101\uff61\102\uff61\103\uff61\104\uff61\105\uff61\106" +
    "\uff61\107\uff61\110\uff61\111\uff61\127\uff61\001\002\000\032" +
    "\066\uff09\100\uff3d\101\uff3d\102\uff3d\103\uff3d\104\uff3d\105" +
    "\uff3d\106\uff3d\107\uff3d\110\uff3d\111\uff3d\127\uff3d\001\002" +
    "\000\032\066\uff0a\100\uff3e\101\uff3e\102\uff3e\103\uff3e\104" +
    "\uff3e\105\uff3e\106\uff3e\107\uff3e\110\uff3e\111\uff3e\127\uff3e" +
    "\001\002\000\034\012\uff5f\066\uff08\100\uff5f\101\uff5f\102" +
    "\uff5f\103\uff5f\104\uff5f\105\uff5f\106\uff5f\107\uff5f\110\uff5f" +
    "\111\uff5f\127\uff5f\001\002\000\036\012\uff60\032\uff0c\066" +
    "\uff07\100\uff60\101\uff60\102\uff60\103\uff60\104\uff60\105\uff60" +
    "\106\uff60\107\uff60\110\uff60\111\uff60\127\uff60\001\002\000" +
    "\032\066\uff06\100\uff62\101\uff62\102\uff62\103\uff62\104\uff62" +
    "\105\uff62\106\uff62\107\uff62\110\uff62\111\uff62\127\uff62\001" +
    "\002\000\004\066\uff54\001\002\000\004\066\uff53\001\002" +
    "\000\022\034\036\064\153\071\043\072\075\073\057\074" +
    "\037\076\035\124\227\001\002\000\010\065\uff55\067\uff55" +
    "\070\uff55\001\002\000\020\065\uff52\067\uff52\070\uff52\107" +
    "\167\110\166\111\170\127\174\001\002\000\006\067\223" +
    "\070\255\001\002\000\004\070\256\001\002\000\070\003" +
    "\uff59\010\uff59\011\uff59\030\uff59\065\uff59\066\uff59\067\uff59" +
    "\070\uff59\071\uff59\075\uff59\077\uff59\100\uff59\101\uff59\102" +
    "\uff59\103\uff59\104\uff59\105\uff59\106\uff59\107\uff59\110\uff59" +
    "\111\uff59\112\uff59\113\uff59\125\uff59\126\uff59\127\uff59\130" +
    "\uff59\001\002\000\070\003\uff58\010\uff58\011\uff58\030\uff58" +
    "\065\uff58\066\uff58\067\uff58\070\uff58\071\uff58\075\uff58\077" +
    "\uff58\100\uff58\101\uff58\102\uff58\103\uff58\104\uff58\105\uff58" +
    "\106\uff58\107\uff58\110\uff58\111\uff58\112\uff58\113\uff58\125" +
    "\uff58\126\uff58\127\uff58\130\uff58\001\002\000\006\067\uff57" +
    "\070\uff57\001\002\000\004\074\262\001\002\000\004\125" +
    "\265\001\002\000\006\125\uff7b\126\263\001\002\000\004" +
    "\074\262\001\002\000\004\125\uff7c\001\002\000\056\010" +
    "\uff95\030\uff95\066\uff95\071\uff95\075\uff95\077\uff95\100\uff95" +
    "\101\uff95\102\uff95\103\uff95\104\uff95\105\uff95\106\uff95\107" +
    "\uff95\110\uff95\111\uff95\112\uff95\113\uff95\125\uff95\126\uff95" +
    "\127\uff95\130\uff95\001\002\000\004\074\267\001\002\000" +
    "\004\126\272\001\002\000\004\125\271\001\002\000\056" +
    "\010\uff97\030\uff97\066\uff97\071\uff97\075\uff97\077\uff97\100" +
    "\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97\106\uff97" +
    "\107\uff97\110\uff97\111\uff97\112\uff97\113\uff97\125\uff97\126" +
    "\uff97\127\uff97\130\uff97\001\002\000\004\072\273\001\002" +
    "\000\004\126\274\001\002\000\004\074\275\001\002\000" +
    "\004\125\uff74\001\002\000\102\027\ufefd\034\ufefd\035\ufefd" +
    "\036\ufefd\037\ufefd\040\ufefd\041\ufefd\042\ufefd\043\ufefd\044" +
    "\ufefd\045\ufefd\046\ufefd\047\ufefd\050\ufefd\051\ufefd\052\ufefd" +
    "\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\061" +
    "\ufefd\062\ufefd\063\ufefd\064\ufefd\071\ufefd\072\ufefd\073\ufefd" +
    "\074\ufefd\076\ufefd\124\ufefd\001\002\000\102\027\067\034" +
    "\036\035\135\036\070\037\124\040\102\041\132\042\125" +
    "\043\141\044\131\045\126\046\061\047\155\050\130\051" +
    "\147\052\104\053\156\054\106\055\136\056\112\057\071" +
    "\060\144\061\113\062\073\063\162\064\153\071\056\072" +
    "\075\073\057\074\037\076\114\124\101\001\002\000\102" +
    "\027\ufefe\034\ufefe\035\ufefe\036\ufefe\037\ufefe\040\ufefe\041" +
    "\ufefe\042\ufefe\043\ufefe\044\ufefe\045\ufefe\046\ufefe\047\ufefe" +
    "\050\ufefe\051\ufefe\052\ufefe\053\ufefe\054\ufefe\055\ufefe\056" +
    "\ufefe\057\ufefe\060\ufefe\061\ufefe\062\ufefe\063\ufefe\064\ufefe" +
    "\071\ufefe\072\ufefe\073\ufefe\074\ufefe\076\ufefe\124\ufefe\001" +
    "\002\000\010\066\uff1e\125\uff1e\130\uff1e\001\002\000\004" +
    "\072\303\001\002\000\004\126\304\001\002\000\014\033" +
    "\305\034\311\071\043\074\037\076\035\001\002\000\012" +
    "\034\320\071\043\074\037\076\035\001\002\000\006\125" +
    "\uff83\126\uff83\001\002\000\004\125\314\001\002\000\006" +
    "\125\uff7f\126\312\001\002\000\006\125\uff84\126\uff84\001" +
    "\002\000\014\033\305\034\311\071\043\074\037\076\035" +
    "\001\002\000\004\125\uff80\001\002\000\004\030\315\001" +
    "\002\000\010\071\207\075\204\077\206\001\002\000\056" +
    "\010\uff82\030\uff82\066\uff82\071\uff82\075\uff82\077\uff82\100" +
    "\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\106\uff82" +
    "\107\uff82\110\uff82\111\uff82\112\uff82\113\uff82\125\uff82\126" +
    "\uff82\127\uff82\130\uff82\001\002\000\006\125\uff86\126\uff86" +
    "\001\002\000\006\125\uff85\126\uff85\001\002\000\016\033" +
    "\305\034\311\071\043\074\037\076\035\127\323\001\002" +
    "\000\004\125\325\001\002\000\004\125\324\001\002\000" +
    "\056\010\uff8f\030\uff8f\066\uff8f\071\uff8f\075\uff8f\077\uff8f" +
    "\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106" +
    "\uff8f\107\uff8f\110\uff8f\111\uff8f\112\uff8f\113\uff8f\125\uff8f" +
    "\126\uff8f\127\uff8f\130\uff8f\001\002\000\056\010\uff90\030" +
    "\uff90\066\uff90\071\uff90\075\uff90\077\uff90\100\uff90\101\uff90" +
    "\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90\107\uff90\110" +
    "\uff90\111\uff90\112\uff90\113\uff90\125\uff90\126\uff90\127\uff90" +
    "\130\uff90\001\002\000\016\033\327\034\332\071\043\074" +
    "\037\076\035\127\333\001\002\000\012\034\337\071\043" +
    "\074\037\076\035\001\002\000\004\125\uff6d\001\002\000" +
    "\004\125\335\001\002\000\004\125\uff6e\001\002\000\004" +
    "\125\334\001\002\000\056\010\uff87\030\uff87\066\uff87\071" +
    "\uff87\075\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103\uff87" +
    "\104\uff87\105\uff87\106\uff87\107\uff87\110\uff87\111\uff87\112" +
    "\uff87\113\uff87\125\uff87\126\uff87\127\uff87\130\uff87\001\002" +
    "\000\056\010\uff88\030\uff88\066\uff88\071\uff88\075\uff88\077" +
    "\uff88\100\uff88\101\uff88\102\uff88\103\uff88\104\uff88\105\uff88" +
    "\106\uff88\107\uff88\110\uff88\111\uff88\112\uff88\113\uff88\125" +
    "\uff88\126\uff88\127\uff88\130\uff88\001\002\000\004\125\uff70" +
    "\001\002\000\004\125\uff6f\001\002\000\012\034\036\071" +
    "\043\074\037\076\035\001\002\000\004\125\uff71\001\002" +
    "\000\004\125\343\001\002\000\004\030\344\001\002\000" +
    "\004\074\345\001\002\000\056\010\uff96\030\uff96\066\uff96" +
    "\071\uff96\075\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103" +
    "\uff96\104\uff96\105\uff96\106\uff96\107\uff96\110\uff96\111\uff96" +
    "\112\uff96\113\uff96\125\uff96\126\uff96\127\uff96\130\uff96\001" +
    "\002\000\014\033\305\034\311\071\043\074\037\076\035" +
    "\001\002\000\004\126\350\001\002\000\004\074\351\001" +
    "\002\000\004\125\352\001\002\000\056\010\uff8c\030\uff8c" +
    "\066\uff8c\071\uff8c\075\uff8c\077\uff8c\100\uff8c\101\uff8c\102" +
    "\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c\107\uff8c\110\uff8c" +
    "\111\uff8c\112\uff8c\113\uff8c\125\uff8c\126\uff8c\127\uff8c\130" +
    "\uff8c\001\002\000\102\027\uff00\034\uff00\035\uff00\036\uff00" +
    "\037\uff00\040\uff00\041\uff00\042\uff00\043\uff00\044\uff00\045" +
    "\uff00\046\uff00\047\uff00\050\uff00\051\uff00\052\uff00\053\uff00" +
    "\054\uff00\055\uff00\056\uff00\057\uff00\060\uff00\061\uff00\062" +
    "\uff00\063\uff00\064\uff00\071\uff00\072\uff00\073\uff00\074\uff00" +
    "\076\uff00\124\uff00\001\002\000\102\027\uff01\034\uff01\035" +
    "\uff01\036\uff01\037\uff01\040\uff01\041\uff01\042\uff01\043\uff01" +
    "\044\uff01\045\uff01\046\uff01\047\uff01\050\uff01\051\uff01\052" +
    "\uff01\053\uff01\054\uff01\055\uff01\056\uff01\057\uff01\060\uff01" +
    "\061\uff01\062\uff01\063\uff01\064\uff01\071\uff01\072\uff01\073" +
    "\uff01\074\uff01\076\uff01\124\uff01\001\002\000\102\027\067" +
    "\034\036\035\135\036\070\037\124\040\102\041\132\042" +
    "\125\043\141\044\131\045\126\046\061\047\155\050\130" +
    "\051\147\052\104\053\156\054\106\055\136\056\112\057" +
    "\071\060\144\061\113\062\073\063\162\064\153\071\043" +
    "\072\075\073\057\074\037\076\035\124\101\001\002\000" +
    "\102\027\uff02\034\uff02\035\uff02\036\uff02\037\uff02\040\uff02" +
    "\041\uff02\042\uff02\043\uff02\044\uff02\045\uff02\046\uff02\047" +
    "\uff02\050\uff02\051\uff02\052\uff02\053\uff02\054\uff02\055\uff02" +
    "\056\uff02\057\uff02\060\uff02\061\uff02\062\uff02\063\uff02\064" +
    "\uff02\071\uff02\072\uff02\073\uff02\074\uff02\076\uff02\124\uff02" +
    "\001\002\000\102\027\ufeff\034\ufeff\035\ufeff\036\ufeff\037" +
    "\ufeff\040\ufeff\041\ufeff\042\ufeff\043\ufeff\044\ufeff\045\ufeff" +
    "\046\ufeff\047\ufeff\050\ufeff\051\ufeff\052\ufeff\053\ufeff\054" +
    "\ufeff\055\ufeff\056\ufeff\057\ufeff\060\ufeff\061\ufeff\062\ufeff" +
    "\063\ufeff\064\ufeff\071\ufeff\072\ufeff\073\ufeff\074\ufeff\076" +
    "\ufeff\124\ufeff\001\002\000\102\027\uff03\034\uff03\035\uff03" +
    "\036\uff03\037\uff03\040\uff03\041\uff03\042\uff03\043\uff03\044" +
    "\uff03\045\uff03\046\uff03\047\uff03\050\uff03\051\uff03\052\uff03" +
    "\053\uff03\054\uff03\055\uff03\056\uff03\057\uff03\060\uff03\061" +
    "\uff03\062\uff03\063\uff03\064\uff03\071\uff03\072\uff03\073\uff03" +
    "\074\uff03\076\uff03\124\uff03\001\002\000\102\027\uff04\034" +
    "\uff04\035\uff04\036\uff04\037\uff04\040\uff04\041\uff04\042\uff04" +
    "\043\uff04\044\uff04\045\uff04\046\uff04\047\uff04\050\uff04\051" +
    "\uff04\052\uff04\053\uff04\054\uff04\055\uff04\056\uff04\057\uff04" +
    "\060\uff04\061\uff04\062\uff04\063\uff04\064\uff04\071\uff04\072" +
    "\uff04\073\uff04\074\uff04\076\uff04\124\uff04\001\002\000\102" +
    "\027\uff05\034\uff05\035\uff05\036\uff05\037\uff05\040\uff05\041" +
    "\uff05\042\uff05\043\uff05\044\uff05\045\uff05\046\uff05\047\uff05" +
    "\050\uff05\051\uff05\052\uff05\053\uff05\054\uff05\055\uff05\056" +
    "\uff05\057\uff05\060\uff05\061\uff05\062\uff05\063\uff05\064\uff05" +
    "\071\uff05\072\uff05\073\uff05\074\uff05\076\uff05\124\uff05\001" +
    "\002\000\014\066\uff1c\112\uff1c\113\uff1c\125\uff1c\130\uff1c" +
    "\001\002\000\004\074\366\001\002\000\004\125\371\001" +
    "\002\000\006\125\uff7d\126\367\001\002\000\004\074\366" +
    "\001\002\000\004\125\uff7e\001\002\000\004\030\372\001" +
    "\002\000\004\074\373\001\002\000\056\010\uff99\030\uff99" +
    "\066\uff99\071\uff99\075\uff99\077\uff99\100\uff99\101\uff99\102" +
    "\uff99\103\uff99\104\uff99\105\uff99\106\uff99\107\uff99\110\uff99" +
    "\111\uff99\112\uff99\113\uff99\125\uff99\126\uff99\127\uff99\130" +
    "\uff99\001\002\000\004\074\375\001\002\000\004\126\u0100" +
    "\001\002\000\004\125\377\001\002\000\056\010\uff98\030" +
    "\uff98\066\uff98\071\uff98\075\uff98\077\uff98\100\uff98\101\uff98" +
    "\102\uff98\103\uff98\104\uff98\105\uff98\106\uff98\107\uff98\110" +
    "\uff98\111\uff98\112\uff98\113\uff98\125\uff98\126\uff98\127\uff98" +
    "\130\uff98\001\002\000\004\072\u0101\001\002\000\004\126" +
    "\u0102\001\002\000\004\074\u0103\001\002\000\004\125\uff75" +
    "\001\002\000\014\033\305\034\311\071\043\074\037\076" +
    "\035\001\002\000\004\125\u0106\001\002\000\056\010\uff8a" +
    "\030\uff8a\066\uff8a\071\uff8a\075\uff8a\077\uff8a\100\uff8a\101" +
    "\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107\uff8a" +
    "\110\uff8a\111\uff8a\112\uff8a\113\uff8a\125\uff8a\126\uff8a\127" +
    "\uff8a\130\uff8a\001\002\000\004\074\u0108\001\002\000\004" +
    "\126\u0109\001\002\000\004\074\u010a\001\002\000\004\125" +
    "\u010b\001\002\000\056\010\uff9e\030\uff9e\066\uff9e\071\uff9e" +
    "\075\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e\104" +
    "\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e\111\uff9e\112\uff9e" +
    "\113\uff9e\125\uff9e\126\uff9e\127\uff9e\130\uff9e\001\002\000" +
    "\004\072\u010d\001\002\000\020\100\u0115\101\u0114\102\u0113" +
    "\103\u0111\104\u010f\105\u010e\106\u0112\001\002\000\004\072" +
    "\uff67\001\002\000\004\072\uff68\001\002\000\004\072\u0116" +
    "\001\002\000\004\072\uff69\001\002\000\004\072\uff66\001" +
    "\002\000\004\072\uff6a\001\002\000\004\072\uff6b\001\002" +
    "\000\004\072\uff6c\001\002\000\004\126\u0117\001\002\000" +
    "\014\033\305\034\311\071\043\074\037\076\035\001\002" +
    "\000\004\126\u0119\001\002\000\014\033\305\034\311\071" +
    "\043\074\037\076\035\001\002\000\004\125\u011b\001\002" +
    "\000\004\030\u011c\001\002\000\010\071\207\075\204\077" +
    "\206\001\002\000\056\010\uff81\030\uff81\066\uff81\071\uff81" +
    "\075\uff81\077\uff81\100\uff81\101\uff81\102\uff81\103\uff81\104" +
    "\uff81\105\uff81\106\uff81\107\uff81\110\uff81\111\uff81\112\uff81" +
    "\113\uff81\125\uff81\126\uff81\127\uff81\130\uff81\001\002\000" +
    "\056\010\uff9f\030\uff9f\066\uff9f\071\uff9f\075\uff9f\077\uff9f" +
    "\100\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106" +
    "\uff9f\107\uff9f\110\uff9f\111\uff9f\112\uff9f\113\uff9f\125\uff9f" +
    "\126\uff9f\127\uff9f\130\uff9f\001\002\000\022\034\036\064" +
    "\153\071\043\072\075\073\057\074\037\076\035\124\227" +
    "\001\002\000\004\126\u0122\001\002\000\016\107\167\110" +
    "\166\111\170\125\uffcf\126\uffcf\127\174\001\002\000\022" +
    "\034\036\064\153\071\043\072\075\073\057\074\037\076" +
    "\035\124\227\001\002\000\004\126\u0124\001\002\000\022" +
    "\034\036\064\153\071\043\072\075\073\057\074\037\076" +
    "\035\124\227\001\002\000\004\125\u0126\001\002\000\056" +
    "\010\uffd0\030\uffd0\066\uffd0\071\uffd0\075\uffd0\077\uffd0\100" +
    "\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0" +
    "\107\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0\125\uffd0\126" +
    "\uffd0\127\uffd0\130\uffd0\001\002\000\012\071\207\074\u012a" +
    "\075\204\077\206\001\002\000\004\125\u012b\001\002\000" +
    "\004\125\uff76\001\002\000\004\125\uff77\001\002\000\056" +
    "\010\uff93\030\uff93\066\uff93\071\uff93\075\uff93\077\uff93\100" +
    "\uff93\101\uff93\102\uff93\103\uff93\104\uff93\105\uff93\106\uff93" +
    "\107\uff93\110\uff93\111\uff93\112\uff93\113\uff93\125\uff93\126" +
    "\uff93\127\uff93\130\uff93\001\002\000\004\074\u012e\001\002" +
    "\000\004\125\u012f\001\002\000\004\125\uff7a\001\002\000" +
    "\004\030\u0130\001\002\000\010\071\207\075\204\077\206" +
    "\001\002\000\056\010\uff94\030\uff94\066\uff94\071\uff94\075" +
    "\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94\104\uff94" +
    "\105\uff94\106\uff94\107\uff94\110\uff94\111\uff94\112\uff94\113" +
    "\uff94\125\uff94\126\uff94\127\uff94\130\uff94\001\002\000\006" +
    "\013\u0133\034\u0134\001\002\000\004\034\u0135\001\002\000" +
    "\014\066\uff1a\112\uff1a\113\uff1a\125\uff1a\130\uff1a\001\002" +
    "\000\014\066\uff19\112\uff19\113\uff19\125\uff19\130\uff19\001" +
    "\002\000\014\033\305\034\311\071\043\074\037\076\035" +
    "\001\002\000\004\125\u0138\001\002\000\056\010\uff89\030" +
    "\uff89\066\uff89\071\uff89\075\uff89\077\uff89\100\uff89\101\uff89" +
    "\102\uff89\103\uff89\104\uff89\105\uff89\106\uff89\107\uff89\110" +
    "\uff89\111\uff89\112\uff89\113\uff89\125\uff89\126\uff89\127\uff89" +
    "\130\uff89\001\002\000\014\107\167\110\166\111\170\125" +
    "\u013a\127\174\001\002\000\056\010\uffc1\030\uffc1\066\uffc1" +
    "\071\uffc1\075\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103" +
    "\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1" +
    "\112\uffc1\113\uffc1\125\uffc1\126\uffc1\127\uffc1\130\uffc1\001" +
    "\002\000\004\074\u013c\001\002\000\004\126\u013d\001\002" +
    "\000\004\074\u013e\001\002\000\004\126\u013f\001\002\000" +
    "\004\074\u0140\001\002\000\004\125\u0141\001\002\000\056" +
    "\010\uff9d\030\uff9d\066\uff9d\071\uff9d\075\uff9d\077\uff9d\100" +
    "\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106\uff9d" +
    "\107\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d\125\uff9d\126" +
    "\uff9d\127\uff9d\130\uff9d\001\002\000\010\071\043\074\037" +
    "\076\035\001\002\000\004\126\u0146\001\002\000\004\125" +
    "\u0145\001\002\000\056\010\uff91\030\uff91\066\uff91\071\uff91" +
    "\075\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\104" +
    "\uff91\105\uff91\106\uff91\107\uff91\110\uff91\111\uff91\112\uff91" +
    "\113\uff91\125\uff91\126\uff91\127\uff91\130\uff91\001\002\000" +
    "\006\072\u0147\074\u0148\001\002\000\004\125\uff65\001\002" +
    "\000\004\125\uff64\001\002\000\014\033\305\034\311\071" +
    "\043\074\037\076\035\001\002\000\004\125\u014b\001\002" +
    "\000\056\010\uff8b\030\uff8b\066\uff8b\071\uff8b\075\uff8b\077" +
    "\uff8b\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b" +
    "\106\uff8b\107\uff8b\110\uff8b\111\uff8b\112\uff8b\113\uff8b\125" +
    "\uff8b\126\uff8b\127\uff8b\130\uff8b\001\002\000\004\125\u014d" +
    "\001\002\000\056\010\uff73\030\uff73\066\uff73\071\uff73\075" +
    "\uff73\077\uff73\100\uff73\101\uff73\102\uff73\103\uff73\104\uff73" +
    "\105\uff73\106\uff73\107\167\110\166\111\170\112\uff73\113" +
    "\uff73\125\uff73\126\uff73\127\174\130\uff73\001\002\000\004" +
    "\072\u014f\001\002\000\056\010\uff72\030\uff72\066\uff72\071" +
    "\uff72\075\uff72\077\uff72\100\uff72\101\uff72\102\uff72\103\uff72" +
    "\104\uff72\105\uff72\106\uff72\107\uff72\110\uff72\111\uff72\112" +
    "\uff72\113\uff72\125\uff72\126\uff72\127\uff72\130\uff72\001\002" +
    "\000\004\124\u0151\001\002\000\020\004\006\034\u0157\071" +
    "\u015e\072\u0153\073\u015d\074\u015b\076\u0156\001\002\000\014" +
    "\066\uff1b\112\uff1b\113\uff1b\125\uff1b\130\uff1b\001\002\000" +
    "\036\011\uff0a\017\uff0a\020\uff0a\021\uff0a\022\uff0a\024\uff0a" +
    "\025\uff0a\065\uff0a\100\uff0a\112\uff0a\113\uff0a\125\uff0a\126" +
    "\uff0a\130\uff0a\001\002\000\004\125\u0199\001\002\000\012" +
    "\034\036\071\043\074\037\076\035\001\002\000\036\011" +
    "\uff07\017\uff07\020\uff07\021\uff07\022\uff07\024\uff07\025\uff07" +
    "\065\uff07\100\uff07\112\uff07\113\uff07\125\uff07\126\uff07\130" +
    "\uff07\001\002\000\036\011\uff06\017\uff06\020\uff06\021\uff06" +
    "\022\uff06\024\uff06\025\uff06\065\uff06\100\uff06\112\uff06\113" +
    "\uff06\125\uff06\126\uff06\130\uff06\001\002\000\006\125\uff0e" +
    "\126\u0196\001\002\000\004\125\uff16\001\002\000\004\125" +
    "\uff15\001\002\000\036\011\uff08\017\uff08\020\uff08\021\uff08" +
    "\022\uff08\024\uff08\025\uff08\065\uff08\100\uff08\112\uff08\113" +
    "\uff08\125\uff08\126\uff08\130\uff08\001\002\000\004\010\u015f" +
    "\001\002\000\036\011\uff09\017\uff09\020\uff09\021\uff09\022" +
    "\uff09\024\uff09\025\uff09\065\uff09\100\uff09\112\uff09\113\uff09" +
    "\125\uff09\126\uff09\130\uff09\001\002\000\036\011\uff0b\017" +
    "\uff0b\020\uff0b\021\uff0b\022\uff0b\024\uff0b\025\uff0b\065\uff0b" +
    "\100\uff0b\112\uff0b\113\uff0b\125\uff0b\126\uff0b\130\uff0b\001" +
    "\002\000\004\071\uff26\001\002\000\004\071\u0170\001\002" +
    "\000\022\011\051\017\u016b\020\u0164\021\u0167\022\u0165\024" +
    "\u0169\025\u0162\125\uff14\001\002\000\004\071\u0170\001\002" +
    "\000\004\071\u0170\001\002\000\006\023\u017c\025\u017b\001" +
    "\002\000\004\023\u0179\001\002\000\024\011\ufff1\017\u016b" +
    "\020\u0164\021\u0167\022\u0165\024\u0169\025\u0162\125\ufff1\130" +
    "\ufff1\001\002\000\006\023\u0176\025\u0175\001\002\000\004" +
    "\125\uff13\001\002\000\004\025\u0174\001\002\000\006\011" +
    "\051\125\uff12\001\002\000\004\025\u016c\001\002\000\004" +
    "\071\u0170\001\002\000\024\011\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\024\ufff0\025\ufff0\125\ufff0\130\ufff0\001\002" +
    "\000\036\003\uff25\006\uff25\011\uff25\017\uff25\020\uff25\021" +
    "\uff25\022\uff25\024\uff25\025\uff25\026\uff25\031\uff25\125\uff25" +
    "\126\uff25\130\uff25\001\002\000\036\003\uff24\006\uff24\011" +
    "\uff24\017\uff24\020\uff24\021\uff24\022\uff24\024\uff24\025\uff24" +
    "\026\uff24\031\uff24\125\uff24\126\uff24\130\uff24\001\002\000" +
    "\042\003\uff23\006\uff23\011\uff23\017\uff23\020\uff23\021\uff23" +
    "\022\uff23\024\uff23\025\uff23\026\uff23\031\uff23\071\u0172\075" +
    "\u0171\125\uff23\126\uff23\130\uff23\001\002\000\036\003\uff21" +
    "\006\uff21\011\uff21\017\uff21\020\uff21\021\uff21\022\uff21\024" +
    "\uff21\025\uff21\026\uff21\031\uff21\125\uff21\126\uff21\130\uff21" +
    "\001\002\000\036\003\uff22\006\uff22\011\uff22\017\uff22\020" +
    "\uff22\021\uff22\022\uff22\024\uff22\025\uff22\026\uff22\031\uff22" +
    "\125\uff22\126\uff22\130\uff22\001\002\000\004\125\uff11\001" +
    "\002\000\004\071\uffe6\001\002\000\004\071\uffe4\001\002" +
    "\000\004\025\u0177\001\002\000\004\071\uffe2\001\002\000" +
    "\010\011\ufff2\125\ufff2\130\ufff2\001\002\000\004\025\u017a" +
    "\001\002\000\004\071\uffe1\001\002\000\004\071\uffe5\001" +
    "\002\000\004\025\u017d\001\002\000\004\071\uffe3\001\002" +
    "\000\004\031\u0180\001\002\000\024\011\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\024\uffec\025\uffec\125\uffec\130\uffec" +
    "\001\002\000\016\034\u0157\071\u015e\072\u0153\073\u015d\074" +
    "\u015b\076\u0156\001\002\000\026\011\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\024\uffe0\025\uffe0\065\uffe0\125\uffe0\130" +
    "\uffe0\001\002\000\032\011\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\024\uffde\025\uffde\065\uffde\112\300\113\276\125" +
    "\uffde\130\uffde\001\002\000\004\100\u0184\001\002\000\016" +
    "\034\u0157\071\u015e\072\u0153\073\u015d\074\u015b\076\u0156\001" +
    "\002\000\032\011\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\024\uffdd\025\uffdd\065\uffdd\112\uffdd\113\uffdd\125\uffdd\130" +
    "\uffdd\001\002\000\016\034\u0157\071\u015e\072\u0153\073\u015d" +
    "\074\u015b\076\u0156\001\002\000\026\011\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\065\uffdf\125\uffdf" +
    "\130\uffdf\001\002\000\030\011\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\024\uffef\025\uffef\026\u018a\031\u0180\125\uffef" +
    "\130\uffef\001\002\000\024\011\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\024\uffed\025\uffed\125\uffed\130\uffed\001\002" +
    "\000\004\124\u018c\001\002\000\024\011\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\024\uffee\025\uffee\125\uffee\130\uffee" +
    "\001\002\000\010\071\043\074\037\076\035\001\002\000" +
    "\006\125\uffe7\126\u0190\001\002\000\004\125\u018f\001\002" +
    "\000\024\011\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\024" +
    "\uffe9\025\uffe9\125\uffe9\130\uffe9\001\002\000\010\071\043" +
    "\074\037\076\035\001\002\000\004\125\uffe8\001\002\000" +
    "\026\011\uff27\017\uff27\020\uff27\021\uff27\022\uff27\024\uff27" +
    "\025\uff27\125\uff27\126\u0194\130\uff27\001\002\000\024\011" +
    "\uff29\017\uff29\020\uff29\021\uff29\022\uff29\024\uff29\025\uff29" +
    "\125\uff29\130\uff29\001\002\000\004\071\u0170\001\002\000" +
    "\024\011\uff28\017\uff28\020\uff28\021\uff28\022\uff28\024\uff28" +
    "\025\uff28\125\uff28\130\uff28\001\002\000\016\034\u0157\071" +
    "\u015e\072\u0153\073\u015d\074\u015b\076\u0156\001\002\000\004" +
    "\125\uff0f\001\002\000\004\010\uff10\001\002\000\014\066" +
    "\uff17\112\uff17\113\uff17\125\uff17\130\uff17\001\002\000\004" +
    "\074\u019b\001\002\000\004\125\u019c\001\002\000\056\010" +
    "\uff8e\030\uff8e\066\uff8e\071\uff8e\075\uff8e\077\uff8e\100\uff8e" +
    "\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107" +
    "\uff8e\110\uff8e\111\uff8e\112\uff8e\113\uff8e\125\uff8e\126\uff8e" +
    "\127\uff8e\130\uff8e\001\002\000\020\002\uff4e\003\uff4e\004" +
    "\uff4e\005\uff4e\007\uff4e\014\uff4e\015\uff4e\001\002\000\020" +
    "\002\uff50\003\uff50\004\uff50\005\uff50\007\uff50\014\uff50\015" +
    "\uff50\001\002\000\022\034\uff30\064\uff30\071\uff30\072\uff30" +
    "\073\uff30\074\uff30\076\uff30\124\uff30\001\002\000\022\034" +
    "\uff31\064\uff31\071\uff31\072\uff31\073\uff31\074\uff31\076\uff31" +
    "\124\uff31\001\002\000\022\034\uff35\064\uff35\071\uff35\072" +
    "\uff35\073\uff35\074\uff35\076\uff35\124\uff35\001\002\000\022" +
    "\034\uff2f\064\uff2f\071\uff2f\072\uff2f\073\uff2f\074\uff2f\076" +
    "\uff2f\124\uff2f\001\002\000\022\034\uff2d\064\uff2d\071\uff2d" +
    "\072\uff2d\073\uff2d\074\uff2d\076\uff2d\124\uff2d\001\002\000" +
    "\022\034\uff33\064\uff33\071\uff33\072\uff33\073\uff33\074\uff33" +
    "\076\uff33\124\uff33\001\002\000\022\034\uff32\064\uff32\071" +
    "\uff32\072\uff32\073\uff32\074\uff32\076\uff32\124\uff32\001\002" +
    "\000\022\034\036\064\153\071\043\072\075\073\057\074" +
    "\037\076\035\124\227\001\002\000\022\034\uff34\064\uff34" +
    "\071\uff34\072\uff34\073\uff34\074\uff34\076\uff34\124\uff34\001" +
    "\002\000\022\034\uff2e\064\uff2e\071\uff2e\072\uff2e\073\uff2e" +
    "\074\uff2e\076\uff2e\124\uff2e\001\002\000\022\003\uff44\011" +
    "\uff44\107\167\110\166\111\170\126\uff44\127\174\130\uff44" +
    "\001\002\000\012\003\uff43\011\uff43\126\uff43\130\uff43\001" +
    "\002\000\020\002\uff2a\003\uff2a\004\uff2a\005\uff2a\007\uff2a" +
    "\014\uff2a\015\uff2a\001\002\000\004\071\u0170\001\002\000" +
    "\006\011\051\130\047\001\002\000\004\130\047\001\002" +
    "\000\004\003\u01b0\001\002\000\020\002\uff2b\003\uff2b\004" +
    "\uff2b\005\uff2b\007\uff2b\014\uff2b\015\uff2b\001\002\000\020" +
    "\002\uff2c\003\uff2c\004\uff2c\005\uff2c\007\uff2c\014\uff2c\015" +
    "\uff2c\001\002\000\012\034\uffce\071\uffce\074\uffce\076\uffce" +
    "\001\002\000\004\026\u01b6\001\002\000\020\002\uffdc\003" +
    "\uffdc\004\uffdc\005\uffdc\007\uffdc\014\uffdc\015\uffdc\001\002" +
    "\000\004\031\u0180\001\002\000\004\124\u01b7\001\002\000" +
    "\010\071\043\074\037\076\035\001\002\000\004\125\uffea" +
    "\001\002\000\004\125\u01ba\001\002\000\004\031\uffeb\001" +
    "\002\000\004\065\221\001\002\000\004\066\u01bd\001\002" +
    "\000\004\005\026\001\002\000\004\006\033\001\002\000" +
    "\012\034\036\071\043\074\037\076\035\001\002\000\004" +
    "\130\047\001\002\000\020\002\uffd4\003\uffd4\004\uffd4\005" +
    "\uffd4\007\uffd4\014\uffd4\015\uffd4\001\002\000\006\003\uff4a" +
    "\006\uff4a\001\002\000\020\002\uff4c\003\uff4c\004\uff4c\005" +
    "\uff4c\007\uff4c\014\uff4c\015\uff4c\001\002\000\020\002\ufff4" +
    "\003\ufff4\004\ufff4\005\ufff4\007\ufff4\014\ufff4\015\ufff4\001" +
    "\002\000\004\004\uffdb\001\002\000\006\030\u01c8\124\u01c9" +
    "\001\002\000\004\004\uffda\001\002\000\004\124\u01de\001" +
    "\002\000\102\027\067\034\036\035\135\036\070\037\124" +
    "\040\102\041\132\042\125\043\141\044\131\045\126\046" +
    "\061\047\155\050\130\051\147\052\104\053\156\054\106" +
    "\055\136\056\112\057\071\060\144\061\113\062\073\063" +
    "\162\064\153\071\043\072\075\073\057\074\037\076\035" +
    "\124\101\001\002\000\004\030\u01cb\001\002\000\004\124" +
    "\u01cc\001\002\000\004\004\006\001\002\000\004\010\u015f" +
    "\001\002\000\004\125\u01cf\001\002\000\006\004\uffd6\126" +
    "\u01d0\001\002\000\010\071\207\075\204\077\206\001\002" +
    "\000\004\124\u01c9\001\002\000\004\004\uffd7\001\002\000" +
    "\010\010\uffc9\125\uffc9\126\u01dc\001\002\000\030\010\uffc4" +
    "\030\uffc4\071\uffc4\075\uffc4\077\uffc4\107\167\110\166\111" +
    "\170\125\uffc4\126\uffc4\127\174\001\002\000\020\010\uffc5" +
    "\030\u01d8\071\207\075\204\077\206\125\uffc5\126\uffc5\001" +
    "\002\000\004\125\u01d7\001\002\000\004\030\uffd5\001\002" +
    "\000\010\071\207\075\204\077\206\001\002\000\010\010" +
    "\uffc3\125\uffc3\126\uffc3\001\002\000\010\010\uffc6\125\uffc6" +
    "\126\uffc6\001\002\000\010\010\uffc2\125\uffc2\126\uffc2\001" +
    "\002\000\102\027\067\034\036\035\135\036\070\037\124" +
    "\040\102\041\132\042\125\043\141\044\131\045\126\046" +
    "\061\047\155\050\130\051\147\052\104\053\156\054\106" +
    "\055\136\056\112\057\071\060\144\061\113\062\073\063" +
    "\162\064\153\071\043\072\075\073\057\074\037\076\035" +
    "\124\101\001\002\000\006\010\uffca\125\uffca\001\002\000" +
    "\004\004\006\001\002\000\004\010\u015f\001\002\000\004" +
    "\125\u01e1\001\002\000\006\004\uffd8\126\u01e2\001\002\000" +
    "\010\071\207\075\204\077\206\001\002\000\004\004\uffd9" +
    "\001\002\000\004\030\u01c8\001\002\000\020\002\000\003" +
    "\000\004\000\005\000\007\000\014\000\015\000\001\002" +
    "\000\004\002\001\001\002\000\022\011\051\017\u016b\020" +
    "\u0164\021\u0167\022\u0165\024\u0169\025\u0162\130\047\001\002" +
    "\000\020\002\ufff8\003\ufff8\004\ufff8\005\ufff8\007\ufff8\014" +
    "\ufff8\015\ufff8\001\002\000\004\130\047\001\002\000\006" +
    "\011\051\130\047\001\002\000\004\130\047\001\002\000" +
    "\020\002\ufff6\003\ufff6\004\ufff6\005\ufff6\007\ufff6\014\ufff6" +
    "\015\ufff6\001\002\000\020\002\ufff5\003\ufff5\004\ufff5\005" +
    "\ufff5\007\ufff5\014\ufff5\015\ufff5\001\002\000\020\002\ufff7" +
    "\003\ufff7\004\ufff7\005\ufff7\007\ufff7\014\ufff7\015\ufff7\001" +
    "\002\000\004\010\uffd3\001\002\000\004\010\uffd1\001\002" +
    "\000\102\027\067\034\036\035\135\036\070\037\124\040" +
    "\102\041\132\042\125\043\141\044\131\045\126\046\061" +
    "\047\155\050\130\051\147\052\104\053\156\054\106\055" +
    "\136\056\112\057\071\060\144\061\113\062\073\063\162" +
    "\064\153\071\043\072\075\073\057\074\037\076\035\124" +
    "\101\001\002\000\004\010\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01f0\000\040\002\003\003\017\013\023\014\015\015" +
    "\004\017\010\020\006\021\020\025\007\026\016\032\012" +
    "\157\011\160\022\162\027\173\014\001\001\000\122\012" +
    "\110\036\145\037\u01d2\040\121\041\065\042\106\043\075" +
    "\044\114\045\156\046\142\050\120\051\157\052\062\053" +
    "\133\054\116\055\073\056\132\057\057\060\144\062\147" +
    "\064\115\066\061\070\076\072\071\074\104\076\107\100" +
    "\153\102\054\104\117\106\162\110\150\112\151\115\u01ef" +
    "\117\077\120\043\145\u01d4\147\u01d3\150\136\151\160\163" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\u015f\113\u01e6\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\003\003\017\013\023\015" +
    "\u01e4\017\010\020\006\021\020\025\007\026\016\032\012" +
    "\157\011\160\022\162\027\173\014\001\001\000\002\001" +
    "\001\000\010\022\u01c4\023\u01c6\121\u01c5\001\001\000\010" +
    "\002\003\017\u01c3\032\012\001\001\000\002\001\001\000" +
    "\010\006\u01c1\010\u016d\011\u016e\001\001\000\010\027\u01b3" +
    "\117\u01b2\120\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\161\030\001\001\000\012" +
    "\117\033\120\043\164\040\165\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\172\u01a5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\053\016\052\114\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\117" +
    "\033\120\043\164\045\165\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u019d\001\001\000\002\001\001\000\124\012\110" +
    "\036\145\040\121\041\065\042\106\043\075\044\114\045" +
    "\156\046\142\050\120\051\157\052\062\053\133\054\116" +
    "\055\073\056\132\057\057\060\144\062\147\064\115\066" +
    "\061\070\076\072\071\074\104\076\107\100\153\102\054" +
    "\104\117\106\162\110\150\112\151\117\077\120\102\122" +
    "\063\137\141\140\137\144\126\147\122\150\136\151\160" +
    "\163\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\114\012\110\036\145\040" +
    "\121\041\065\042\106\043\075\044\114\045\156\046\142" +
    "\050\120\051\157\052\062\053\133\054\116\055\073\056" +
    "\132\057\057\060\144\062\147\064\115\066\061\070\076" +
    "\072\071\074\104\076\107\100\153\102\054\104\117\106" +
    "\162\110\150\112\151\117\077\120\043\147\u0138\150\136" +
    "\151\160\163\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\u011d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\171\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\142\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\141\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\117\216" +
    "\120\043\152\221\153\215\155\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\114\012\110\036\145\040\121\041\065" +
    "\042\106\043\075\044\114\045\156\046\142\050\120\051" +
    "\157\052\062\053\133\054\116\055\073\056\132\057\057" +
    "\060\144\062\147\064\115\066\061\070\076\072\071\074" +
    "\104\076\107\100\153\102\054\104\117\106\162\110\150" +
    "\112\151\117\077\120\043\147\164\150\136\151\160\163" +
    "\064\001\001\000\004\171\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\114\012\110\036" +
    "\145\040\121\041\065\042\106\043\075\044\114\045\156" +
    "\046\142\050\120\051\157\052\062\053\133\054\116\055" +
    "\073\056\132\057\057\060\144\062\147\064\115\066\061" +
    "\070\076\072\071\074\104\076\107\100\153\102\054\104" +
    "\117\106\162\110\150\112\151\117\077\120\043\147\201" +
    "\150\136\151\160\163\064\001\001\000\114\012\110\036" +
    "\145\040\121\041\065\042\106\043\075\044\114\045\156" +
    "\046\142\050\120\051\157\052\062\053\133\054\116\055" +
    "\073\056\132\057\057\060\144\062\147\064\115\066\061" +
    "\070\076\072\071\074\104\076\107\100\153\102\054\104" +
    "\117\106\162\110\150\112\151\117\077\120\043\147\174" +
    "\150\136\151\160\163\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\171\170\001\001\000\114\012\110" +
    "\036\145\040\121\041\065\042\106\043\075\044\114\045" +
    "\156\046\142\050\120\051\157\052\062\053\133\054\116" +
    "\055\073\056\132\057\057\060\144\062\147\064\115\066" +
    "\061\070\076\072\071\074\104\076\107\100\153\102\054" +
    "\104\117\106\162\110\150\112\151\117\077\120\043\147" +
    "\177\150\136\151\160\163\064\001\001\000\002\001\001" +
    "\000\004\171\170\001\001\000\002\001\001\000\004\171" +
    "\170\001\001\000\006\105\210\121\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\152\256\153\215\155\217\001\001\000\010\152\252" +
    "\153\215\155\217\001\001\000\004\156\250\001\001\000" +
    "\126\012\110\036\145\040\121\041\065\042\106\043\075" +
    "\044\114\045\156\046\142\050\120\051\157\052\062\053" +
    "\133\054\116\055\073\056\132\057\057\060\144\062\147" +
    "\064\115\066\061\070\076\072\071\074\104\076\107\100" +
    "\153\102\054\104\117\106\162\110\150\112\151\117\077" +
    "\120\102\122\063\137\245\140\137\143\246\144\126\147" +
    "\122\150\136\151\160\163\064\001\001\000\004\154\223" +
    "\001\001\000\020\117\077\120\043\151\160\163\231\166" +
    "\232\167\227\170\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\117\077\120\043\151" +
    "\160\163\231\166\235\167\227\170\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\171" +
    "\233\001\001\000\020\117\077\120\043\151\160\163\231" +
    "\166\234\167\227\170\230\001\001\000\004\171\233\001" +
    "\001\000\004\171\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\117\077\120\043\151\160\163" +
    "\231\166\251\167\227\170\230\001\001\000\002\001\001" +
    "\000\004\171\233\001\001\000\004\154\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\124\012\110\036\145\040\121\041\065" +
    "\042\106\043\075\044\114\045\156\046\142\050\120\051" +
    "\157\052\062\053\133\054\116\055\073\056\132\057\057" +
    "\060\144\062\147\064\115\066\061\070\076\072\071\074" +
    "\104\076\107\100\153\102\054\104\117\106\162\110\150" +
    "\112\151\117\077\120\102\122\063\137\300\140\137\144" +
    "\126\147\122\150\136\151\160\163\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\061\307\063\306\120\305\001\001\000\004" +
    "\120\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\061\307\063\312" +
    "\120\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\061\321\120\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\067\330\120\327\001\001\000\004\120" +
    "\335\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\077\341" +
    "\117\340\120\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\061\346\120\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\116\012\110\036\145\040" +
    "\121\041\065\042\106\043\075\044\114\045\156\046\142" +
    "\050\120\051\157\052\062\053\133\054\116\055\073\056" +
    "\132\057\057\060\144\062\147\064\115\066\061\070\076" +
    "\072\071\074\104\076\107\100\153\102\054\104\117\106" +
    "\162\110\150\112\151\117\077\120\043\144\362\147\122" +
    "\150\136\151\160\163\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\071\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\367\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\073\375\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\061\u0104\120\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\u010f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\061\u0117\120\305\001\001\000\002\001" +
    "\001\000\006\061\u0119\120\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u011c\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\035\u011f\117\077\120\043" +
    "\151\160\163\231\166\u0120\167\227\170\230\001\001\000" +
    "\002\001\001\000\004\171\233\001\001\000\022\035\u0122" +
    "\117\077\120\043\151\160\163\231\166\u0120\167\227\170" +
    "\230\001\001\000\002\001\001\000\022\035\u0124\117\077" +
    "\120\043\151\160\163\231\166\u0120\167\227\170\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\107\u0127" +
    "\121\u0128\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\103\u012c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u0130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\061\u0136\120\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\171\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\111\u0143\120\u0142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\061\u0149\120\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\171\u014d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\123\u0151\001\001\000\016\002\u0154\033" +
    "\u015b\124\u0153\125\u0158\126\u0159\143\u0157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\117" +
    "\u0197\120\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\u015f\113\u0160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\u0191\007\u0192\010\u016d\011\u016e\001\001\000\014\005\053" +
    "\114\u0167\127\u0169\130\u0165\134\u0162\001\001\000\010\006" +
    "\u0187\010\u016d\011\u016e\001\001\000\010\006\u017d\010\u016d" +
    "\011\u016e\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\127\u0177\130\u0165\134\u0162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\053\114" +
    "\u0172\001\001\000\002\001\001\000\010\006\u016c\010\u016d" +
    "\011\u016e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\132\u017e\001\001" +
    "\000\002\001\001\000\010\131\u0181\133\u0180\143\u0182\001" +
    "\001\000\002\001\001\000\004\141\u0185\001\001\000\002" +
    "\001\001\000\004\143\u0184\001\001\000\002\001\001\000" +
    "\010\131\u0181\133\u0186\143\u0182\001\001\000\002\001\001" +
    "\000\006\132\u0188\136\u018a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\120\u018c\135\u018d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\120\u018c\135\u0190\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\u0191\007" +
    "\u0194\010\u016d\011\u016e\001\001\000\002\001\001\000\006" +
    "\125\u0196\143\u0157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\117\077\120\043\151\160\163\231\166\u01a8" +
    "\167\227\170\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\171\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\u01ac\010\u016d\011\u016e\001\001\000" +
    "\010\005\053\016\u01ae\114\u01ad\001\001\000\004\016\u01b0" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\u01b4\001\001\000\002" +
    "\001\001\000\004\132\u01ba\001\001\000\002\001\001\000" +
    "\010\031\u01b8\120\u018c\135\u01b7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\155\u01bb\001" +
    "\001\000\002\001\001\000\004\160\u01bd\001\001\000\004" +
    "\161\u01be\001\001\000\010\117\033\120\043\165\u01bf\001" +
    "\001\000\004\016\u01c0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u01c9\001\001\000\002\001\001\000\002" +
    "\001\001\000\122\012\110\036\145\037\u01d2\040\121\041" +
    "\065\042\106\043\075\044\114\045\156\046\142\050\120" +
    "\051\157\052\062\053\133\054\116\055\073\056\132\057" +
    "\057\060\144\062\147\064\115\066\061\070\076\072\071" +
    "\074\104\076\107\100\153\102\054\104\117\106\162\110" +
    "\150\112\151\115\u01d5\117\077\120\043\145\u01d4\147\u01d3" +
    "\150\136\151\160\163\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\003\032\u01cc\001\001\000\006" +
    "\004\u015f\113\u01cd\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\u01d1\121\u01d0\001\001\000\004\024\u01c9" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\171" +
    "\170\001\001\000\006\121\u01d8\146\u01d9\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u01da\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\122" +
    "\012\110\036\145\037\u01d2\040\121\041\065\042\106\043" +
    "\075\044\114\045\156\046\142\050\120\051\157\052\062" +
    "\053\133\054\116\055\073\056\132\057\057\060\144\062" +
    "\147\064\115\066\061\070\076\072\071\074\104\076\107" +
    "\100\153\102\054\104\117\106\162\110\150\112\151\115" +
    "\u01dc\117\077\120\043\145\u01d4\147\u01d3\150\136\151\160" +
    "\163\064\001\001\000\002\001\001\000\006\002\003\032" +
    "\u01de\001\001\000\006\004\u015f\113\u01df\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\u01e2\121\u01e3\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\053\016\u01e7\114\u01e8\127" +
    "\u01e9\130\u0165\134\u0162\001\001\000\002\001\001\000\004" +
    "\016\u01ed\001\001\000\010\005\053\016\u01eb\114\u01ea\001" +
    "\001\000\004\016\u01ec\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\122\012\110\036\145\037\u01d2\040\121\041\065" +
    "\042\106\043\075\044\114\045\156\046\142\050\120\051" +
    "\157\052\062\053\133\054\116\055\073\056\132\057\057" +
    "\060\144\062\147\064\115\066\061\070\076\072\071\074" +
    "\104\076\107\100\153\102\054\104\117\106\162\110\150" +
    "\112\151\115\u01f1\117\077\120\043\145\u01d4\147\u01d3\150" +
    "\136\151\160\163\064\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup_Rules_SQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup_Rules_SQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup_Rules_SQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// This list will store every error found in the syntax analysis process. SE -> Syntax errors
	public static LinkedList<TError> TableSE = new LinkedList<TError>();

	// This object has a list with all columns found and its table
	//public static ColumnEvalutator Columns = new ColumnEvaluator();

	public HashSet<String> Tables  = new HashSet<String>();
	public HashSet<String> Columns = new HashSet<String>();

	public  Scanner s;
  	public  int errors = 0, line, column;
  	public 	String the_error = "";
	public 	StringBuilder the_error_message = new StringBuilder();

	public int selects_read = 0;
	public int updates_read = 0;
	public int deletes_read = 0;
	public int with_read = 0;
	public int merge_read = 0;


	public void clean_lists() {
		TableSE = new LinkedList<TError>();
	}

	/* This is the error handler */
	public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("\n\n---- Error message: " + message + "\n");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {

        	// Uncomment when Analyzer can handle multiple errors
			//errors++;
			errors = 1;

            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0 && s.right >= 0) {

            	
				the_error = (s.value == null) ? "Empty" : s.value.toString();
				//the_error = s.value.toString();
                
                m.append("--> Unexpected : " + the_error );
                m.append(" at line: "+(s.left));  
                m.append(", column: "+(s.right)); 

				the_error_message = m;
            }
        }
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/

    public void report_fatal_error(String message, Object info) {
        //report_error(message, info);
		//the_error_message.append("\n\n---- Unknown syntax error ლ(ಠ_ಠლ)" + "\n");
		the_error_message.append("\n\n---- Unknown syntax error." + "\n");
    }
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Cup_Rules_SQL$actions {


	

  private final Cup_Rules_SQL parser;

  /** Constructor */
  CUP$Cup_Rules_SQL$actions(Cup_Rules_SQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Cup_Rules_SQL$do_action_part00000000(
    int                        CUP$Cup_Rules_SQL$act_num,
    java_cup.runtime.lr_parser CUP$Cup_Rules_SQL$parser,
    java.util.Stack            CUP$Cup_Rules_SQL$stack,
    int                        CUP$Cup_Rules_SQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup_Rules_SQL$result;

      /* select the action based on the action number */
      switch (CUP$Cup_Rules_SQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statement_group EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		RESULT = start_val;
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup_Rules_SQL$parser.done_parsing();
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statement_group ::= statement_group statement 
            {
              Object RESULT =null;
		 System.out.println("statement_group ::= statement_group statement"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement_group",10, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_group ::= statement 
            {
              Object RESULT =null;
		 System.out.println("statement_group ::= statement"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement_group",10, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= select_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= select_s"); 	
						   selects_read++; 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= delete_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= delete_s");
						   deletes_read++; 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= update_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= update_s"); 
						   updates_read++; 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= with_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= with_s");
						   with_read++;	
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= merge_s 
            {
              Object RESULT =null;
		 System.out.println("statement ::= merge_s");
						   merge_read++;	
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // _semicolon ::= _SEMCOL2 
            {
              Object RESULT =null;
		 System.out.println("_semicolon ::= _SEMICOL2"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_semicolon",12, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // select_s ::= select_part from_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",13, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // select_s ::= select_part from_part where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part where_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",13, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // select_s ::= select_part from_part joins_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part joins_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",13, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // select_s ::= select_part from_part joins_part where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("select_s ::= select_part from_part joins_part where_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_s",13, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // with_s ::= with_part select_s 
            {
              Object RESULT =null;
		 System.out.println("with_s	::=	with_part select_s"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_s",14, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // merge_s ::= merge_part 
            {
              Object RESULT =null;
		 System.out.println("with_s	::=	with_part select_s"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("merge_s",19, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // joins_part ::= join_p joins_part 
            {
              Object RESULT =null;
		 System.out.println("joins_part ::= join_p joins_part"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("joins_part",85, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // joins_part ::= join_p 
            {
              Object RESULT =null;
		 System.out.println("joins_part ::= join_p"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("joins_part",85, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // join_p ::= NATURAL JOIN table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // join_p ::= JOIN table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // join_p ::= JOIN table_name join_using 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // join_p ::= JOIN table_name join_cond 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // join_p ::= join table_name join_cond 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_p",86, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // merge_using ::= USING _OPENPAR merge_using_cols _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("merge_using",22, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // merge_using_cols ::= join_using_cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("merge_using_cols",23, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // join_using ::= USING _OPENPAR join_using_cols _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_using",92, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // join_using_cols ::= cl _COMMA join_using_cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_using_cols",91, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // join_using_cols ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_using_cols",91, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // join ::= INNER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // join ::= LEFT JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // join ::= RIGHT JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // join ::= LEFT OUTER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // join ::= RIGHT OUTER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // join ::= FULL OUTER JOIN 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join",90, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // join_cond ::= ON join_c 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_cond",88, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // join_c ::= join_on log_oper join_c 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_c",89, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // join_c ::= join_on 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_c",89, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // join_on ::= element _EQU element 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("join_on",87, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // merge_part ::= _merge merge_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("merge_part",20, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // with_part ::= _with with_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_part",15, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // with_part ::= _with with_exp2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_part",15, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // with_exp ::= col_ali AS _OPENPAR select_part from_part _CLOSEPAR _COMMA with_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-7)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // with_exp ::= col_ali AS _OPENPAR select_part from_part _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp",16, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // with_exp2 ::= col_ali with_exp2_1 AS _OPENPAR select_part from_part _CLOSEPAR _COMMA with_exp2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp2",17, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-8)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // with_exp2 ::= col_ali with_exp2_1 AS _OPENPAR select_part from_part _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp2",17, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-6)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // with_exp2_1 ::= _OPENPAR cols _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("with_exp2_1",18, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // merge_exp ::= col merge_using join_cond case_cond THEN _update _set set_exp _semicolon 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("merge_exp",21, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-8)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // select_part ::= _select _STAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",24, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // select_part ::= _select DISTINCT cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",24, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // select_part ::= _select cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part",24, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // nvl2_exp ::= _OPENPAR nvl2_exp_nested _COMMA nvl2_exp_nested _COMMA nvl2_exp_nested _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nvl2_exp",26, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-6)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // nvl2_exp_nested ::= ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nvl2_exp_nested",27, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // _merge ::= MERGE INTO 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_merge",9, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // _with ::= WITH 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_with",1, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // _select ::= SELECT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_select",0, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // _nvl2 ::= NVL2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_nvl2",8, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cols ::= col_el _COMMA cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols",75, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cols ::= col_el 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols",75, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cols_nvl2 ::= col_el _COMMA cols 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols_nvl2",76, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cols_nvl2 ::= col_el _COMMA 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cols_nvl2",76, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // col_el ::= c_el c_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_el",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // col_el ::= c_el 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_el",29, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // c_el ::= mix_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_el",99, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // c_ali ::= col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_ali",100, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // c_ali ::= AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("c_ali",100, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // mix_exp ::= _OPENPAR mix_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",101, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // mix_exp ::= func_ls 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",101, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // mix_exp ::= m_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",101, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // mix_exp ::= ari_value 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("mix_exp",101, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // m_exp ::= mix_exp _ari_opr mix_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("m_exp",102, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // func_ls ::= aggregates 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // func_ls ::= stringFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // func_ls ::= dateFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // func_ls ::= nullFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // func_ls ::= logicalFunctions 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // func_ls ::= function_to_date 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // func_ls ::= function_to_char 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("func_ls",28, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // aggregates ::= agg_count 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // aggregates ::= agg_sum 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // aggregates ::= agg_max 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // aggregates ::= agg_min 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // aggregates ::= agg_avg 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("aggregates",30, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stringFunctions ::= stringFunction_concat 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stringFunctions ::= stringFunction_lpad 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stringFunctions ::= stringFunction_rpad 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stringFunctions ::= stringFunction_replace 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stringFunctions ::= stringFunction_upper 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stringFunctions ::= stringFunction_lower 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // stringFunctions ::= stringFunction_trim 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // stringFunctions ::= stringFunction_length 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // stringFunctions ::= stringFunction_ltrim 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // stringFunctions ::= stringFunction_rtrim 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // stringFunctions ::= stringFunction_instr 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunctions",38, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dateFunctions ::= sysdate 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("dateFunctions",39, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // logicalFunctions ::= logFunc_choose 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logicalFunctions",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // logicalFunctions ::= logFunc_iif 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logicalFunctions",31, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // nullFunctions ::= nullFunction_nvl2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunctions",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // nullFunctions ::= nullFunction_nvl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunctions",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // nullFunctions ::= nullFunction_nullif 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunctions",32, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // nullFunction_nvl2 ::= _nvl2 nvl2_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunction_nvl2",33, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // nullFunction_nullif ::= NULLIF _OPENPAR LITERAL_STRING _COMMA LITERAL_STRING _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunction_nullif",34, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // function_to_date ::= TO_DATE _OPENPAR LITERAL_STRING _COMMA LITERAL_STRING _COMMA LITERAL_STRING _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("function_to_date",35, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-7)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // function_to_char ::= TO_CHAR _OPENPAR mix_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("function_to_char",36, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // function_to_char ::= TO_CHAR _OPENPAR mix_exp _COMMA mix_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("function_to_char",36, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // function_to_char ::= TO_CHAR _OPENPAR mix_exp _COMMA mix_exp _COMMA mix_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("function_to_char",36, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-7)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // stringFunction_concat ::= CONCAT _OPENPAR concat_exp _CLOSEPAR AS LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_concat",54, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stringFunction_lpad ::= LPAD _OPENPAR lpad_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_lpad",56, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // stringFunction_rpad ::= RPAD _OPENPAR rpad_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_rpad",58, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // stringFunction_length ::= LENGTH _OPENPAR length_exp _CLOSEPAR AS LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_length",60, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // stringFunction_replace ::= REPLACE _OPENPAR replace_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_replace",62, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stringFunction_trim ::= TRIM _OPENPAR trim_exp _CLOSEPAR AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_trim",64, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stringFunction_lower ::= LOWER _OPENPAR lower_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_lower",68, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // stringFunction_upper ::= UPPER _OPENPAR upper_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_upper",66, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // nullFunction_nvl ::= NVL _OPENPAR nvl_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nullFunction_nvl",70, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // agg_count ::= COUNT _OPENPAR count_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_count",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // agg_count ::= COUNT _OPENPAR _STAR _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_count",40, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // stringFunction_ltrim ::= LTRIM _OPENPAR LITERAL_STRING _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_ltrim",41, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // stringFunction_rtrim ::= RTRIM _OPENPAR LITERAL_STRING _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_rtrim",42, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // stringFunction_instr ::= INSTR _OPENPAR count_exp _COMMA LITERAL_STRING _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("stringFunction_instr",43, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-5)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // agg_sum ::= SUM _OPENPAR count_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_sum",44, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // agg_max ::= MAX _OPENPAR count_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_max",45, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // agg_min ::= MIN _OPENPAR count_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_min",46, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // agg_avg ::= AVG _OPENPAR avg_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_avg",52, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // agg_avg ::= AVG _OPENPAR _STAR _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("agg_avg",52, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // count_exp ::= DISTINCT cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",47, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // count_exp ::= DISTINCT NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",47, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // count_exp ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",47, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // count_exp ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("count_exp",47, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // logFunc_choose ::= CHOOSE _OPENPAR INTEGER _COMMA choose_exp _CLOSEPAR AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logFunc_choose",48, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-7)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // logFunc_iif ::= IIF _OPENPAR INTEGER iif_exp INTEGER _COMMA count_exp _COMMA count_exp _CLOSEPAR AS col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("logFunc_iif",50, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-11)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // choose_exp ::= count_exp _COMMA choose_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("choose_exp",49, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // choose_exp ::= count_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("choose_exp",49, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // concat_exp ::= LITERAL_STRING _COMMA concat_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("concat_exp",55, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // concat_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("concat_exp",55, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // replace_exp ::= LITERAL_STRING _COMMA replace_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("replace_exp",63, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // replace_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("replace_exp",63, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // trim_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("trim_exp",65, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // upper_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("upper_exp",67, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // upper_exp ::= col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("upper_exp",67, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // lower_exp ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("lower_exp",69, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // lower_exp ::= col_ali 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("lower_exp",69, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lpad_exp ::= LITERAL_STRING _COMMA INTEGER _COMMA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("lpad_exp",57, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // rpad_exp ::= LITERAL_STRING _COMMA INTEGER _COMMA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("rpad_exp",59, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sysdate ::= SYSDATE _OPENPAR _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("sysdate",72, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sysdate ::= SYSDATE _OPENPAR _CLOSEPAR _ari_opr INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("sysdate",72, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // length_exp ::= col 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("length_exp",61, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // avg_exp ::= DISTINCT cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // avg_exp ::= DISTINCT NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // avg_exp ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // avg_exp ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("avg_exp",53, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // iif_exp ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // iif_exp ::= _GT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // iif_exp ::= _LT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // iif_exp ::= _LET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // iif_exp ::= _GET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // iif_exp ::= _DIFF 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // iif_exp ::= _DIFF2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("iif_exp",51, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // nvl_exp ::= cl _COMMA INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nvl_exp",71, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // nvl_exp ::= cl _COMMA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("nvl_exp",71, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // col ::= cl 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col",77, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // col ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col",77, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // cl ::= IDENTIFIER 
            {
              Object RESULT =null;
		int col1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int col1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object col1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Columns.add(col1 + ""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",78, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // cl ::= TABDOTCOL 
            {
              Object RESULT =null;
		int col1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int col1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object col1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Columns.add(col1 + ""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",78, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // cl ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cl",78, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // col_ali ::= QTABLENAME 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 /*Tables.add(t+"");*/ 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",79, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // col_ali ::= IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 /*Tables.add(t+"");*/ 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",79, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // col_ali ::= QCOLALIAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 /*Tables.add(t+"");*/ 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("col_ali",79, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // case_exp ::= CASE case_rules END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE case_rules END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",103, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // case_exp ::= CASE case_rules case_else END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE case_rules case_else END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",103, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // case_exp ::= CASE col case_rules END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE col case_rules END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",103, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // case_exp ::= CASE col case_rules case_else END 
            {
              Object RESULT =null;
		 System.out.println("case_exp ::= CASE col case_rules case_else END"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_exp",103, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // case_rules ::= case_rul case_rules 
            {
              Object RESULT =null;
		 System.out.println("case_rules ::= case_rul case_rules"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_rules",104, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // case_rules ::= case_rul 
            {
              Object RESULT =null;
		 System.out.println("case_rules ::= case_rul"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_rules",104, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // case_rul ::= case_cond case_act 
            {
              Object RESULT =null;
		 System.out.println("case_rul ::= WHEN case_cond THEN case_act"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_rul",105, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // case_cond ::= WHEN w_condition 
            {
              Object RESULT =null;
		 System.out.println("case_cond ::= w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_cond",107, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // case_cond ::= WHEN element 
            {
              Object RESULT =null;
		 System.out.println("case_cond ::= element"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_cond",107, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // case_act ::= THEN ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_act",108, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // case_else ::= ELSE ari_exp 
            {
              Object RESULT =null;
		 System.out.println("case_else ::= ELSE ari_exp"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("case_else",106, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // update_s ::= update_part _set set_exp_list where_part _semicolon 
            {
              Object RESULT =null;
		 System.out.println("update_s	::= update_part _set set_cols where_part _semicolon"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",109, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // update_s ::= update_part _set set_exp_list error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE section. \nMissing semicolon."); //Original error message: UPDATE error after set of columns.
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part _set set_cols error. \nMissing semicolon on UPDATE."); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",109, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // update_s ::= update_part _set set_exp_list _semicolon error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE section. Missing where clause (WHERE).");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part _set set_exp_list _semicolon error.\nMissing WHERE CLAUSE on UPDATE."); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",109, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // update_s ::= update_part error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Incomplete UPDATE.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= update_part error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",109, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // update_s ::= _update error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE.");
				  	  	   TableSE.add(errors_found);
						   System.out.println("update_s	::= _update error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_s",109, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // _set ::= SET 
            {
              Object RESULT =null;
		 System.out.println("_set ::= SET"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_set",111, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // update_part ::= _update table_name 
            {
              Object RESULT =null;
		 System.out.println("update_part ::= _update table_name OK"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_part",112, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // update_part ::= error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid UPDATE.");
				  	  	   TableSE.add(errors_found); 
						   System.out.println("update_part ::= _update table_name ERROR"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("update_part",112, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // _update ::= UPDATE 
            {
              Object RESULT =null;
		 System.out.println("_update ::= UPDATE"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_update",110, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // set_exp_list ::= set_exp _COMMA set_exp_list 
            {
              Object RESULT =null;
		 System.out.println("set_exp_list	::= set_exp _COMMA set_exp_list "); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",114, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // set_exp_list ::= set_exp 
            {
              Object RESULT =null;
		 System.out.println("set_exp_list	::= set_exp "); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",114, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // set_exp_list ::= error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid set of columns in UPDATE");
				  	  	   TableSE.add(errors_found); 
						   System.out.println("set_cols	::=	error"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp_list",114, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // set_exp ::= col _asig_opr ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp",115, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // set_exp ::= col _EQU LITERAL_STRING 
            {
              Object RESULT =null;
		 System.out.println("set_exp ::= col _EQU LITERAL_STRING"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("set_exp",115, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ari_exp ::= par_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",116, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ari_exp ::= exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",116, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ari_exp ::= ari_value 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_exp",116, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ari_value ::= col 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= col"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",113, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ari_value ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= INTEGER"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",113, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ari_value ::= REAL 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= REAL"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",113, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ari_value ::= case_exp 
            {
              Object RESULT =null;
		 System.out.println("ari_value ::= case_exp"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("ari_value",113, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // par_exp ::= _OPENPAR ari_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("par_exp",117, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // exp ::= ari_exp _ari_opr ari_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("exp",118, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // _ari_opr ::= _PLUS 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",119, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // _ari_opr ::= _MINUS 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",119, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // _ari_opr ::= _STAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",119, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // _ari_opr ::= _DIVIDE 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_ari_opr",119, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // _asig_opr ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",120, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // _asig_opr ::= _PLUSEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",120, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // _asig_opr ::= _MINUSEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",120, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // _asig_opr ::= _TIMESEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",120, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // _asig_opr ::= _DIVIDEEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",120, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // _asig_opr ::= _MODEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",120, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // _asig_opr ::= _ANDEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",120, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // _asig_opr ::= _POWEQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",120, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // _asig_opr ::= _OREQ 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_asig_opr",120, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // delete_s ::= DELETE FROM table_name where_part _semicolon 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("delete_s",121, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // delete_s ::= DELETE FROM table_name _semicolon error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid DELETE section. Missing where clause (WHERE).");
				  	  	   TableSE.add(errors_found);
						   System.out.println("DELETE FROM table_name _semicolon error.\nMissing WHERE CLAUSE on DELETE."); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("delete_s",121, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-4)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // delete_s ::= DELETE error 
            {
              Object RESULT =null;
		 TError errors_found = new TError("",0,0,"Syntax Error","Invalid DELETE statement.");
				  	  			 		TableSE.add(errors_found);
										System.out.println("value ::= LITERAL_STRING"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("delete_s",121, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // from_part ::= _from table_name_mult 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("from_part",73, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // table_name_mult ::= table_name _COMMA table_name_mult 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name_mult",5, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // table_name_mult ::= table_name 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name_mult",5, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // _from ::= FROM 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_from",2, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // table_name ::= tab 
            {
              Object RESULT =null;
		 System.out.println("table_name ::= tab"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name",4, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // table_name ::= tab_ali 
            {
              Object RESULT =null;
		 System.out.println("table_name ::= tab_ali"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("table_name",4, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // tab ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 Tables.add(id+"");
						   System.out.println("tab ::= IDENTIFIER"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab",6, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // tab_ali ::= IDENTIFIER IDENTIFIER 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 System.out.println("tab_ali ::= IDENTIFIER IDENTIFIER");	
						   Tables.add(id1+""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab_ali",7, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // tab_ali ::= IDENTIFIER QTABLENAME 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Cup_Rules_SQL$stack.peek()).value;
		 System.out.println("tab_ali ::= IDENTIFIER QTABLENAME"); 
						   Tables.add(id1+""); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("tab_ali",7, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // where_part ::= _where w_condition 
            {
              Object RESULT =null;
		 System.out.println("where_part ::= _where w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("where_part",74, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // _where ::= WHERE 
            {
              Object RESULT =null;
		 System.out.println("_where ::= WHERE"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("_where",3, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // w_condition ::= cond log_oper w_condition 
            {
              Object RESULT =null;
		 System.out.println("w_condition ::= cond log_oper w_condition"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("w_condition",93, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // w_condition ::= cond 
            {
              Object RESULT =null;
		 System.out.println("w_condition ::= cond"); 
              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("w_condition",93, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // cond ::= cond_el cmp_oper cond_el 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",94, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // cond ::= element_in IN in_list 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",94, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // cond ::= cl IS NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",94, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // cond ::= cl IS NOT NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond",94, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // cond_el ::= mix_exp 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cond_el",98, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // in_list ::= _OPENPAR in_exp _CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_list",81, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // in_exp ::= in_array 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_exp",82, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // in_exp ::= in_subquery 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_exp",82, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // in_subquery ::= select_part_sub from_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",84, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // in_subquery ::= select_part_sub from_part where_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",84, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // in_subquery ::= select_part_sub from_part joins_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",84, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // in_subquery ::= select_part_sub from_part joins_part where_part 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_subquery",84, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-3)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // select_part_sub ::= _select col 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("select_part_sub",25, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-1)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // in_array ::= element _COMMA in_array 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_array",83, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.elementAt(CUP$Cup_Rules_SQL$top-2)), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // in_array ::= element 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("in_array",83, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // element_in ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element_in",80, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // element_in ::= TABDOTCOL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element_in",80, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // element ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // element ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // element ::= REAL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // element ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // element ::= TABDOTCOL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // element ::= NULL 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("element",97, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // cmp_oper ::= _EQU 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // cmp_oper ::= _GT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // cmp_oper ::= _LT 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // cmp_oper ::= _LET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // cmp_oper ::= _GET 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // cmp_oper ::= _DIFF 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // cmp_oper ::= _DIFF2 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("cmp_oper",96, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // log_oper ::= _AND 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("log_oper",95, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // log_oper ::= _OR 
            {
              Object RESULT =null;

              CUP$Cup_Rules_SQL$result = parser.getSymbolFactory().newSymbol("log_oper",95, ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup_Rules_SQL$stack.peek()), RESULT);
            }
          return CUP$Cup_Rules_SQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Cup_Rules_SQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Cup_Rules_SQL$do_action(
    int                        CUP$Cup_Rules_SQL$act_num,
    java_cup.runtime.lr_parser CUP$Cup_Rules_SQL$parser,
    java.util.Stack            CUP$Cup_Rules_SQL$stack,
    int                        CUP$Cup_Rules_SQL$top)
    throws java.lang.Exception
    {
              return CUP$Cup_Rules_SQL$do_action_part00000000(
                               CUP$Cup_Rules_SQL$act_num,
                               CUP$Cup_Rules_SQL$parser,
                               CUP$Cup_Rules_SQL$stack,
                               CUP$Cup_Rules_SQL$top);
    }
}

}
