/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */

package com.kerberus.model.syntaxValidator.rules.sql;


import java_cup.runtime.*; 		// Required to send lexemas to Cup
import java.util.LinkedList; 	// Required for LinkedList
import com.kerberus.model.syntaxValidator.rules.util.*;
import com.kerberus.model.syntaxValidator.rules.sql.sym;

/**
 * This class is a simple example lexer.
 */


public class JFlex_Rules_SQL implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
<<<<<<< HEAD
    "\11\0\1\6\1\2\1\15\1\16\1\1\22\0\1\6\1\51\1\17"+
    "\2\0\1\53\1\54\1\13\1\57\1\60\1\4\1\52\1\62\1\5"+
    "\1\12\1\3\12\10\1\0\1\61\1\50\1\46\1\47\2\0\1\31"+
    "\1\7\1\24\1\30\1\22\1\32\1\44\1\37\1\43\1\41\1\7"+
    "\1\23\1\35\1\40\1\34\1\27\1\7\1\33\1\21\1\25\1\26"+
    "\1\45\1\36\3\7\1\0\1\14\1\0\1\55\1\11\1\0\1\31"+
    "\1\7\1\24\1\30\1\22\1\32\1\44\1\37\1\43\1\41\1\7"+
    "\1\23\1\35\1\40\1\34\1\27\1\7\1\33\1\21\1\25\1\26"+
    "\1\45\1\36\3\7\1\0\1\56\10\0\1\15\252\0\2\42\115\0"+
=======
    "\11\0\1\6\1\2\1\15\1\16\1\1\22\0\1\6\1\50\1\17"+
    "\2\0\1\52\1\53\1\13\1\56\1\57\1\4\1\51\1\61\1\5"+
    "\1\12\1\3\12\10\1\0\1\60\1\47\1\45\1\46\2\0\1\31"+
    "\1\7\1\24\1\30\1\22\1\32\1\44\1\37\1\41\1\43\1\7"+
    "\1\23\1\35\1\42\1\34\1\27\1\7\1\33\1\21\1\25\1\26"+
    "\1\7\1\36\3\7\1\0\1\14\1\0\1\54\1\11\1\0\1\31"+
    "\1\7\1\24\1\30\1\22\1\32\1\44\1\37\1\41\1\43\1\7"+
    "\1\23\1\35\1\42\1\34\1\27\1\7\1\33\1\21\1\25\1\26"+
    "\1\7\1\36\3\7\1\0\1\55\10\0\1\15\252\0\2\40\115\0"+
>>>>>>> release-0.3_card_66
    "\1\20\u1ea8\0\1\15\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\4\1\14\6\1\1\3\6\1\10\1\11\1\12\1\1"+
    "\1\13\3\1\1\2\1\14\1\15\1\16\1\17\1\0"+
    "\1\20\1\21\1\22\1\23\3\0\1\24\5\0\1\25"+
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    "\1\0\11\6\1\0\1\6\2\26\4\6\1\0\2\6"+
    "\1\27\1\30\4\6\2\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\2\0\2\22\1\43"+
    "\1\0\1\44\1\45\1\0\1\46\1\6\1\46\1\0"+
<<<<<<< HEAD
    "\1\6\1\47\1\6\1\0\5\6\1\0\1\6\1\50"+
    "\1\51\2\6\1\0\5\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\22\1\0\1\6\2\52\1\53\2\54\1\6"+
    "\1\55\2\6\1\0\1\6\1\56\1\57\1\0\3\6"+
    "\1\60\1\61\1\6\2\62\1\0\1\6\1\0\1\6"+
    "\1\63\2\6\1\0\1\6\2\64\1\65\1\66\1\6"+
    "\2\67\2\70\1\71\1\72\1\0\2\6\1\0\1\6"+
    "\1\73\2\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
=======
    "\1\0\12\6\1\0\1\6\2\26\3\6\1\0\2\6"+
    "\1\27\1\30\4\6\1\31\1\0\1\31\1\6\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\0\2\22\1\43\1\0\1\44\1\45\1\0\1\46"+
    "\1\6\1\46\1\0\1\6\1\47\1\6\1\0\6\6"+
    "\1\0\1\6\1\50\2\6\1\0\5\6\1\0\1\6"+
    "\1\0\1\51\1\6\1\51\1\0\1\22\1\0\1\6"+
    "\2\52\1\53\2\54\2\6\1\55\2\6\1\0\1\6"+
    "\1\56\1\57\1\0\3\6\1\60\1\61\1\6\2\62"+
    "\1\0\1\6\1\0\1\6\1\63\1\0\3\6\1\0"+
    "\1\6\2\64\1\65\1\66\1\6\2\67\2\70\2\71"+
    "\1\72\1\73\1\0\2\6\1\0\1\6\1\74\2\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
>>>>>>> release-0.3_card_53
=======
    "\1\6\1\47\1\6\1\0\6\6\1\0\1\6\1\50"+
    "\2\6\1\0\5\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\22\1\0\1\6\2\51\1\52\2\53\2\6\1\54"+
    "\2\6\1\0\1\6\1\55\1\56\1\0\3\6\1\57"+
    "\1\60\1\6\2\61\1\0\1\6\1\0\1\6\1\62"+
    "\3\6\1\0\1\6\2\63\1\64\1\65\1\6\2\66"+
    "\2\67\1\70\1\71\1\72\1\0\2\6\1\0\1\6"+
    "\1\73\2\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
>>>>>>> release-0.3_card_65
=======
    "\1\0\11\6\1\0\1\6\2\26\3\6\1\0\2\6"+
    "\1\27\1\30\1\6\1\0\1\6\2\31\3\6\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\0\2\22\1\43\1\0\1\44\1\45\1\0\1\46"+
    "\1\6\1\46\1\0\1\6\1\47\1\6\1\0\5\6"+
    "\1\0\1\6\1\50\2\6\1\0\3\6\1\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\1\22\1\0\1\6"+
    "\2\51\1\52\2\53\1\6\1\54\2\6\1\0\1\6"+
    "\1\55\1\56\1\0\3\6\1\57\2\60\1\0\1\6"+
    "\1\61\1\6\2\62\1\0\1\6\1\63\2\6\1\0"+
    "\1\6\2\64\1\65\1\66\2\67\1\6\2\70\1\71"+
    "\1\72\1\0\2\6\1\0\1\6\1\73\2\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
>>>>>>> release-0.3_card_66
=======
    "\1\0\12\6\1\0\1\6\2\26\4\6\1\0\2\6"+
    "\1\27\1\30\4\6\2\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\2\0\2\22\1\43"+
    "\1\0\1\44\1\45\1\0\1\46\1\6\1\46\1\0"+
    "\1\6\1\47\3\6\1\0\5\6\1\0\1\6\1\50"+
    "\3\6\1\0\5\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\22\1\0\1\6\2\51\1\52\1\6\1\53\2\54"+
    "\1\6\1\55\2\6\1\0\1\6\1\56\1\57\1\60"+
    "\1\0\3\6\1\61\1\62\1\6\2\63\1\0\1\6"+
    "\1\0\2\6\1\64\2\6\1\0\1\6\2\65\1\66"+
    "\1\67\1\6\2\70\2\71\1\72\1\73\1\74\1\0"+
    "\2\6\1\0\1\6\1\75\2\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
>>>>>>> release-0.3_card_70
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
<<<<<<< HEAD
    "\0\0\0\63\0\63\0\146\0\231\0\314\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\63\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\63\0\63\0\63"+
    "\0\63\0\u06f9\0\63\0\63\0\u072c\0\63\0\u075f\0\u0792"+
    "\0\u0198\0\63\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\63"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\63\0\377\0\u0b28\0\u0b5b"+
    "\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\377\0\377\0\u0c8d"+
    "\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\63\0\u0e58\0\u0e58\0\u0792\0\63\0\u0e8b\0\63"+
    "\0\u0ebe\0\377\0\u0ef1\0\u0f24\0\377\0\u0f57\0\u0f8a\0\u0fbd"+
    "\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\377\0\377"+
    "\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u0dbf\0\u13b9\0\u13ec"+
    "\0\63\0\377\0\377\0\63\0\377\0\u141f\0\377\0\u1452"+
    "\0\u1485\0\u14b8\0\u14eb\0\377\0\377\0\u151e\0\u1551\0\u1584"+
    "\0\u15b7\0\377\0\377\0\u15ea\0\63\0\377\0\u161d\0\u1650"+
    "\0\u1683\0\u16b6\0\377\0\u16e9\0\u171c\0\u174f\0\u1782\0\63"+
    "\0\377\0\377\0\377\0\u17b5\0\63\0\377\0\63\0\377"+
    "\0\377\0\377\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\377"+
    "\0\63\0\377";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
=======
    "\0\0\0\62\0\62\0\144\0\226\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\62\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\62\0\62\0\62"+
    "\0\62\0\u06d6\0\62\0\62\0\u0708\0\62\0\u073a\0\u076c"+
    "\0\u0190\0\62\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\62"+
    "\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6"+
<<<<<<< HEAD
<<<<<<< HEAD
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\62\0\372\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\372\0\372\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\62"+
    "\0\u0dde\0\u0e10\0\u0e42\0\62\0\u0e74\0\u0e74\0\u076c\0\62"+
    "\0\u0ea6\0\62\0\u0ed8\0\372\0\u0f0a\0\u0f3c\0\372\0\u0f6e"+
    "\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe"+
    "\0\u1130\0\372\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\62\0\u1388\0\372"+
    "\0\u13ba\0\u0dde\0\u13ec\0\u141e\0\62\0\372\0\372\0\62"+
    "\0\372\0\u1450\0\u1482\0\372\0\u14b4\0\u14e6\0\u1518\0\u154a"+
    "\0\372\0\372\0\u157c\0\u15ae\0\u15e0\0\u1612\0\372\0\372"+
    "\0\u1644\0\62\0\372\0\u1676\0\u16a8\0\u16da\0\u170c\0\372"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\62\0\372"+
    "\0\372\0\372\0\u186a\0\62\0\372\0\62\0\372\0\62"+
    "\0\372\0\372\0\372\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\372\0\62\0\372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
>>>>>>> release-0.3_card_53
=======
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\62\0\372\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\372\0\372\0\u0c1c\0\u0c4e"+
<<<<<<< HEAD
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\62\0\62\0\62\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\62\0\u0dde\0\u0dde\0\u076c\0\62\0\u0e10\0\62\0\u0e42"+
    "\0\372\0\u0e74\0\u0ea6\0\372\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e"+
    "\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\372\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u0d48\0\u1356\0\u1388\0\62"+
    "\0\372\0\372\0\62\0\372\0\u13ba\0\u13ec\0\372\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\372\0\372\0\u14e6\0\u1518\0\u154a"+
    "\0\u157c\0\372\0\372\0\u15ae\0\62\0\372\0\u15e0\0\u1612"+
    "\0\u1644\0\u1676\0\372\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770"+
    "\0\62\0\372\0\372\0\372\0\u17a2\0\62\0\372\0\62"+
    "\0\372\0\372\0\372\0\372\0\u17d4\0\u1806\0\u1838\0\u186a"+
    "\0\u189c\0\372\0\62\0\372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
>>>>>>> release-0.3_card_65
=======
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\62\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\u0dac"+
    "\0\u0dde\0\u0e10\0\62\0\u0e42\0\u0e42\0\u076c\0\62\0\u0e74"+
    "\0\62\0\u0ea6\0\372\0\u0ed8\0\u0f0a\0\372\0\u0f3c\0\u0f6e"+
    "\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\372"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u0dac"+
    "\0\u13ec\0\u141e\0\62\0\372\0\372\0\62\0\372\0\u1450"+
    "\0\372\0\u1482\0\u14b4\0\u14e6\0\u1518\0\372\0\372\0\u154a"+
    "\0\u157c\0\u15ae\0\u15e0\0\372\0\62\0\372\0\u1612\0\u1644"+
    "\0\372\0\u1676\0\62\0\372\0\u16a8\0\u16da\0\372\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\62\0\372\0\372\0\372\0\62"+
    "\0\372\0\u17d4\0\62\0\372\0\372\0\372\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\372\0\62\0\372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
>>>>>>> release-0.3_card_66
=======
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\62\0\372\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\372\0\372"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\62\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\u0dac"+
    "\0\u0dde\0\u0e10\0\62\0\u0e42\0\u0e42\0\u076c\0\62\0\u0e74"+
    "\0\62\0\u0ea6\0\372\0\u0ed8\0\u0f0a\0\372\0\u0f3c\0\u0f6e"+
    "\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe"+
    "\0\u1130\0\372\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec"+
    "\0\u0dac\0\u141e\0\u1450\0\62\0\372\0\372\0\u1482\0\372"+
    "\0\62\0\372\0\u14b4\0\372\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\372\0\372\0\372\0\u15ae\0\u15e0\0\u1612\0\u1644\0\372"+
    "\0\372\0\u1676\0\62\0\372\0\u16a8\0\u16da\0\u170c\0\u173e"+
    "\0\u1770\0\372\0\u17a2\0\u17d4\0\u1806\0\u1838\0\62\0\372"+
    "\0\372\0\372\0\u186a\0\62\0\372\0\62\0\372\0\372"+
    "\0\372\0\372\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\372"+
    "\0\62\0\372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
>>>>>>> release-0.3_card_70
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\11\1\2\1\12\2\2\1\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\7\1\23\1\24"+
    "\1\25\1\26\1\27\1\7\1\30\1\7\1\31\1\32"+
    "\1\33\1\34\2\7\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
<<<<<<< HEAD
    "\67\0\1\52\41\0\1\53\62\0\1\54\21\0\1\55"+
    "\40\0\1\56\23\0\3\7\1\57\6\0\21\7\1\0"+
    "\3\7\25\0\1\10\1\0\1\60\57\0\3\7\7\0"+
    "\21\7\1\0\3\7\15\0\13\61\1\62\1\63\46\61"+
    "\7\64\1\65\1\64\1\66\2\64\1\67\2\64\1\70"+
    "\1\64\21\65\1\64\3\65\15\64\22\0\1\71\47\0"+
    "\3\7\1\57\6\0\1\7\1\72\17\7\1\0\3\7"+
    "\24\0\3\7\1\57\6\0\2\7\1\73\14\7\1\74"+
<<<<<<< HEAD
    "\1\7\1\0\3\7\24\0\3\7\1\57\6\0\1\7"+
    "\1\75\17\7\1\0\3\7\24\0\3\7\1\57\6\0"+
    "\10\7\1\76\2\7\1\77\5\7\1\0\3\7\24\0"+
    "\3\7\1\57\6\0\16\7\1\100\2\7\1\0\3\7"+
    "\24\0\3\7\1\57\6\0\6\7\1\101\12\7\1\0"+
    "\3\7\24\0\3\7\1\57\6\0\1\7\1\102\17\7"+
    "\1\103\1\104\2\7\24\0\3\7\1\57\5\0\1\105"+
    "\1\106\16\7\1\107\1\7\1\0\2\7\1\110\24\0"+
    "\3\7\1\57\6\0\5\7\1\111\4\7\1\112\6\7"+
    "\1\0\3\7\24\0\3\7\1\57\6\0\21\7\1\113"+
    "\1\114\2\7\24\0\3\7\1\57\6\0\5\7\1\115"+
    "\4\7\1\116\4\7\1\117\1\7\1\0\3\7\24\0"+
    "\3\7\1\57\6\0\16\7\1\120\2\7\1\0\3\7"+
    "\24\0\3\7\1\57\6\0\5\7\1\121\2\7\1\122"+
    "\10\7\1\0\3\7\24\0\3\7\1\57\6\0\13\7"+
    "\1\123\5\7\1\0\3\7\55\0\1\124\31\0\3\7"+
    "\1\57\6\0\17\7\1\125\1\7\1\0\3\7\63\0"+
    "\1\126\62\0\1\127\1\130\61\0\1\131\62\0\1\132"+
    "\62\0\1\133\62\0\1\134\62\0\1\135\62\0\1\136"+
    "\14\0\4\137\1\140\56\137\1\55\1\141\1\142\60\55"+
    "\7\0\1\143\1\0\1\144\7\0\21\143\1\0\3\143"+
    "\25\0\1\145\52\0\1\61\2\0\12\61\2\0\44\61"+
    "\14\64\1\67\2\64\1\70\52\64\3\65\2\64\1\67"+
    "\2\64\1\146\1\64\21\65\1\64\3\65\24\64\3\65"+
    "\2\64\1\67\2\64\1\70\1\64\21\65\1\64\3\65"+
    "\16\64\2\0\12\64\2\0\44\64\23\0\1\147\1\0"+
    "\1\150\44\0\3\7\1\57\6\0\2\7\1\151\1\7"+
    "\1\152\14\7\1\0\3\7\24\0\3\7\1\57\5\0"+
    "\1\153\1\154\20\7\1\0\3\7\24\0\3\7\1\57"+
    "\6\0\7\7\1\155\11\7\1\0\3\7\24\0\3\7"+
    "\1\57\6\0\11\7\1\156\7\7\1\0\3\7\24\0"+
    "\3\7\1\57\5\0\1\157\1\160\20\7\1\0\3\7"+
    "\24\0\3\7\1\57\6\0\5\7\1\161\13\7\1\0"+
    "\3\7\24\0\3\7\1\57\6\0\1\7\1\162\17\7"+
    "\1\0\3\7\24\0\3\7\1\57\6\0\7\7\1\163"+
    "\11\7\1\0\3\7\24\0\3\7\1\57\6\0\2\7"+
    "\1\164\16\7\1\0\3\7\35\0\2\165\50\0\3\7"+
    "\1\57\5\0\1\165\1\166\20\7\1\0\3\7\24\0"+
    "\3\7\1\57\6\0\7\7\1\167\11\7\1\0\3\7"+
    "\24\0\3\7\1\57\6\0\21\7\1\0\1\7\1\170"+
    "\1\7\24\0\3\7\1\57\6\0\2\7\1\171\16\7"+
    "\1\0\3\7\24\0\3\7\1\57\6\0\13\7\1\172"+
    "\5\7\1\0\3\7\61\0\1\173\25\0\3\7\1\57"+
    "\6\0\21\7\1\0\1\7\1\174\1\7\24\0\3\7"+
    "\1\57\6\0\4\7\1\175\14\7\1\0\3\7\24\0"+
    "\3\7\1\57\6\0\1\7\1\176\17\7\1\0\3\7"+
    "\24\0\3\7\1\57\6\0\2\7\1\177\16\7\1\0"+
    "\3\7\24\0\3\7\1\57\6\0\4\7\1\200\14\7"+
    "\1\0\3\7\24\0\3\7\1\57\6\0\21\7\1\201"+
    "\1\202\2\7\55\0\1\203\31\0\3\7\1\57\6\0"+
    "\17\7\1\204\1\7\1\0\3\7\15\0\4\137\1\205"+
    "\61\137\1\206\1\205\56\137\2\0\1\142\67\0\3\143"+
    "\7\0\21\143\1\0\3\143\37\0\1\207\47\0\3\7"+
    "\1\57\6\0\1\7\1\210\17\7\1\0\3\7\37\0"+
    "\1\211\47\0\3\7\1\57\6\0\1\7\1\212\17\7"+
    "\1\0\3\7\24\0\3\7\1\57\6\0\4\7\1\213"+
    "\14\7\1\0\3\7\37\0\1\214\47\0\3\7\1\57"+
    "\6\0\1\7\1\215\17\7\1\0\3\7\24\0\3\7"+
    "\1\57\6\0\17\7\1\216\1\7\1\0\3\7\24\0"+
    "\3\7\1\57\6\0\17\7\1\217\1\7\1\0\3\7"+
    "\24\0\3\7\1\57\6\0\10\7\1\220\10\7\1\0"+
    "\3\7\24\0\3\7\1\57\6\0\1\7\1\221\17\7"+
    "\1\0\3\7\42\0\1\222\44\0\3\7\1\57\6\0"+
    "\4\7\1\223\14\7\1\0\3\7\24\0\3\7\1\57"+
    "\6\0\2\7\1\224\16\7\1\0\3\7\24\0\3\7"+
    "\1\57\6\0\14\7\1\225\4\7\1\0\3\7\54\0"+
    "\1\226\32\0\3\7\1\57\6\0\16\7\1\227\2\7"+
    "\1\0\3\7\24\0\3\7\1\57\6\0\1\7\1\230"+
    "\17\7\1\0\3\7\24\0\3\7\1\57\6\0\12\7"+
    "\1\231\4\7\1\232\1\7\1\0\3\7\24\0\3\7"+
    "\1\57\6\0\2\7\1\233\16\7\1\0\3\7\24\0"+
    "\3\7\1\57\6\0\5\7\1\234\13\7\1\0\3\7"+
    "\55\0\1\235\31\0\3\7\1\57\6\0\17\7\1\236"+
    "\1\7\1\0\3\7\37\0\1\237\47\0\3\7\1\57"+
    "\6\0\1\7\1\240\17\7\1\0\3\7\15\0\3\137"+
    "\1\142\1\205\56\137\24\0\1\241\45\0\3\7\1\57"+
    "\6\0\3\7\1\242\15\7\1\0\3\7\24\0\3\7"+
    "\1\57\6\0\4\7\1\243\14\7\1\0\3\7\24\0"+
    "\3\7\1\57\6\0\4\7\1\244\14\7\1\0\3\7"+
    "\24\0\3\7\1\57\6\0\4\7\1\245\14\7\1\0"+
    "\3\7\57\0\2\246\26\0\3\7\1\57\6\0\21\7"+
    "\1\246\1\247\2\7\42\0\1\250\44\0\3\7\1\57"+
    "\6\0\4\7\1\251\14\7\1\0\3\7\24\0\3\7"+
    "\1\57\6\0\12\7\1\252\6\7\1\0\3\7\24\0"+
    "\3\7\1\57\6\0\1\7\1\253\17\7\1\0\3\7"+
    "\24\0\3\7\1\57\6\0\12\7\1\254\6\7\1\0"+
    "\3\7\50\0\1\255\36\0\3\7\1\57\6\0\12\7"+
    "\1\256\6\7\1\0\3\7\42\0\1\257\44\0\3\7"+
    "\1\57\6\0\4\7\1\260\14\7\1\0\3\7\24\0"+
    "\3\7\1\57\6\0\1\7\1\261\17\7\1\0\3\7"+
    "\24\0\3\7\1\57\6\0\1\7\1\262\17\7\1\0"+
    "\3\7\55\0\1\263\31\0\3\7\1\57\6\0\17\7"+
    "\1\264\1\7\1\0\3\7\24\0\3\7\1\57\6\0"+
    "\10\7\1\265\10\7\1\0\3\7\41\0\1\266\45\0"+
    "\3\7\1\57\6\0\3\7\1\267\15\7\1\0\3\7"+
    "\24\0\3\7\1\57\6\0\2\7\1\270\16\7\1\0"+
    "\3\7\42\0\1\271\44\0\3\7\1\57\6\0\4\7"+
    "\1\272\14\7\1\0\3\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6375];
=======
    "\1\7\1\0\2\7\24\0\3\7\1\57\6\0\1\7"+
<<<<<<< HEAD
    "\1\75\17\7\1\0\2\7\24\0\3\7\1\57\6\0"+
<<<<<<< HEAD
    "\10\7\1\76\2\7\1\77\2\7\1\100\2\7\1\0"+
=======
    "\1\75\4\7\1\76\12\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\10\7\1\77\2\7\1\100\5\7\1\0"+
>>>>>>> release-0.3_card_70
    "\2\7\24\0\3\7\1\57\6\0\16\7\1\101\2\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\6\7\1\102"+
    "\12\7\1\0\2\7\24\0\3\7\1\57\6\0\1\7"+
    "\1\103\17\7\1\104\1\105\1\7\24\0\3\7\1\57"+
    "\5\0\1\106\1\107\16\7\1\110\1\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\5\7\1\111\4\7\1\112"+
<<<<<<< HEAD
    "\6\7\1\0\2\7\24\0\3\7\1\57\6\0\21\7"+
    "\1\113\1\114\1\7\24\0\3\7\1\57\6\0\5\7"+
    "\1\115\4\7\1\116\4\7\1\117\1\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\16\7\1\120\2\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\5\7\1\121\2\7"+
    "\1\122\10\7\1\0\2\7\24\0\3\7\1\57\6\0"+
    "\13\7\1\123\5\7\1\0\2\7\55\0\1\124\1\0"+
    "\2\125\25\0\3\7\1\57\6\0\17\7\1\126\1\7"+
    "\1\125\1\127\1\7\62\0\1\130\61\0\1\131\1\132"+
    "\60\0\1\133\61\0\1\134\61\0\1\135\61\0\1\136"+
    "\61\0\1\137\61\0\1\140\14\0\4\141\1\142\55\141"+
    "\1\55\1\143\1\144\57\55\7\0\1\145\1\0\1\146"+
    "\7\0\21\145\1\0\2\145\25\0\1\147\51\0\1\61"+
    "\2\0\12\61\2\0\43\61\14\64\1\67\2\64\1\70"+
    "\51\64\3\65\2\64\1\67\2\64\1\150\1\64\21\65"+
    "\1\64\2\65\24\64\3\65\2\64\1\67\2\64\1\70"+
    "\1\64\21\65\1\64\2\65\16\64\2\0\12\64\2\0"+
    "\43\64\23\0\1\151\1\0\1\152\43\0\3\7\1\57"+
    "\6\0\2\7\1\153\1\7\1\154\14\7\1\0\2\7"+
    "\24\0\3\7\1\57\5\0\1\155\1\156\20\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\7\7\1\157\11\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\11\7\1\160"+
    "\7\7\1\0\2\7\24\0\3\7\1\57\5\0\1\161"+
    "\1\162\20\7\1\0\2\7\24\0\3\7\1\57\6\0"+
    "\5\7\1\163\13\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\13\7\1\164\5\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\1\7\1\165\17\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\7\7\1\166\11\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\2\7\1\167\16\7\1\0"+
    "\2\7\35\0\2\170\47\0\3\7\1\57\5\0\1\170"+
    "\1\171\20\7\1\0\2\7\24\0\3\7\1\57\6\0"+
    "\7\7\1\172\11\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\2\7\1\173\16\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\13\7\1\174\5\7\1\0\2\7\61\0"+
    "\1\175\24\0\3\7\1\57\6\0\21\7\1\0\1\7"+
    "\1\176\24\0\3\7\1\57\6\0\4\7\1\177\14\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\1\7\1\200"+
    "\17\7\1\0\2\7\24\0\3\7\1\57\6\0\2\7"+
    "\1\201\16\7\1\0\2\7\24\0\3\7\1\57\6\0"+
    "\4\7\1\202\14\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\21\7\1\203\1\204\1\7\55\0\1\205\53\0"+
    "\1\206\36\0\3\7\1\57\6\0\17\7\1\207\1\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\11\7\1\210"+
    "\7\7\1\0\2\7\15\0\4\141\1\211\60\141\1\212"+
    "\1\211\55\141\2\0\1\144\66\0\3\145\7\0\21\145"+
    "\1\0\2\145\37\0\1\213\46\0\3\7\1\57\6\0"+
    "\1\7\1\214\17\7\1\0\2\7\37\0\1\215\46\0"+
    "\3\7\1\57\6\0\1\7\1\216\17\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\4\7\1\217\14\7\1\0"+
    "\2\7\37\0\1\220\46\0\3\7\1\57\6\0\1\7"+
    "\1\221\17\7\1\0\2\7\24\0\3\7\1\57\6\0"+
    "\17\7\1\222\1\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\13\7\1\223\5\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\17\7\1\224\1\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\10\7\1\225\10\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\1\7\1\226\17\7\1\0"+
    "\2\7\42\0\1\227\43\0\3\7\1\57\6\0\4\7"+
    "\1\230\14\7\1\0\2\7\24\0\3\7\1\57\6\0"+
    "\2\7\1\231\16\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\14\7\1\232\4\7\1\0\2\7\54\0\1\233"+
    "\31\0\3\7\1\57\6\0\16\7\1\234\2\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\1\7\1\235\17\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\12\7\1\236"+
    "\4\7\1\237\1\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\2\7\1\240\16\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\5\7\1\241\13\7\1\0\2\7\55\0"+
    "\1\242\30\0\3\7\1\57\6\0\17\7\1\243\1\7"+
    "\1\0\2\7\37\0\1\244\46\0\3\7\1\57\6\0"+
    "\1\7\1\245\17\7\1\0\2\7\15\0\3\141\1\144"+
    "\1\211\55\141\24\0\1\246\44\0\3\7\1\57\6\0"+
    "\3\7\1\247\15\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\4\7\1\250\14\7\1\0\2\7\24\0\3\7"+
    "\1\57\5\0\1\251\1\252\20\7\1\0\2\7\24\0"+
=======
    "\6\7\1\0\2\7\24\0\3\7\1\57\6\0\6\7"+
    "\1\113\12\7\1\114\1\115\1\7\24\0\3\7\1\57"+
    "\6\0\5\7\1\116\4\7\1\117\4\7\1\120\1\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\16\7\1\121"+
    "\2\7\1\0\2\7\24\0\3\7\1\57\6\0\5\7"+
    "\1\122\2\7\1\123\10\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\13\7\1\124\5\7\1\0\2\7\55\0"+
    "\1\125\30\0\3\7\1\57\6\0\17\7\1\126\1\7"+
    "\1\0\2\7\62\0\1\127\61\0\1\130\1\131\60\0"+
    "\1\132\61\0\1\133\61\0\1\134\61\0\1\135\61\0"+
    "\1\136\61\0\1\137\14\0\4\140\1\141\55\140\1\55"+
    "\1\142\1\143\57\55\7\0\1\144\1\0\1\145\7\0"+
    "\21\144\1\0\2\144\25\0\1\146\51\0\1\61\2\0"+
    "\12\61\2\0\43\61\14\64\1\67\2\64\1\70\51\64"+
    "\3\65\2\64\1\67\2\64\1\147\1\64\21\65\1\64"+
    "\2\65\24\64\3\65\2\64\1\67\2\64\1\70\1\64"+
    "\21\65\1\64\2\65\16\64\2\0\12\64\2\0\43\64"+
    "\23\0\1\150\1\0\1\151\43\0\3\7\1\57\6\0"+
    "\2\7\1\152\1\7\1\153\14\7\1\0\2\7\24\0"+
    "\3\7\1\57\5\0\1\154\1\155\20\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\7\7\1\156\11\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\11\7\1\157\5\7"+
    "\1\160\1\7\1\0\2\7\24\0\3\7\1\57\6\0"+
    "\10\7\1\161\10\7\1\0\2\7\24\0\3\7\1\57"+
    "\5\0\1\162\1\163\20\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\5\7\1\164\13\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\1\7\1\165\17\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\7\7\1\166\11\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\2\7\1\167\16\7"+
    "\1\0\2\7\35\0\2\170\47\0\3\7\1\57\5\0"+
    "\1\170\1\171\20\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\7\7\1\172\11\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\2\7\1\173\16\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\13\7\1\174\5\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\10\7\1\175\10\7\1\0"+
    "\2\7\61\0\1\176\24\0\3\7\1\57\6\0\21\7"+
    "\1\0\1\7\1\177\24\0\3\7\1\57\6\0\4\7"+
    "\1\200\14\7\1\0\2\7\24\0\3\7\1\57\6\0"+
    "\1\7\1\201\17\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\2\7\1\202\16\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\4\7\1\203\14\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\21\7\1\204\1\205\1\7\55\0"+
    "\1\206\30\0\3\7\1\57\6\0\17\7\1\207\1\7"+
    "\1\0\2\7\15\0\4\140\1\210\60\140\1\211\1\210"+
    "\55\140\2\0\1\143\66\0\3\144\7\0\21\144\1\0"+
    "\2\144\37\0\1\212\46\0\3\7\1\57\6\0\1\7"+
    "\1\213\17\7\1\0\2\7\37\0\1\214\46\0\3\7"+
    "\1\57\6\0\1\7\1\215\17\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\4\7\1\216\14\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\21\7\1\0\1\7\1\217"+
    "\24\0\3\7\1\57\6\0\7\7\1\220\11\7\1\0"+
    "\2\7\37\0\1\221\46\0\3\7\1\57\6\0\1\7"+
    "\1\222\17\7\1\0\2\7\24\0\3\7\1\57\6\0"+
    "\17\7\1\223\1\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\17\7\1\224\1\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\10\7\1\225\10\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\1\7\1\226\17\7\1\0\2\7"+
    "\42\0\1\227\43\0\3\7\1\57\6\0\4\7\1\230"+
    "\14\7\1\0\2\7\24\0\3\7\1\57\6\0\2\7"+
    "\1\231\16\7\1\0\2\7\24\0\3\7\1\57\6\0"+
    "\14\7\1\232\4\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\7\7\1\233\11\7\1\0\2\7\54\0\1\234"+
    "\31\0\3\7\1\57\6\0\16\7\1\235\2\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\1\7\1\236\17\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\12\7\1\237"+
    "\4\7\1\240\1\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\2\7\1\241\16\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\5\7\1\242\13\7\1\0\2\7\55\0"+
    "\1\243\30\0\3\7\1\57\6\0\17\7\1\244\1\7"+
    "\1\0\2\7\37\0\1\245\46\0\3\7\1\57\6\0"+
    "\1\7\1\246\17\7\1\0\2\7\15\0\3\140\1\143"+
    "\1\210\55\140\24\0\1\247\44\0\3\7\1\57\6\0"+
    "\3\7\1\250\15\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\4\7\1\251\14\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\4\7\1\252\14\7\1\0\2\7\24\0"+
>>>>>>> release-0.3_card_70
    "\3\7\1\57\6\0\4\7\1\253\14\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\4\7\1\254\14\7\1\0"+
    "\2\7\57\0\2\255\25\0\3\7\1\57\6\0\21\7"+
    "\1\255\1\256\1\7\42\0\1\257\43\0\3\7\1\57"+
    "\6\0\4\7\1\260\14\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\12\7\1\261\6\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\1\7\1\262\17\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\12\7\1\263\6\7\1\0"+
    "\2\7\50\0\1\264\35\0\3\7\1\57\6\0\12\7"+
    "\1\265\6\7\1\0\2\7\42\0\1\266\43\0\3\7"+
<<<<<<< HEAD
    "\1\57\6\0\4\7\1\267\14\7\1\0\2\7\37\0"+
    "\1\270\46\0\3\7\1\57\6\0\1\7\1\271\17\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\1\7\1\272"+
    "\17\7\1\0\2\7\24\0\3\7\1\57\6\0\1\7"+
    "\1\273\17\7\1\0\2\7\55\0\1\274\30\0\3\7"+
    "\1\57\6\0\17\7\1\275\1\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\10\7\1\276\10\7\1\0\2\7"+
    "\41\0\1\277\44\0\3\7\1\57\6\0\3\7\1\300"+
    "\15\7\1\0\2\7\24\0\3\7\1\57\6\0\2\7"+
    "\1\301\16\7\1\0\2\7\42\0\1\302\43\0\3\7"+
    "\1\57\6\0\4\7\1\303\14\7\1\0\2\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6550];
>>>>>>> release-0.3_card_53
=======
    "\10\7\1\76\2\7\1\77\5\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\16\7\1\100\2\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\6\7\1\101\12\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\1\7\1\102\17\7"+
    "\1\103\1\104\1\7\24\0\3\7\1\57\5\0\1\105"+
    "\1\106\16\7\1\107\1\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\5\7\1\110\4\7\1\111\6\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\21\7\1\112\1\113"+
    "\1\7\24\0\3\7\1\57\6\0\5\7\1\114\4\7"+
    "\1\115\4\7\1\116\1\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\16\7\1\117\2\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\5\7\1\120\2\7\1\121\10\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\13\7\1\122"+
    "\5\7\1\0\2\7\55\0\1\123\30\0\3\7\1\57"+
    "\6\0\17\7\1\124\1\7\1\0\2\7\62\0\1\125"+
    "\61\0\1\126\1\127\60\0\1\130\61\0\1\131\61\0"+
    "\1\132\61\0\1\133\61\0\1\134\61\0\1\135\14\0"+
    "\4\136\1\137\55\136\1\55\1\140\1\141\57\55\7\0"+
    "\1\142\1\0\1\143\7\0\21\142\1\0\2\142\25\0"+
    "\1\144\51\0\1\61\2\0\12\61\2\0\43\61\14\64"+
    "\1\67\2\64\1\70\51\64\3\65\2\64\1\67\2\64"+
    "\1\145\1\64\21\65\1\64\2\65\24\64\3\65\2\64"+
    "\1\67\2\64\1\70\1\64\21\65\1\64\2\65\16\64"+
    "\2\0\12\64\2\0\43\64\23\0\1\146\1\0\1\147"+
    "\43\0\3\7\1\57\6\0\2\7\1\150\1\7\1\151"+
    "\14\7\1\0\2\7\24\0\3\7\1\57\5\0\1\152"+
    "\1\153\20\7\1\0\2\7\24\0\3\7\1\57\6\0"+
    "\7\7\1\154\11\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\11\7\1\155\7\7\1\0\2\7\24\0\3\7"+
    "\1\57\5\0\1\156\1\157\20\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\5\7\1\160\11\7\1\161\1\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\1\7\1\162"+
    "\17\7\1\0\2\7\24\0\3\7\1\57\6\0\7\7"+
    "\1\163\11\7\1\0\2\7\24\0\3\7\1\57\6\0"+
    "\2\7\1\164\16\7\1\0\2\7\35\0\2\165\47\0"+
    "\3\7\1\57\5\0\1\165\1\166\20\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\7\7\1\167\11\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\2\7\1\170\16\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\13\7\1\171"+
    "\5\7\1\0\2\7\61\0\1\172\24\0\3\7\1\57"+
    "\6\0\21\7\1\0\1\7\1\173\24\0\3\7\1\57"+
    "\6\0\4\7\1\174\14\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\1\7\1\175\17\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\2\7\1\176\16\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\4\7\1\177\14\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\21\7\1\200\1\201"+
    "\1\7\55\0\1\202\30\0\3\7\1\57\6\0\17\7"+
    "\1\203\1\7\1\0\2\7\15\0\4\136\1\204\60\136"+
    "\1\205\1\204\55\136\2\0\1\141\66\0\3\142\7\0"+
    "\21\142\1\0\2\142\37\0\1\206\46\0\3\7\1\57"+
    "\6\0\1\7\1\207\17\7\1\0\2\7\37\0\1\210"+
    "\46\0\3\7\1\57\6\0\1\7\1\211\17\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\4\7\1\212\14\7"+
    "\1\0\2\7\37\0\1\213\46\0\3\7\1\57\6\0"+
    "\1\7\1\214\17\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\17\7\1\215\1\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\3\7\1\216\15\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\17\7\1\217\1\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\10\7\1\220\10\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\1\7\1\221\17\7"+
    "\1\0\2\7\42\0\1\222\43\0\3\7\1\57\6\0"+
    "\4\7\1\223\14\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\2\7\1\224\16\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\14\7\1\225\4\7\1\0\2\7\54\0"+
    "\1\226\31\0\3\7\1\57\6\0\16\7\1\227\2\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\1\7\1\230"+
    "\17\7\1\0\2\7\24\0\3\7\1\57\6\0\12\7"+
    "\1\231\4\7\1\232\1\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\2\7\1\233\16\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\5\7\1\234\13\7\1\0\2\7"+
    "\55\0\1\235\30\0\3\7\1\57\6\0\17\7\1\236"+
    "\1\7\1\0\2\7\37\0\1\237\46\0\3\7\1\57"+
    "\6\0\1\7\1\240\17\7\1\0\2\7\15\0\3\136"+
    "\1\141\1\204\55\136\24\0\1\241\44\0\3\7\1\57"+
    "\6\0\3\7\1\242\15\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\4\7\1\243\14\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\10\7\1\244\10\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\4\7\1\245\14\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\4\7\1\246\14\7"+
    "\1\0\2\7\57\0\2\247\25\0\3\7\1\57\6\0"+
    "\21\7\1\247\1\250\1\7\42\0\1\251\43\0\3\7"+
    "\1\57\6\0\4\7\1\252\14\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\12\7\1\253\6\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\1\7\1\254\17\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\12\7\1\255\6\7"+
    "\1\0\2\7\50\0\1\256\35\0\3\7\1\57\6\0"+
    "\12\7\1\257\6\7\1\0\2\7\42\0\1\260\43\0"+
    "\3\7\1\57\6\0\4\7\1\261\14\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\4\7\1\262\14\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\1\7\1\263\17\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\1\7\1\264"+
    "\17\7\1\0\2\7\55\0\1\265\30\0\3\7\1\57"+
    "\6\0\17\7\1\266\1\7\1\0\2\7\24\0\3\7"+
    "\1\57\6\0\10\7\1\267\10\7\1\0\2\7\41\0"+
    "\1\270\44\0\3\7\1\57\6\0\3\7\1\271\15\7"+
    "\1\0\2\7\24\0\3\7\1\57\6\0\2\7\1\272"+
    "\16\7\1\0\2\7\42\0\1\273\43\0\3\7\1\57"+
    "\6\0\4\7\1\274\14\7\1\0\2\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6350];
>>>>>>> release-0.3_card_65
=======
    "\66\0\1\52\40\0\1\53\61\0\1\54\21\0\1\55"+
    "\37\0\1\56\23\0\3\7\1\57\6\0\17\7\1\0"+
    "\4\7\25\0\1\10\1\0\1\60\56\0\3\7\7\0"+
    "\17\7\1\0\4\7\15\0\13\61\1\62\1\63\45\61"+
    "\7\64\1\65\1\64\1\66\2\64\1\67\2\64\1\70"+
    "\1\64\17\65\1\64\4\65\15\64\22\0\1\71\46\0"+
    "\3\7\1\57\6\0\1\7\1\72\15\7\1\0\4\7"+
    "\24\0\3\7\1\57\6\0\2\7\1\73\14\7\1\0"+
    "\1\7\1\74\2\7\24\0\3\7\1\57\6\0\1\7"+
    "\1\75\15\7\1\0\4\7\24\0\3\7\1\57\6\0"+
    "\10\7\1\76\2\7\1\77\3\7\1\0\4\7\24\0"+
    "\3\7\1\57\6\0\16\7\1\100\1\0\4\7\24\0"+
    "\3\7\1\57\6\0\6\7\1\101\10\7\1\0\4\7"+
    "\24\0\3\7\1\57\6\0\1\7\1\102\15\7\1\103"+
    "\1\104\3\7\24\0\3\7\1\57\5\0\1\105\1\106"+
    "\16\7\1\0\1\7\1\107\2\7\24\0\3\7\1\57"+
    "\6\0\5\7\1\110\4\7\1\111\4\7\1\0\4\7"+
    "\24\0\3\7\1\57\6\0\17\7\1\112\1\113\3\7"+
    "\24\0\3\7\1\57\6\0\5\7\1\114\4\7\1\115"+
    "\4\7\1\0\1\7\1\116\2\7\24\0\3\7\1\57"+
    "\6\0\16\7\1\117\1\120\1\121\3\7\57\0\1\122"+
    "\26\0\3\7\1\57\6\0\17\7\1\0\1\7\1\123"+
    "\2\7\24\0\3\7\1\57\6\0\5\7\1\124\2\7"+
    "\1\125\6\7\1\0\4\7\24\0\3\7\1\57\6\0"+
    "\13\7\1\126\3\7\1\0\4\7\62\0\1\127\61\0"+
    "\1\130\1\131\60\0\1\132\61\0\1\133\61\0\1\134"+
    "\61\0\1\135\61\0\1\136\61\0\1\137\14\0\4\140"+
    "\1\141\55\140\1\55\1\142\1\143\57\55\7\0\1\144"+
    "\1\0\1\145\7\0\17\144\1\0\4\144\25\0\1\146"+
    "\51\0\1\61\2\0\12\61\2\0\43\61\14\64\1\67"+
    "\2\64\1\70\51\64\3\65\2\64\1\67\2\64\1\147"+
    "\1\64\17\65\1\64\4\65\24\64\3\65\2\64\1\67"+
    "\2\64\1\70\1\64\17\65\1\64\4\65\16\64\2\0"+
    "\12\64\2\0\43\64\23\0\1\150\1\0\1\151\43\0"+
    "\3\7\1\57\6\0\2\7\1\152\1\7\1\153\12\7"+
    "\1\0\4\7\24\0\3\7\1\57\5\0\1\154\1\155"+
    "\16\7\1\0\4\7\24\0\3\7\1\57\6\0\7\7"+
    "\1\156\7\7\1\0\4\7\24\0\3\7\1\57\6\0"+
    "\11\7\1\157\5\7\1\0\4\7\24\0\3\7\1\57"+
    "\5\0\1\160\1\161\16\7\1\0\4\7\24\0\3\7"+
    "\1\57\6\0\5\7\1\162\11\7\1\0\4\7\24\0"+
    "\3\7\1\57\6\0\1\7\1\163\15\7\1\0\4\7"+
    "\24\0\3\7\1\57\6\0\7\7\1\164\7\7\1\0"+
    "\4\7\24\0\3\7\1\57\6\0\2\7\1\165\14\7"+
    "\1\0\4\7\35\0\2\166\47\0\3\7\1\57\5\0"+
    "\1\166\1\167\16\7\1\0\4\7\24\0\3\7\1\57"+
    "\6\0\7\7\1\170\7\7\1\0\4\7\24\0\3\7"+
    "\1\57\6\0\2\7\1\171\14\7\1\0\4\7\24\0"+
    "\3\7\1\57\6\0\13\7\1\172\3\7\1\0\4\7"+
    "\61\0\1\173\24\0\3\7\1\57\6\0\17\7\1\0"+
    "\3\7\1\174\24\0\3\7\1\57\6\0\4\7\1\175"+
    "\12\7\1\0\4\7\24\0\3\7\1\57\6\0\1\7"+
    "\1\176\15\7\1\0\4\7\42\0\1\177\43\0\3\7"+
    "\1\57\6\0\4\7\1\200\12\7\1\0\4\7\57\0"+
    "\1\201\26\0\3\7\1\57\6\0\17\7\1\0\1\7"+
    "\1\202\2\7\24\0\3\7\1\57\6\0\2\7\1\203"+
    "\14\7\1\0\4\7\24\0\3\7\1\57\6\0\4\7"+
    "\1\204\12\7\1\0\4\7\24\0\3\7\1\57\6\0"+
    "\17\7\1\205\1\206\3\7\15\0\4\140\1\207\60\140"+
    "\1\210\1\207\55\140\2\0\1\143\66\0\3\144\7\0"+
    "\17\144\1\0\4\144\37\0\1\211\46\0\3\7\1\57"+
    "\6\0\1\7\1\212\15\7\1\0\4\7\37\0\1\213"+
    "\46\0\3\7\1\57\6\0\1\7\1\214\15\7\1\0"+
    "\4\7\24\0\3\7\1\57\6\0\4\7\1\215\12\7"+
    "\1\0\4\7\37\0\1\216\46\0\3\7\1\57\6\0"+
    "\1\7\1\217\15\7\1\0\4\7\24\0\3\7\1\57"+
    "\6\0\17\7\1\0\1\7\1\220\2\7\24\0\3\7"+
    "\1\57\6\0\17\7\1\0\1\7\1\221\2\7\24\0"+
    "\3\7\1\57\6\0\10\7\1\222\6\7\1\0\4\7"+
    "\24\0\3\7\1\57\6\0\1\7\1\223\15\7\1\0"+
    "\4\7\42\0\1\224\43\0\3\7\1\57\6\0\4\7"+
    "\1\225\12\7\1\0\4\7\24\0\3\7\1\57\6\0"+
    "\2\7\1\226\14\7\1\0\4\7\24\0\3\7\1\57"+
    "\6\0\14\7\1\227\2\7\1\0\4\7\54\0\1\230"+
    "\31\0\3\7\1\57\6\0\16\7\1\231\1\0\4\7"+
    "\24\0\3\7\1\57\6\0\1\7\1\232\15\7\1\0"+
    "\4\7\24\0\3\7\1\57\6\0\12\7\1\233\4\7"+
    "\1\0\1\7\1\234\2\7\54\0\1\235\31\0\3\7"+
    "\1\57\6\0\16\7\1\236\1\0\4\7\37\0\1\237"+
    "\46\0\3\7\1\57\6\0\1\7\1\240\15\7\1\0"+
    "\4\7\24\0\3\7\1\57\6\0\2\7\1\241\14\7"+
    "\1\0\4\7\24\0\3\7\1\57\6\0\5\7\1\242"+
    "\11\7\1\0\4\7\57\0\1\243\26\0\3\7\1\57"+
    "\6\0\17\7\1\0\1\7\1\244\2\7\15\0\3\140"+
    "\1\143\1\207\55\140\24\0\1\245\44\0\3\7\1\57"+
    "\6\0\3\7\1\246\13\7\1\0\4\7\24\0\3\7"+
    "\1\57\6\0\4\7\1\247\12\7\1\0\4\7\24\0"+
    "\3\7\1\57\6\0\4\7\1\250\12\7\1\0\4\7"+
    "\24\0\3\7\1\57\6\0\4\7\1\251\12\7\1\0"+
    "\4\7\55\0\2\252\27\0\3\7\1\57\6\0\17\7"+
    "\1\252\1\253\3\7\42\0\1\254\43\0\3\7\1\57"+
    "\6\0\4\7\1\255\12\7\1\0\4\7\24\0\3\7"+
    "\1\57\6\0\12\7\1\256\4\7\1\0\4\7\24\0"+
    "\3\7\1\57\6\0\1\7\1\257\15\7\1\0\4\7"+
    "\50\0\1\260\35\0\3\7\1\57\6\0\12\7\1\261"+
    "\4\7\1\0\4\7\24\0\3\7\1\57\6\0\12\7"+
    "\1\262\4\7\1\0\4\7\42\0\1\263\43\0\3\7"+
    "\1\57\6\0\4\7\1\264\12\7\1\0\4\7\24\0"+
    "\3\7\1\57\6\0\1\7\1\265\15\7\1\0\4\7"+
    "\24\0\3\7\1\57\6\0\1\7\1\266\15\7\1\0"+
    "\4\7\57\0\1\267\26\0\3\7\1\57\6\0\17\7"+
    "\1\0\1\7\1\270\2\7\24\0\3\7\1\57\6\0"+
    "\10\7\1\271\6\7\1\0\4\7\41\0\1\272\44\0"+
    "\3\7\1\57\6\0\3\7\1\273\13\7\1\0\4\7"+
    "\24\0\3\7\1\57\6\0\2\7\1\274\14\7\1\0"+
    "\4\7\42\0\1\275\43\0\3\7\1\57\6\0\4\7"+
    "\1\276\12\7\1\0\4\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6400];
>>>>>>> release-0.3_card_66
=======
    "\1\57\6\0\4\7\1\267\14\7\1\0\2\7\24\0"+
    "\3\7\1\57\6\0\16\7\1\270\2\7\1\0\2\7"+
    "\24\0\3\7\1\57\6\0\1\7\1\271\17\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\1\7\1\272\17\7"+
    "\1\0\2\7\55\0\1\273\30\0\3\7\1\57\6\0"+
    "\17\7\1\274\1\7\1\0\2\7\24\0\3\7\1\57"+
    "\6\0\10\7\1\275\10\7\1\0\2\7\41\0\1\276"+
    "\44\0\3\7\1\57\6\0\3\7\1\277\15\7\1\0"+
    "\2\7\24\0\3\7\1\57\6\0\2\7\1\300\16\7"+
    "\1\0\2\7\42\0\1\301\43\0\3\7\1\57\6\0"+
    "\4\7\1\302\14\7\1\0\2\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6550];
>>>>>>> release-0.3_card_70
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\31\1\1\11\10\1\4\11\1\0\2\11"+
<<<<<<< HEAD
<<<<<<< HEAD
    "\1\1\1\11\3\0\1\11\5\0\1\11\1\0\11\1"+
<<<<<<< HEAD
    "\1\0\1\1\1\11\5\1\1\0\12\1\11\11\2\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\0\1\11"+
<<<<<<< HEAD
    "\2\1\1\0\3\1\1\0\5\1\1\0\5\1\1\0"+
=======
    "\2\1\1\0\3\1\1\0\6\1\1\0\4\1\1\0"+
>>>>>>> release-0.3_card_65
    "\5\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\11\6\1\1\0\3\1\1\0"+
=======
    "\1\1\1\11\3\0\1\11\5\0\1\11\1\0\12\1"+
    "\1\0\1\1\1\11\5\1\1\0\12\1\11\11\2\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\0\1\11"+
    "\2\1\1\0\5\1\1\0\5\1\1\0\5\1\1\0"+
    "\5\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\4\1\1\11\5\1\1\0\4\1\1\0"+
>>>>>>> release-0.3_card_70
    "\6\1\1\11\1\1\1\0\1\1\1\0\5\1\1\0"+
    "\1\1\1\11\4\1\1\11\1\1\1\11\4\1\1\0"+
    "\2\1\1\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
<<<<<<< HEAD
<<<<<<< HEAD
    int [] result = new int[186];
=======
    "\1\1\1\11\3\0\1\11\5\0\1\11\1\0\12\1"+
    "\1\0\1\1\1\11\4\1\1\0\11\1\1\0\2\1"+
    "\11\11\2\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\0\1\11\2\1\1\0\3\1\1\0\6\1\1\0"+
    "\4\1\1\0\5\1\1\0\1\1\1\0\1\11\2\1"+
    "\1\0\1\1\1\0\1\1\1\11\2\1\1\11\6\1"+
    "\1\0\3\1\1\0\6\1\1\11\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\3\1\1\0\1\1\1\11\4\1"+
    "\1\11\1\1\1\11\1\1\1\11\3\1\1\0\2\1"+
    "\1\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
>>>>>>> release-0.3_card_53
=======
    int [] result = new int[188];
>>>>>>> release-0.3_card_65
=======
    "\1\0\1\1\1\11\4\1\1\0\5\1\1\0\6\1"+
    "\11\11\2\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\0\1\11\2\1\1\0\3\1\1\0\5\1\1\0"+
    "\4\1\1\0\3\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\2\1\1\11"+
    "\5\1\1\0\3\1\1\0\4\1\1\11\1\1\1\0"+
    "\3\1\1\11\1\1\1\0\4\1\1\0\1\1\1\11"+
    "\3\1\1\11\2\1\1\11\3\1\1\0\2\1\1\0"+
    "\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
>>>>>>> release-0.3_card_66
=======
    int [] result = new int[194];
>>>>>>> release-0.3_card_70
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	// Initialize any necessary variables here
	
	// A table I will create to store Lexical Errors found | import library for LinkedList
	public LinkedList<TError> TableLE = new LinkedList<TError>();
	public LinkedList<String> StmtCopy = new LinkedList<String>(); // DELETE THIS, will be replaced by PrettyfiedStatement
	
	public LinkedList<PrettyStatement> PrettyfiedStatement = new LinkedList<PrettyStatement>();
	
		
	// Will need to create a structure to save the lexeme and its corresponding category code.
	public void prettyfier (String lexeme, int category) {
		
		PrettyStatement ps = new PrettyStatement(lexeme,category);
		PrettyfiedStatement.add(ps);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JFlex_Rules_SQL(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("\n### Lexical error (Illegal element) ### - '" + yytext() + "' line: " + yyline + ", column: " + yychar + "\n"); 
				  	  TError errors_found = new TError(yytext(),yyline,yycolumn,"Lexical Error","Unrecognized symbol.");
				  	  TableLE.add(errors_found); 
				  	  prettyfier(yytext(), Categories.ERROR);
					  return new Symbol(sym.ILLEGAL_CHAR, yyline, yycolumn, yytext());
            }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> release-0.3_card_65
=======
>>>>>>> release-0.3_card_66
          case 61: break;
          case 2: 
            { System.out.println("Recognized space: " + yytext()); prettyfier(yytext(), Categories.NOTHING );
            }
          case 62: break;
          case 3: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDE, yyline+1, yycolumn+1, yytext());
            }
          case 63: break;
          case 4: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._STAR, yyline+1, yycolumn+1, yytext());
            }
          case 64: break;
          case 5: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUS, yyline+1, yycolumn+1, yytext());
            }
          case 65: break;
          case 6: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.IDENTIFIER, yyline+1, yycolumn+1, yytext());
            }
          case 66: break;
          case 7: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.INTEGER, yyline+1, yycolumn+1, yytext());
            }
          case 67: break;
          case 8: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._EQU, yyline+1, yycolumn+1, yytext());
            }
          case 68: break;
          case 9: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GT, yyline+1, yycolumn+1, yytext());
            }
          case 69: break;
          case 10: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LT, yyline+1, yycolumn+1, yytext());
            }
          case 70: break;
          case 11: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUS, yyline+1, yycolumn+1, yytext());
            }
          case 71: break;
          case 12: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OPENPAR, yyline+1, yycolumn+1, yytext());
            }
          case 72: break;
          case 13: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._CLOSEPAR, yyline+1, yycolumn+1, yytext());
            }
          case 73: break;
          case 14: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._SEMCOL2, yyline+1, yycolumn+1, yytext());
            }
          case 74: break;
          case 15: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._COMMA, yyline+1, yycolumn+1, yytext());
            }
          case 75: break;
          case 16: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDEEQ, yyline+1, yycolumn+1, yytext());
            }
          case 76: break;
          case 17: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._TIMESEQ, yyline+1, yycolumn+1, yytext());
            }
          case 77: break;
          case 18: 
            { System.out.println("Recognized comment: " + yytext()); prettyfier(yytext(), Categories.COMMENT );
            }
          case 78: break;
          case 19: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 79: break;
          case 20: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.LITERAL_STRING); return new Symbol(sym.LITERAL_STRING, yyline+1, yycolumn+1, yytext());
            }
          case 80: break;
          case 21: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QCOLALIAS, yyline+1, yycolumn+1, yytext());
            }
          case 81: break;
          case 22: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AS, yyline+1, yycolumn+1, yytext());
            }
          case 82: break;
          case 23: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._OR, yyline+1, yycolumn+1, yytext());
            }
          case 83: break;
          case 24: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ON, yyline+1, yycolumn+1, yytext());
            }
          case 84: break;
          case 25: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IN, yyline+1, yycolumn+1, yytext());
            }
          case 85: break;
          case 26: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GET, yyline+1, yycolumn+1, yytext());
            }
          case 86: break;
          case 27: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LET, yyline+1, yycolumn+1, yytext());
            }
          case 87: break;
          case 28: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF, yyline+1, yycolumn+1, yytext());
            }
          case 88: break;
          case 29: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF2, yyline+1, yycolumn+1, yytext());
            }
          case 89: break;
          case 30: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 90: break;
          case 31: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MODEQ, yyline+1, yycolumn+1, yytext());
            }
          case 91: break;
          case 32: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._ANDEQ, yyline+1, yycolumn+1, yytext());
            }
          case 92: break;
          case 33: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._POWEQ, yyline+1, yycolumn+1, yytext());
            }
          case 93: break;
          case 34: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OREQ, yyline+1, yycolumn+1, yytext());
            }
          case 94: break;
          case 35: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.TABDOTCOL, yyline+1, yycolumn+1, yytext());
            }
          case 95: break;
          case 36: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.REAL, yyline+1, yycolumn+1, yytext());
            }
          case 96: break;
          case 37: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QTABLENAME, yyline+1, yycolumn+1, yytext());
            }
          case 97: break;
          case 38: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SET, yyline+1, yycolumn+1, yytext());
            }
          case 98: break;
          case 39: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.END, yyline+1, yycolumn+1, yytext());
            }
          case 99: break;
          case 40: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._AND, yyline+1, yycolumn+1, yytext());
            }
          case 100: break;
=======
          case 63: break;
          case 2: 
            { System.out.println("Recognized space: " + yytext()); prettyfier(yytext(), Categories.NOTHING );
            }
          case 64: break;
          case 3: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDE, yyline+1, yycolumn+1, yytext());
            }
          case 65: break;
          case 4: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._STAR, yyline+1, yycolumn+1, yytext());
            }
          case 66: break;
          case 5: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUS, yyline+1, yycolumn+1, yytext());
            }
          case 67: break;
          case 6: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.IDENTIFIER, yyline+1, yycolumn+1, yytext());
            }
          case 68: break;
          case 7: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.INTEGER, yyline+1, yycolumn+1, yytext());
            }
          case 69: break;
          case 8: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._EQU, yyline+1, yycolumn+1, yytext());
            }
          case 70: break;
          case 9: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GT, yyline+1, yycolumn+1, yytext());
            }
          case 71: break;
          case 10: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LT, yyline+1, yycolumn+1, yytext());
            }
          case 72: break;
          case 11: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUS, yyline+1, yycolumn+1, yytext());
            }
          case 73: break;
          case 12: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OPENPAR, yyline+1, yycolumn+1, yytext());
            }
          case 74: break;
          case 13: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._CLOSEPAR, yyline+1, yycolumn+1, yytext());
            }
          case 75: break;
          case 14: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._SEMCOL2, yyline+1, yycolumn+1, yytext());
            }
          case 76: break;
          case 15: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._COMMA, yyline+1, yycolumn+1, yytext());
            }
          case 77: break;
          case 16: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDEEQ, yyline+1, yycolumn+1, yytext());
            }
          case 78: break;
          case 17: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._TIMESEQ, yyline+1, yycolumn+1, yytext());
            }
          case 79: break;
          case 18: 
            { System.out.println("Recognized comment: " + yytext()); prettyfier(yytext(), Categories.COMMENT );
            }
          case 80: break;
          case 19: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 81: break;
          case 20: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.LITERAL_STRING); return new Symbol(sym.LITERAL_STRING, yyline+1, yycolumn+1, yytext());
            }
          case 82: break;
          case 21: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QCOLALIAS, yyline+1, yycolumn+1, yytext());
            }
          case 83: break;
          case 22: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AS, yyline+1, yycolumn+1, yytext());
            }
          case 84: break;
          case 23: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._OR, yyline+1, yycolumn+1, yytext());
            }
          case 85: break;
          case 24: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ON, yyline+1, yycolumn+1, yytext());
            }
          case 86: break;
          case 25: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IN, yyline+1, yycolumn+1, yytext());
            }
          case 87: break;
          case 26: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GET, yyline+1, yycolumn+1, yytext());
            }
          case 88: break;
          case 27: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LET, yyline+1, yycolumn+1, yytext());
            }
          case 89: break;
          case 28: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF, yyline+1, yycolumn+1, yytext());
            }
          case 90: break;
          case 29: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF2, yyline+1, yycolumn+1, yytext());
            }
          case 91: break;
          case 30: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 92: break;
          case 31: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MODEQ, yyline+1, yycolumn+1, yytext());
            }
          case 93: break;
          case 32: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._ANDEQ, yyline+1, yycolumn+1, yytext());
            }
          case 94: break;
          case 33: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._POWEQ, yyline+1, yycolumn+1, yytext());
            }
          case 95: break;
          case 34: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OREQ, yyline+1, yycolumn+1, yytext());
            }
          case 96: break;
          case 35: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.TABDOTCOL, yyline+1, yycolumn+1, yytext());
            }
          case 97: break;
          case 36: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.REAL, yyline+1, yycolumn+1, yytext());
            }
          case 98: break;
          case 37: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QTABLENAME, yyline+1, yycolumn+1, yytext());
            }
          case 99: break;
          case 38: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SET, yyline+1, yycolumn+1, yytext());
            }
          case 100: break;
          case 39: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.END, yyline+1, yycolumn+1, yytext());
            }
          case 101: break;
          case 40: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._AND, yyline+1, yycolumn+1, yytext());
            }
          case 102: break;
>>>>>>> release-0.3_card_70
          case 41: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AVG, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 101: break;
=======
          case 103: break;
>>>>>>> release-0.3_card_70
          case 42: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ELSE, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 102: break;
          case 43: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LEFT, yyline+1, yycolumn+1, yytext());
            }
          case 103: break;
          case 44: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CASE, yyline+1, yycolumn+1, yytext());
            }
          case 104: break;
          case 45: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.THEN, yyline+1, yycolumn+1, yytext());
            }
          case 105: break;
          case 46: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FULL, yyline+1, yycolumn+1, yytext());
            }
          case 106: break;
          case 47: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FROM, yyline+1, yycolumn+1, yytext());
            }
          case 107: break;
          case 48: 
<<<<<<< HEAD
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHEN, yyline+1, yycolumn+1, yytext());
=======
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WITH, yyline+1, yycolumn+1, yytext());
>>>>>>> release-0.3_card_66
            }
          case 108: break;
          case 49: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NULL, yyline+1, yycolumn+1, yytext());
            }
          case 109: break;
          case 50: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.JOIN, yyline+1, yycolumn+1, yytext());
            }
          case 110: break;
          case 51: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.COUNT, yyline+1, yycolumn+1, yytext());
            }
          case 111: break;
          case 52: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RIGHT, yyline+1, yycolumn+1, yytext());
            }
          case 112: break;
          case 53: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.OUTER, yyline+1, yycolumn+1, yytext());
            }
          case 113: break;
          case 54: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHERE, yyline+1, yycolumn+1, yytext());
            }
          case 114: break;
          case 55: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INNER, yyline+1, yycolumn+1, yytext());
            }
          case 115: break;
          case 56: 
<<<<<<< HEAD
<<<<<<< HEAD
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SELECT, yyline+1, yycolumn+1, yytext());
=======
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CONCAT, yyline+1, yycolumn+1, yytext());
>>>>>>> release-0.3_card_65
=======
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SELECT, yyline+1, yycolumn+1, yytext());
>>>>>>> release-0.3_card_66
            }
          case 116: break;
          case 57: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.UPDATE, yyline+1, yycolumn+1, yytext());
            }
          case 117: break;
          case 58: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DELETE, yyline+1, yycolumn+1, yytext());
<<<<<<< HEAD
<<<<<<< HEAD
            }
          case 118: break;
          case 59: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NATURAL, yyline+1, yycolumn+1, yytext());
            }
          case 119: break;
          case 60: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DISTINCT, yyline+1, yycolumn+1, yytext());
            }
          case 120: break;
=======
          case 62: break;
          case 2: 
            { System.out.println("Recognized space: " + yytext()); prettyfier(yytext(), Categories.NOTHING );
            }
          case 63: break;
          case 3: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDE, yyline+1, yycolumn+1, yytext());
            }
          case 64: break;
          case 4: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._STAR, yyline+1, yycolumn+1, yytext());
            }
          case 65: break;
          case 5: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUS, yyline+1, yycolumn+1, yytext());
            }
          case 66: break;
          case 6: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.IDENTIFIER, yyline+1, yycolumn+1, yytext());
            }
          case 67: break;
          case 7: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.INTEGER, yyline+1, yycolumn+1, yytext());
            }
          case 68: break;
          case 8: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._EQU, yyline+1, yycolumn+1, yytext());
            }
          case 69: break;
          case 9: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GT, yyline+1, yycolumn+1, yytext());
            }
          case 70: break;
          case 10: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LT, yyline+1, yycolumn+1, yytext());
            }
          case 71: break;
          case 11: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUS, yyline+1, yycolumn+1, yytext());
            }
          case 72: break;
          case 12: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OPENPAR, yyline+1, yycolumn+1, yytext());
            }
          case 73: break;
          case 13: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._CLOSEPAR, yyline+1, yycolumn+1, yytext());
            }
          case 74: break;
          case 14: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._SEMCOL2, yyline+1, yycolumn+1, yytext());
            }
          case 75: break;
          case 15: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._COMMA, yyline+1, yycolumn+1, yytext());
            }
          case 76: break;
          case 16: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDEEQ, yyline+1, yycolumn+1, yytext());
            }
          case 77: break;
          case 17: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._TIMESEQ, yyline+1, yycolumn+1, yytext());
            }
          case 78: break;
          case 18: 
            { System.out.println("Recognized comment: " + yytext()); prettyfier(yytext(), Categories.COMMENT );
            }
          case 79: break;
          case 19: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 80: break;
          case 20: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.LITERAL_STRING); return new Symbol(sym.LITERAL_STRING, yyline+1, yycolumn+1, yytext());
            }
          case 81: break;
          case 21: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QCOLALIAS, yyline+1, yycolumn+1, yytext());
            }
          case 82: break;
          case 22: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AS, yyline+1, yycolumn+1, yytext());
            }
          case 83: break;
          case 23: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._OR, yyline+1, yycolumn+1, yytext());
            }
          case 84: break;
          case 24: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ON, yyline+1, yycolumn+1, yytext());
            }
          case 85: break;
          case 25: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IN, yyline+1, yycolumn+1, yytext());
            }
          case 86: break;
          case 26: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GET, yyline+1, yycolumn+1, yytext());
            }
          case 87: break;
          case 27: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LET, yyline+1, yycolumn+1, yytext());
            }
          case 88: break;
          case 28: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF, yyline+1, yycolumn+1, yytext());
            }
          case 89: break;
          case 29: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF2, yyline+1, yycolumn+1, yytext());
            }
          case 90: break;
          case 30: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 91: break;
          case 31: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MODEQ, yyline+1, yycolumn+1, yytext());
            }
          case 92: break;
          case 32: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._ANDEQ, yyline+1, yycolumn+1, yytext());
            }
          case 93: break;
          case 33: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._POWEQ, yyline+1, yycolumn+1, yytext());
            }
          case 94: break;
          case 34: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OREQ, yyline+1, yycolumn+1, yytext());
            }
          case 95: break;
          case 35: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.TABDOTCOL, yyline+1, yycolumn+1, yytext());
            }
          case 96: break;
          case 36: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.REAL, yyline+1, yycolumn+1, yytext());
            }
          case 97: break;
          case 37: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QTABLENAME, yyline+1, yycolumn+1, yytext());
            }
          case 98: break;
          case 38: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SET, yyline+1, yycolumn+1, yytext());
            }
          case 99: break;
          case 39: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.END, yyline+1, yycolumn+1, yytext());
            }
          case 100: break;
          case 40: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._AND, yyline+1, yycolumn+1, yytext());
            }
          case 101: break;
          case 41: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IIF, yyline+1, yycolumn+1, yytext());
            }
          case 102: break;
          case 42: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ELSE, yyline+1, yycolumn+1, yytext());
            }
          case 103: break;
          case 43: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LEFT, yyline+1, yycolumn+1, yytext());
            }
          case 104: break;
          case 44: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CASE, yyline+1, yycolumn+1, yytext());
            }
          case 105: break;
          case 45: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.THEN, yyline+1, yycolumn+1, yytext());
            }
          case 106: break;
          case 46: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FULL, yyline+1, yycolumn+1, yytext());
            }
          case 107: break;
          case 47: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FROM, yyline+1, yycolumn+1, yytext());
            }
          case 108: break;
          case 48: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHEN, yyline+1, yycolumn+1, yytext());
            }
          case 109: break;
          case 49: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NULL, yyline+1, yycolumn+1, yytext());
            }
          case 110: break;
          case 50: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.JOIN, yyline+1, yycolumn+1, yytext());
            }
          case 111: break;
          case 51: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.COUNT, yyline+1, yycolumn+1, yytext());
            }
          case 112: break;
          case 52: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RIGHT, yyline+1, yycolumn+1, yytext());
            }
          case 113: break;
          case 53: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.OUTER, yyline+1, yycolumn+1, yytext());
            }
          case 114: break;
          case 54: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHERE, yyline+1, yycolumn+1, yytext());
            }
          case 115: break;
          case 55: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INNER, yyline+1, yycolumn+1, yytext());
            }
          case 116: break;
          case 56: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SELECT, yyline+1, yycolumn+1, yytext());
            }
          case 117: break;
          case 57: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CHOOSE, yyline+1, yycolumn+1, yytext());
            }
          case 118: break;
          case 58: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.UPDATE, yyline+1, yycolumn+1, yytext());
            }
          case 119: break;
          case 59: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DELETE, yyline+1, yycolumn+1, yytext());
            }
          case 120: break;
          case 60: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NATURAL, yyline+1, yycolumn+1, yytext());
            }
          case 121: break;
          case 61: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DISTINCT, yyline+1, yycolumn+1, yytext());
            }
          case 122: break;
>>>>>>> release-0.3_card_53
=======
            }
          case 118: break;
          case 59: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NATURAL, yyline+1, yycolumn+1, yytext());
            }
          case 119: break;
          case 60: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DISTINCT, yyline+1, yycolumn+1, yytext());
            }
          case 120: break;
>>>>>>> release-0.3_card_65
=======
            }
          case 118: break;
          case 59: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NATURAL, yyline+1, yycolumn+1, yytext());
            }
          case 119: break;
          case 60: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DISTINCT, yyline+1, yycolumn+1, yytext());
            }
          case 120: break;
>>>>>>> release-0.3_card_66
=======
          case 104: break;
          case 43: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LPAD, yyline+1, yycolumn+1, yytext());
            }
          case 105: break;
          case 44: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CASE, yyline+1, yycolumn+1, yytext());
            }
          case 106: break;
          case 45: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.THEN, yyline+1, yycolumn+1, yytext());
            }
          case 107: break;
          case 46: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FULL, yyline+1, yycolumn+1, yytext());
            }
          case 108: break;
          case 47: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FROM, yyline+1, yycolumn+1, yytext());
            }
          case 109: break;
          case 48: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RPAD, yyline+1, yycolumn+1, yytext());
            }
          case 110: break;
          case 49: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHEN, yyline+1, yycolumn+1, yytext());
            }
          case 111: break;
          case 50: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NULL, yyline+1, yycolumn+1, yytext());
            }
          case 112: break;
          case 51: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.JOIN, yyline+1, yycolumn+1, yytext());
            }
          case 113: break;
          case 52: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.COUNT, yyline+1, yycolumn+1, yytext());
            }
          case 114: break;
          case 53: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RIGHT, yyline+1, yycolumn+1, yytext());
            }
          case 115: break;
          case 54: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.OUTER, yyline+1, yycolumn+1, yytext());
            }
          case 116: break;
          case 55: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHERE, yyline+1, yycolumn+1, yytext());
            }
          case 117: break;
          case 56: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INNER, yyline+1, yycolumn+1, yytext());
            }
          case 118: break;
          case 57: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SELECT, yyline+1, yycolumn+1, yytext());
            }
          case 119: break;
          case 58: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LENGTH, yyline+1, yycolumn+1, yytext());
            }
          case 120: break;
          case 59: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.UPDATE, yyline+1, yycolumn+1, yytext());
            }
          case 121: break;
          case 60: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DELETE, yyline+1, yycolumn+1, yytext());
            }
          case 122: break;
          case 61: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NATURAL, yyline+1, yycolumn+1, yytext());
            }
          case 123: break;
          case 62: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DISTINCT, yyline+1, yycolumn+1, yytext());
            }
          case 124: break;
>>>>>>> release-0.3_card_70
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
