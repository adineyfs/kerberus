/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */

package com.kerberus.model.syntaxValidator.rules.sql;


import java_cup.runtime.*; 		// Required to send lexemas to Cup
import java.util.LinkedList; 	// Required for LinkedList
import com.kerberus.model.syntaxValidator.rules.util.*;
import com.kerberus.model.syntaxValidator.rules.sql.sym;

/**
 * This class is a simple example lexer.
 */


public class JFlex_Rules_SQL implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\2\1\15\1\16\1\1\22\0\1\6\1\53\1\17"+
    "\2\0\1\55\1\56\1\13\1\61\1\62\1\4\1\54\1\64\1\5"+
    "\1\12\1\3\2\10\1\47\7\10\1\0\1\63\1\52\1\50\1\51"+
    "\2\0\1\31\1\7\1\24\1\30\1\22\1\32\1\44\1\37\1\41"+
    "\1\43\1\7\1\23\1\35\1\42\1\34\1\27\1\7\1\33\1\21"+
    "\1\25\1\26\1\45\1\36\1\46\2\7\1\0\1\14\1\0\1\57"+
    "\1\11\1\0\1\31\1\7\1\24\1\30\1\22\1\32\1\44\1\37"+
    "\1\41\1\43\1\7\1\23\1\35\1\42\1\34\1\27\1\7\1\33"+
    "\1\21\1\25\1\26\1\45\1\36\1\46\2\7\1\0\1\60\10\0"+
    "\1\15\252\0\2\40\115\0\1\20\u1ea8\0\1\15\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\4\1\15\6\1\1\3\6\1\10\1\11\1\12\1\1"+
    "\1\13\3\1\1\2\1\14\1\15\1\16\1\17\1\0"+
    "\1\20\1\21\1\22\1\7\1\23\3\0\1\24\5\0"+
    "\1\25\2\0\14\6\1\0\3\6\1\0\1\6\2\26"+
    "\6\6\1\0\2\6\1\27\1\30\1\6\1\0\2\6"+
    "\1\0\1\6\1\31\1\0\1\32\1\31\1\6\1\32"+
    "\5\6\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\2\0\2\22\1\44\1\0\1\45\1\46"+
    "\1\0\1\47\1\50\1\6\1\47\1\50\1\0\1\6"+
    "\1\51\4\6\1\0\6\6\1\0\3\6\1\0\1\6"+
    "\1\52\1\53\4\6\1\0\2\6\1\54\2\55\1\6"+
    "\1\0\1\6\1\56\2\0\1\56\4\6\1\57\1\6"+
    "\1\0\1\6\1\0\1\22\1\0\1\6\2\60\1\61"+
    "\1\6\1\0\1\6\1\62\2\63\5\6\1\64\1\0"+
    "\3\6\1\0\1\6\1\65\1\66\1\0\1\6\1\67"+
    "\1\0\3\6\1\70\2\71\2\0\2\6\1\72\1\6"+
    "\1\73\2\74\1\0\2\6\2\75\1\76\1\6\1\0"+
    "\3\6\2\77\2\6\1\0\1\6\2\100\2\101\1\102"+
    "\1\103\1\104\1\105\1\104\1\105\1\0\2\6\2\106"+
    "\1\107\1\110\2\111\2\6\1\112\1\113\1\0\1\6"+
    "\2\114\1\6\1\115\1\116\1\0\1\6\1\117\2\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\152\0\237\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\65\0\u05cc\0\u0601"+
    "\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\65\0\65"+
    "\0\65\0\65\0\u0774\0\65\0\65\0\u07a9\0\u07de\0\65"+
    "\0\u0813\0\u0848\0\u01a8\0\65\0\u087d\0\u08b2\0\u08e7\0\u091c"+
    "\0\u0951\0\65\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f"+
    "\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37"+
    "\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\65\0\u0109"+
    "\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d"+
    "\0\u0f52\0\u0109\0\u0109\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b"+
    "\0\u1090\0\65\0\u10c5\0\u10fa\0\u0109\0\u112f\0\u1164\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\u12a2\0\u12d7\0\u130c"+
    "\0\65\0\u1341\0\u1341\0\u0848\0\65\0\u1376\0\65\0\65"+
    "\0\u13ab\0\u0109\0\u0109\0\u13e0\0\u1415\0\u0109\0\u144a\0\u147f"+
    "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627"+
    "\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u0109"+
    "\0\u0109\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d"+
    "\0\u0109\0\65\0\u0109\0\u1942\0\u1977\0\u19ac\0\65\0\u19e1"+
    "\0\u1a16\0\u0109\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u0109\0\u1b1f"+
    "\0\u1b54\0\u1b89\0\u1bbe\0\u12a2\0\u1bf3\0\u1c28\0\65\0\u0109"+
    "\0\u0109\0\u1c5d\0\u1c92\0\u1cc7\0\u0109\0\65\0\u0109\0\u1cfc"+
    "\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u0109\0\u1e05\0\u1e3a\0\u1e6f"+
    "\0\u1ea4\0\u1ed9\0\u1f0e\0\u0109\0\u0109\0\u1f43\0\u1f78\0\u0109"+
    "\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u0109\0\65\0\u0109\0\u2081"+
    "\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u0109\0\65\0\u0109"+
    "\0\u21bf\0\u21f4\0\u2229\0\65\0\u0109\0\u0109\0\u225e\0\u2293"+
    "\0\u22c8\0\u22fd\0\u2332\0\65\0\u0109\0\u2367\0\u239c\0\u23d1"+
    "\0\u2406\0\65\0\u0109\0\65\0\u0109\0\u0109\0\u0109\0\65"+
    "\0\65\0\u0109\0\u0109\0\u243b\0\u2470\0\u24a5\0\65\0\u0109"+
    "\0\u0109\0\u0109\0\65\0\u0109\0\u24da\0\u250f\0\u0109\0\u0109"+
    "\0\u2544\0\u2579\0\65\0\u0109\0\u25ae\0\u0109\0\u0109\0\u25e3"+
    "\0\u2618\0\u0109\0\65\0\u0109";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\11\1\2\1\12\2\2\1\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\7\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\7\1\32\1\33"+
    "\1\34\1\35\3\7\1\10\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\71\0\1\53\43\0\1\54\64\0\1\55\21\0"+
    "\1\56\2\0\1\57\36\0\1\57\1\60\23\0\3\7"+
    "\1\61\6\0\17\7\1\0\7\7\25\0\1\10\1\0"+
    "\1\62\34\0\1\10\24\0\3\7\7\0\17\7\1\0"+
    "\7\7\15\0\13\63\1\64\1\65\50\63\7\66\1\67"+
    "\1\66\1\70\2\66\1\71\2\66\1\72\1\66\17\67"+
    "\1\66\6\67\16\66\22\0\1\73\3\0\1\74\45\0"+
    "\3\7\1\61\6\0\1\7\1\75\3\7\1\76\11\7"+
    "\1\0\7\7\24\0\3\7\1\61\6\0\2\7\1\77"+
    "\14\7\1\0\1\7\1\100\5\7\24\0\3\7\1\61"+
    "\6\0\1\7\1\101\2\7\1\102\1\7\1\103\10\7"+
    "\1\0\7\7\24\0\3\7\1\61\6\0\10\7\1\104"+
    "\2\7\1\105\2\7\1\106\1\0\7\7\24\0\3\7"+
    "\1\61\6\0\13\7\1\107\2\7\1\110\1\0\7\7"+
    "\24\0\3\7\1\61\5\0\1\111\1\112\5\7\1\113"+
    "\10\7\1\0\7\7\24\0\3\7\1\61\6\0\1\7"+
    "\1\114\15\7\1\115\1\116\6\7\24\0\3\7\1\61"+
    "\5\0\1\117\1\120\16\7\1\0\1\7\1\121\2\7"+
    "\1\122\2\7\24\0\3\7\1\61\6\0\5\7\1\123"+
    "\4\7\1\124\4\7\1\0\7\7\24\0\3\7\1\61"+
    "\6\0\4\7\1\125\1\7\1\126\10\7\1\127\1\130"+
    "\6\7\24\0\3\7\1\61\6\0\5\7\1\131\4\7"+
    "\1\132\4\7\1\0\1\7\1\133\5\7\24\0\3\7"+
    "\1\61\6\0\10\7\1\134\6\7\1\135\1\136\6\7"+
    "\24\0\3\7\1\61\6\0\16\7\1\137\1\140\1\141"+
    "\6\7\35\0\2\142\16\0\2\143\1\144\31\0\3\7"+
    "\1\61\5\0\1\142\1\145\16\7\1\143\1\146\1\147"+
    "\5\7\24\0\3\7\1\61\6\0\5\7\1\150\2\7"+
    "\1\151\2\7\1\152\3\7\1\0\4\7\1\153\2\7"+
    "\24\0\3\7\1\61\6\0\13\7\1\154\3\7\1\0"+
    "\7\7\65\0\1\155\64\0\1\156\1\157\63\0\1\160"+
    "\64\0\1\161\64\0\1\162\64\0\1\163\64\0\1\164"+
    "\64\0\1\165\14\0\4\166\1\167\60\166\1\56\1\170"+
    "\1\171\62\56\10\0\1\57\36\0\1\57\24\0\1\172"+
    "\1\0\1\173\7\0\17\172\1\0\6\172\26\0\1\174"+
    "\36\0\1\174\15\0\1\63\2\0\12\63\2\0\46\63"+
    "\14\66\1\71\2\66\1\72\54\66\3\67\2\66\1\71"+
    "\2\66\1\175\1\66\17\67\1\66\7\67\24\66\3\67"+
    "\2\66\1\71\2\66\1\72\1\66\17\67\1\66\7\67"+
    "\16\66\2\0\12\66\2\0\46\66\23\0\1\176\1\0"+
    "\1\177\74\0\1\200\36\0\3\7\1\61\6\0\2\7"+
    "\1\201\1\7\1\202\12\7\1\0\7\7\24\0\3\7"+
    "\1\61\6\0\14\7\1\203\2\7\1\0\7\7\24\0"+
    "\3\7\1\61\5\0\1\204\1\205\16\7\1\0\7\7"+
    "\24\0\3\7\1\61\6\0\7\7\1\206\7\7\1\0"+
    "\7\7\24\0\3\7\1\61\6\0\11\7\1\207\5\7"+
    "\1\0\1\7\1\210\5\7\24\0\3\7\1\61\6\0"+
    "\12\7\1\211\4\7\1\0\7\7\24\0\3\7\1\61"+
    "\6\0\10\7\1\212\6\7\1\0\7\7\24\0\3\7"+
    "\1\61\5\0\1\213\1\214\16\7\1\0\7\7\24\0"+
    "\3\7\1\61\6\0\5\7\1\215\11\7\1\0\1\7"+
    "\1\216\5\7\24\0\3\7\1\61\6\0\13\7\1\217"+
    "\3\7\1\0\7\7\24\0\2\7\1\220\1\61\6\0"+
    "\17\7\1\0\7\7\24\0\3\7\1\61\6\0\1\7"+
    "\1\221\15\7\1\0\7\7\55\0\2\222\32\0\3\7"+
    "\1\61\6\0\17\7\1\222\1\223\6\7\24\0\3\7"+
    "\1\61\6\0\7\7\1\224\7\7\1\0\7\7\24\0"+
    "\3\7\1\61\6\0\2\7\1\225\14\7\1\0\7\7"+
    "\35\0\2\226\52\0\3\7\1\61\5\0\1\226\1\227"+
    "\16\7\1\0\7\7\24\0\3\7\1\61\6\0\7\7"+
    "\1\230\7\7\1\0\7\7\24\0\3\7\1\61\6\0"+
    "\17\7\1\0\3\7\1\231\3\7\24\0\3\7\1\61"+
    "\6\0\2\7\1\232\14\7\1\0\7\7\24\0\3\7"+
    "\1\61\6\0\13\7\1\233\3\7\1\0\7\7\24\0"+
    "\3\7\1\61\6\0\12\7\1\234\4\7\1\0\7\7"+
    "\24\0\3\7\1\61\6\0\10\7\1\235\6\7\1\0"+
    "\7\7\61\0\1\236\27\0\3\7\1\61\6\0\17\7"+
    "\1\0\3\7\1\237\3\7\24\0\3\7\1\61\6\0"+
    "\4\7\1\240\12\7\1\0\7\7\24\0\3\7\1\61"+
    "\6\0\17\7\1\0\5\7\1\241\1\7\57\0\1\242"+
    "\31\0\3\7\1\61\6\0\17\7\1\0\1\7\1\243"+
    "\5\7\24\0\3\7\1\61\6\0\1\7\1\244\15\7"+
    "\1\0\7\7\42\0\1\245\46\0\3\7\1\61\6\0"+
    "\4\7\1\246\12\7\1\0\7\7\47\0\1\247\52\0"+
    "\2\250\20\0\1\251\31\0\3\7\1\61\6\0\11\7"+
    "\1\252\5\7\1\0\7\7\24\0\3\7\1\61\5\0"+
    "\1\250\1\253\16\7\1\0\1\7\1\254\5\7\24\0"+
    "\3\7\1\61\6\0\2\7\1\255\14\7\1\0\7\7"+
    "\24\0\3\7\1\61\6\0\4\7\1\256\12\7\1\0"+
    "\7\7\24\0\3\7\1\61\6\0\4\7\1\257\12\7"+
    "\1\0\7\7\24\0\3\7\1\61\6\0\2\7\1\260"+
    "\14\7\1\0\7\7\24\0\3\7\1\61\6\0\17\7"+
    "\1\261\1\262\6\7\15\0\4\166\1\263\63\166\1\264"+
    "\1\263\60\166\2\0\1\171\71\0\3\172\7\0\17\172"+
    "\1\0\7\172\37\0\1\265\51\0\3\7\1\61\6\0"+
    "\1\7\1\266\15\7\1\0\7\7\37\0\1\267\51\0"+
    "\3\7\1\61\6\0\1\7\1\270\15\7\1\0\7\7"+
    "\24\0\3\7\1\61\6\0\4\7\1\271\12\7\1\0"+
    "\7\7\24\0\3\7\1\61\6\0\17\7\1\0\3\7"+
    "\1\272\3\7\24\0\3\7\1\61\6\0\17\7\1\273"+
    "\1\274\6\7\24\0\3\7\1\61\6\0\7\7\1\275"+
    "\7\7\1\0\7\7\37\0\1\276\51\0\3\7\1\61"+
    "\6\0\1\7\1\277\15\7\1\0\7\7\24\0\3\7"+
    "\1\61\6\0\17\7\1\0\1\7\1\300\5\7\24\0"+
    "\3\7\1\61\6\0\3\7\1\301\13\7\1\0\7\7"+
    "\24\0\3\7\1\61\6\0\13\7\1\302\3\7\1\0"+
    "\7\7\24\0\3\7\1\61\6\0\3\7\1\303\3\7"+
    "\1\304\7\7\1\0\7\7\24\0\3\7\1\61\6\0"+
    "\17\7\1\0\1\7\1\305\5\7\57\0\1\306\31\0"+
    "\3\7\1\61\6\0\17\7\1\0\1\7\1\307\5\7"+
    "\24\0\3\7\1\61\6\0\10\7\1\310\6\7\1\0"+
    "\7\7\24\0\3\7\1\61\6\0\1\7\1\311\15\7"+
    "\1\0\7\7\42\0\1\312\46\0\3\7\1\61\6\0"+
    "\4\7\1\313\12\7\1\0\7\7\24\0\3\7\1\61"+
    "\6\0\2\7\1\314\14\7\1\0\7\7\24\0\3\7"+
    "\1\61\6\0\14\7\1\315\2\7\1\0\7\7\24\0"+
    "\3\7\1\61\6\0\17\7\1\316\1\317\6\7\24\0"+
    "\3\7\1\61\6\0\7\7\1\320\7\7\1\0\7\7"+
    "\54\0\1\321\34\0\3\7\1\61\6\0\16\7\1\322"+
    "\1\0\7\7\24\0\3\7\1\61\6\0\1\7\1\323"+
    "\15\7\1\0\7\7\24\0\3\7\1\61\6\0\12\7"+
    "\1\324\4\7\1\0\1\7\1\325\5\7\54\0\1\326"+
    "\34\0\3\7\1\61\6\0\16\7\1\327\1\0\7\7"+
    "\42\0\1\330\61\0\1\331\51\0\3\7\1\61\6\0"+
    "\4\7\1\332\12\7\1\0\7\7\24\0\3\7\1\61"+
    "\6\0\1\7\1\333\15\7\1\0\7\7\24\0\3\7"+
    "\1\61\6\0\2\7\1\334\14\7\1\0\7\7\24\0"+
    "\3\7\1\61\6\0\5\7\1\335\11\7\1\0\7\7"+
    "\24\0\3\7\1\61\6\0\17\7\1\0\6\7\1\336"+
    "\57\0\1\337\31\0\3\7\1\61\6\0\17\7\1\0"+
    "\1\7\1\340\5\7\15\0\3\166\1\171\1\263\60\166"+
    "\24\0\1\341\47\0\3\7\1\61\6\0\3\7\1\342"+
    "\13\7\1\0\7\7\24\0\3\7\1\61\6\0\4\7"+
    "\1\343\12\7\1\0\7\7\52\0\1\344\36\0\3\7"+
    "\1\61\6\0\14\7\1\345\2\7\1\0\7\7\24\0"+
    "\3\7\1\61\6\0\4\7\1\346\12\7\1\0\7\7"+
    "\24\0\3\7\1\61\6\0\10\7\1\347\6\7\1\0"+
    "\7\7\24\0\3\7\1\61\5\0\1\350\1\351\16\7"+
    "\1\0\7\7\24\0\3\7\1\61\6\0\16\7\1\352"+
    "\1\0\7\7\24\0\3\7\1\61\6\0\10\7\1\353"+
    "\6\7\1\0\7\7\61\0\1\354\27\0\3\7\1\61"+
    "\6\0\17\7\1\0\3\7\1\355\3\7\24\0\3\7"+
    "\1\61\6\0\4\7\1\356\12\7\1\0\7\7\24\0"+
    "\3\7\1\61\6\0\4\7\1\357\12\7\1\0\7\7"+
    "\55\0\2\360\32\0\3\7\1\61\6\0\17\7\1\360"+
    "\1\361\6\7\52\0\1\362\36\0\3\7\1\61\6\0"+
    "\14\7\1\363\2\7\1\0\7\7\42\0\1\364\46\0"+
    "\3\7\1\61\6\0\4\7\1\365\12\7\1\0\7\7"+
    "\24\0\3\7\1\61\6\0\12\7\1\366\4\7\1\0"+
    "\7\7\24\0\3\7\1\61\6\0\1\7\1\367\15\7"+
    "\1\0\7\7\50\0\1\370\64\0\1\371\40\0\3\7"+
    "\1\61\6\0\12\7\1\372\4\7\1\0\7\7\24\0"+
    "\3\7\1\61\6\0\12\7\1\373\4\7\1\0\7\7"+
    "\24\0\3\7\1\61\6\0\17\7\1\374\1\375\6\7"+
    "\24\0\3\7\1\61\6\0\12\7\1\376\4\7\1\0"+
    "\7\7\42\0\1\377\46\0\3\7\1\61\6\0\4\7"+
    "\1\u0100\12\7\1\0\7\7\24\0\3\7\1\61\6\0"+
    "\16\7\1\u0101\1\0\7\7\24\0\3\7\1\61\6\0"+
    "\4\7\1\u0102\12\7\1\0\7\7\37\0\1\u0103\51\0"+
    "\3\7\1\61\6\0\1\7\1\u0104\15\7\1\0\7\7"+
    "\24\0\3\7\1\61\6\0\10\7\1\u0105\6\7\1\0"+
    "\7\7\24\0\3\7\1\61\6\0\4\7\1\u0106\12\7"+
    "\1\0\7\7\24\0\3\7\1\61\6\0\1\7\1\u0107"+
    "\15\7\1\0\7\7\24\0\3\7\1\61\6\0\1\7"+
    "\1\u0108\15\7\1\0\7\7\57\0\1\u0109\31\0\3\7"+
    "\1\61\6\0\17\7\1\0\1\7\1\u010a\5\7\47\0"+
    "\1\u010b\41\0\3\7\1\61\6\0\11\7\1\u010c\5\7"+
    "\1\0\7\7\24\0\3\7\1\61\6\0\10\7\1\u010d"+
    "\6\7\1\0\7\7\24\0\3\7\1\61\6\0\12\7"+
    "\1\u010e\4\7\1\0\7\7\24\0\3\7\1\61\6\0"+
    "\1\7\1\u010f\15\7\1\0\7\7\41\0\1\u0110\47\0"+
    "\3\7\1\61\6\0\3\7\1\u0111\13\7\1\0\7\7"+
    "\24\0\3\7\1\61\6\0\2\7\1\u0112\14\7\1\0"+
    "\7\7\42\0\1\u0113\46\0\3\7\1\61\6\0\4\7"+
    "\1\u0114\12\7\1\0\7\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9805];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\32\1\1\11\10\1\4\11\1\0\2\11"+
    "\2\1\1\11\3\0\1\11\5\0\1\11\2\0\14\1"+
    "\1\0\3\1\1\0\1\1\1\11\7\1\1\0\5\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\0\11\1\11\11"+
    "\2\0\1\1\1\11\1\1\1\0\1\1\1\11\1\0"+
    "\2\11\3\1\1\0\6\1\1\0\6\1\1\0\3\1"+
    "\1\0\7\1\1\0\3\1\1\11\2\1\1\0\1\1"+
    "\1\11\2\0\7\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\3\1\1\0\2\1\1\11\7\1\1\0"+
    "\3\1\1\0\3\1\1\0\2\1\1\0\4\1\1\11"+
    "\1\1\2\0\5\1\1\11\1\1\1\0\2\1\1\11"+
    "\3\1\1\0\3\1\1\11\3\1\1\0\1\1\1\11"+
    "\1\1\1\11\3\1\2\11\2\1\1\0\2\1\1\11"+
    "\3\1\1\11\5\1\1\0\1\1\1\11\4\1\1\0"+
    "\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	// Initialize any necessary variables here
	
	// A table I will create to store Lexical Errors found | import library for LinkedList
	public LinkedList<TError> TableLE = new LinkedList<TError>();
	public LinkedList<String> StmtCopy = new LinkedList<String>(); // DELETE THIS, will be replaced by PrettyfiedStatement
	
	public LinkedList<PrettyStatement> PrettyfiedStatement = new LinkedList<PrettyStatement>();
	
		
	// Will need to create a structure to save the lexeme and its corresponding category code.
	public void prettyfier (String lexeme, int category) {
		
		PrettyStatement ps = new PrettyStatement(lexeme,category);
		PrettyfiedStatement.add(ps);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JFlex_Rules_SQL(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("\n### Lexical error (Illegal element) ### - '" + yytext() + "' line: " + yyline + ", column: " + yychar + "\n"); 
				  	  TError errors_found = new TError(yytext(),yyline,yycolumn,"Lexical Error","Unrecognized symbol.");
				  	  TableLE.add(errors_found); 
				  	  prettyfier(yytext(), Categories.ERROR);
					  return new Symbol(sym.ILLEGAL_CHAR, yyline, yycolumn, yytext());
            }
          case 81: break;
          case 2: 
            { System.out.println("Recognized space: " + yytext()); prettyfier(yytext(), Categories.NOTHING );
            }
          case 82: break;
          case 3: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDE, yyline+1, yycolumn+1, yytext());
            }
          case 83: break;
          case 4: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._STAR, yyline+1, yycolumn+1, yytext());
            }
          case 84: break;
          case 5: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUS, yyline+1, yycolumn+1, yytext());
            }
          case 85: break;
          case 6: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.IDENTIFIER, yyline+1, yycolumn+1, yytext());
            }
          case 86: break;
          case 7: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.INTEGER, yyline+1, yycolumn+1, yytext());
            }
          case 87: break;
          case 8: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._EQU, yyline+1, yycolumn+1, yytext());
            }
          case 88: break;
          case 9: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GT, yyline+1, yycolumn+1, yytext());
            }
          case 89: break;
          case 10: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LT, yyline+1, yycolumn+1, yytext());
            }
          case 90: break;
          case 11: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUS, yyline+1, yycolumn+1, yytext());
            }
          case 91: break;
          case 12: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OPENPAR, yyline+1, yycolumn+1, yytext());
            }
          case 92: break;
          case 13: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._CLOSEPAR, yyline+1, yycolumn+1, yytext());
            }
          case 93: break;
          case 14: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._SEMCOL2, yyline+1, yycolumn+1, yytext());
            }
          case 94: break;
          case 15: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._COMMA, yyline+1, yycolumn+1, yytext());
            }
          case 95: break;
          case 16: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDEEQ, yyline+1, yycolumn+1, yytext());
            }
          case 96: break;
          case 17: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._TIMESEQ, yyline+1, yycolumn+1, yytext());
            }
          case 97: break;
          case 18: 
            { System.out.println("Recognized comment: " + yytext()); prettyfier(yytext(), Categories.COMMENT );
            }
          case 98: break;
          case 19: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 99: break;
          case 20: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.LITERAL_STRING); return new Symbol(sym.LITERAL_STRING, yyline+1, yycolumn+1, yytext());
            }
          case 100: break;
          case 21: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QCOLALIAS, yyline+1, yycolumn+1, yytext());
            }
          case 101: break;
          case 22: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AS, yyline+1, yycolumn+1, yytext());
            }
          case 102: break;
          case 23: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._OR, yyline+1, yycolumn+1, yytext());
            }
          case 103: break;
          case 24: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ON, yyline+1, yycolumn+1, yytext());
            }
          case 104: break;
          case 25: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IS, yyline+1, yycolumn+1, yytext());
            }
          case 105: break;
          case 26: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IN, yyline+1, yycolumn+1, yytext());
            }
          case 106: break;
          case 27: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GET, yyline+1, yycolumn+1, yytext());
            }
          case 107: break;
          case 28: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LET, yyline+1, yycolumn+1, yytext());
            }
          case 108: break;
          case 29: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF, yyline+1, yycolumn+1, yytext());
            }
          case 109: break;
          case 30: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF2, yyline+1, yycolumn+1, yytext());
            }
          case 110: break;
          case 31: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 111: break;
          case 32: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MODEQ, yyline+1, yycolumn+1, yytext());
            }
          case 112: break;
          case 33: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._ANDEQ, yyline+1, yycolumn+1, yytext());
            }
          case 113: break;
          case 34: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._POWEQ, yyline+1, yycolumn+1, yytext());
            }
          case 114: break;
          case 35: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OREQ, yyline+1, yycolumn+1, yytext());
            }
          case 115: break;
          case 36: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.TABDOTCOL, yyline+1, yycolumn+1, yytext());
            }
          case 116: break;
          case 37: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.REAL, yyline+1, yycolumn+1, yytext());
            }
          case 117: break;
          case 38: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QTABLENAME, yyline+1, yycolumn+1, yytext());
            }
          case 118: break;
          case 39: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SET, yyline+1, yycolumn+1, yytext());
            }
          case 119: break;
          case 40: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SUM, yyline+1, yycolumn+1, yytext());
            }
          case 120: break;
          case 41: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.END, yyline+1, yycolumn+1, yytext());
            }
          case 121: break;
          case 42: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._AND, yyline+1, yycolumn+1, yytext());
            }
          case 122: break;
          case 43: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AVG, yyline+1, yycolumn+1, yytext());
            }
          case 123: break;
          case 44: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.MAX, yyline+1, yycolumn+1, yytext());
            }
          case 124: break;
          case 45: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.MIN, yyline+1, yycolumn+1, yytext());
            }
          case 125: break;
          case 46: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IIF, yyline+1, yycolumn+1, yytext());
            }
          case 126: break;
          case 47: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NOT, yyline+1, yycolumn+1, yytext());
            }
          case 127: break;
          case 48: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ELSE, yyline+1, yycolumn+1, yytext());
            }
          case 128: break;
          case 49: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LEFT, yyline+1, yycolumn+1, yytext());
            }
          case 129: break;
          case 50: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LPAD, yyline+1, yycolumn+1, yytext());
            }
          case 130: break;
          case 51: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CASE, yyline+1, yycolumn+1, yytext());
            }
          case 131: break;
          case 52: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.THEN, yyline+1, yycolumn+1, yytext());
            }
          case 132: break;
          case 53: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FULL, yyline+1, yycolumn+1, yytext());
            }
          case 133: break;
          case 54: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FROM, yyline+1, yycolumn+1, yytext());
            }
          case 134: break;
          case 55: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RPAD, yyline+1, yycolumn+1, yytext());
            }
          case 135: break;
          case 56: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHEN, yyline+1, yycolumn+1, yytext());
            }
          case 136: break;
          case 57: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WITH, yyline+1, yycolumn+1, yytext());
            }
          case 137: break;
          case 58: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NULL, yyline+1, yycolumn+1, yytext());
            }
          case 138: break;
          case 59: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NVL2, yyline+1, yycolumn+1, yytext());
            }
          case 139: break;
          case 60: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.JOIN, yyline+1, yycolumn+1, yytext());
            }
          case 140: break;
          case 61: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LTRIM, yyline+1, yycolumn+1, yytext());
            }
          case 141: break;
          case 62: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.COUNT, yyline+1, yycolumn+1, yytext());
            }
          case 142: break;
          case 63: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.USING, yyline+1, yycolumn+1, yytext());
            }
          case 143: break;
          case 64: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RTRIM, yyline+1, yycolumn+1, yytext());
            }
          case 144: break;
          case 65: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RIGHT, yyline+1, yycolumn+1, yytext());
            }
          case 145: break;
          case 66: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.OUTER, yyline+1, yycolumn+1, yytext());
            }
          case 146: break;
          case 67: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHERE, yyline+1, yycolumn+1, yytext());
            }
          case 147: break;
          case 68: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INSTR, yyline+1, yycolumn+1, yytext());
            }
          case 148: break;
          case 69: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INNER, yyline+1, yycolumn+1, yytext());
            }
          case 149: break;
          case 70: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SELECT, yyline+1, yycolumn+1, yytext());
            }
          case 150: break;
          case 71: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LENGTH, yyline+1, yycolumn+1, yytext());
            }
          case 151: break;
          case 72: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CONCAT, yyline+1, yycolumn+1, yytext());
            }
          case 152: break;
          case 73: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CHOOSE, yyline+1, yycolumn+1, yytext());
            }
          case 153: break;
          case 74: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.UPDATE, yyline+1, yycolumn+1, yytext());
            }
          case 154: break;
          case 75: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DELETE, yyline+1, yycolumn+1, yytext());
            }
          case 155: break;
          case 76: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NULLIF, yyline+1, yycolumn+1, yytext());
            }
          case 156: break;
          case 77: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TO_CHAR, yyline+1, yycolumn+1, yytext());
            }
          case 157: break;
          case 78: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TO_DATE, yyline+1, yycolumn+1, yytext());
            }
          case 158: break;
          case 79: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NATURAL, yyline+1, yycolumn+1, yytext());
            }
          case 159: break;
          case 80: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DISTINCT, yyline+1, yycolumn+1, yytext());
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
