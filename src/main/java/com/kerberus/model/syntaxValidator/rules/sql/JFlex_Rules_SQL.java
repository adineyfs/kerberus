/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */

package com.kerberus.model.syntaxValidator.rules.sql;


import java_cup.runtime.*; 		// Required to send lexemas to Cup
import java.util.LinkedList; 	// Required for LinkedList
import com.kerberus.model.syntaxValidator.rules.util.*;
import com.kerberus.model.syntaxValidator.rules.sql.sym;

/**
 * This class is a simple example lexer.
 */


public class JFlex_Rules_SQL implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\2\1\15\1\16\1\1\22\0\1\6\1\55\1\17"+
    "\2\0\1\57\1\60\1\13\1\63\1\64\1\4\1\56\1\66\1\5"+
    "\1\12\1\3\2\10\1\51\7\10\1\0\1\65\1\54\1\52\1\53"+
    "\2\0\1\31\1\44\1\24\1\30\1\22\1\32\1\46\1\37\1\41"+
    "\1\45\1\7\1\23\1\35\1\42\1\34\1\27\1\7\1\33\1\21"+
    "\1\25\1\26\1\47\1\36\1\50\1\43\1\7\1\0\1\14\1\0"+
    "\1\61\1\11\1\0\1\31\1\44\1\24\1\30\1\22\1\32\1\46"+
    "\1\37\1\41\1\45\1\7\1\23\1\35\1\42\1\34\1\27\1\7"+
    "\1\33\1\21\1\25\1\26\1\47\1\36\1\50\1\43\1\7\1\0"+
    "\1\62\10\0\1\15\252\0\2\40\115\0\1\20\u1ea8\0\1\15\1\15"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\4\1\15\6\1\1\3\6\1\10\1\11\1\12\1\1"+
    "\1\13\3\1\1\2\1\14\1\15\1\16\1\17\1\0"+
    "\1\20\1\21\1\22\1\7\1\23\3\0\1\24\5\0"+
    "\1\25\3\0\20\6\1\0\4\6\1\0\1\6\2\26"+
    "\7\6\1\0\2\6\1\27\1\30\1\6\1\0\2\6"+
    "\1\0\1\6\1\31\1\0\1\32\1\31\1\6\1\32"+
    "\5\6\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\2\0\2\22\1\44\1\0\1\45\1\46"+
    "\1\0\1\47\1\50\1\0\1\6\1\47\1\50\1\6"+
<<<<<<< HEAD
    "\1\0\1\6\1\51\5\6\1\0\4\6\1\0\3\6"+
    "\1\0\4\6\1\0\1\6\1\52\1\53\5\6\1\0"+
<<<<<<< HEAD
    "\2\6\1\54\2\55\1\6\1\0\1\6\1\56\2\0"+
    "\1\56\4\6\1\57\1\60\1\0\1\6\1\0\1\22"+
    "\2\0\2\6\2\61\1\62\1\6\1\0\1\6\1\63"+
    "\1\6\2\64\3\6\2\65\3\6\1\66\1\0\4\6"+
    "\1\0\1\6\1\67\1\70\1\6\1\0\1\6\1\71"+
    "\1\0\3\6\1\72\2\73\2\0\2\6\1\74\1\6"+
    "\1\75\2\76\2\0\3\6\2\77\1\100\1\101\1\6"+
    "\1\0\2\6\1\0\2\6\2\102\1\103\2\6\1\0"+
    "\2\6\2\104\2\105\1\106\1\107\1\110\1\111\1\110"+
    "\1\111\1\0\2\6\1\112\1\0\1\112\1\6\1\113"+
    "\1\114\2\115\1\6\1\0\2\6\1\116\1\117\1\0"+
    "\2\6\2\120\1\6\2\121\1\122\1\0\1\6\1\123"+
    "\1\0\1\6\1\124\1\125\1\0\1\6\2\126\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\2\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[323];
=======
    "\2\6\1\54\2\55\1\6\1\0\1\6\1\0\1\56"+
    "\2\0\1\6\1\56\4\6\1\57\1\60\1\0\1\6"+
    "\1\0\1\22\2\0\2\6\2\61\1\62\1\6\1\0"+
    "\1\6\1\63\1\6\2\64\3\6\2\65\2\6\1\66"+
    "\1\0\4\6\1\0\1\6\1\67\1\70\1\6\1\0"+
    "\1\6\1\71\1\0\3\6\1\72\2\73\3\0\3\6"+
    "\1\74\1\6\1\75\2\76\2\0\3\6\2\77\1\100"+
    "\1\101\1\6\1\0\3\6\2\102\1\103\2\6\1\0"+
    "\2\6\2\104\2\105\1\106\1\107\1\0\1\110\1\111"+
    "\1\6\1\110\1\111\1\0\2\6\1\112\1\0\1\112"+
    "\1\6\1\113\1\114\2\115\2\6\1\116\1\117\1\0"+
    "\2\6\2\120\2\121\1\6\2\122\1\123\1\124\1\0"+
    "\1\6\1\125\1\126\2\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[314];
>>>>>>> release-0.3_card_96
=======
    "\1\0\1\6\1\51\5\6\1\0\5\6\1\0\3\6"+
    "\1\0\5\6\1\0\1\6\1\52\1\53\5\6\1\0"+
    "\2\6\1\54\2\55\1\6\1\0\1\6\1\56\2\0"+
    "\1\56\4\6\1\57\1\60\1\0\1\6\1\0\1\22"+
    "\2\0\2\6\2\61\1\62\1\6\1\0\1\6\1\63"+
    "\1\6\2\64\4\6\2\65\2\6\1\66\1\0\4\6"+
    "\1\67\1\0\1\6\1\70\1\71\1\6\1\0\1\6"+
    "\1\72\1\0\3\6\1\73\2\74\2\0\2\6\1\75"+
    "\1\6\1\76\2\77\2\0\3\6\2\100\1\101\1\102"+
    "\1\6\1\0\1\6\1\103\2\6\2\104\1\105\2\6"+
    "\1\0\2\6\2\106\2\107\1\110\1\111\1\112\1\113"+
    "\1\112\1\113\1\0\2\6\1\114\1\0\1\114\1\6"+
    "\1\115\1\116\2\117\2\6\1\120\1\121\1\0\2\6"+
    "\2\122\1\6\2\123\1\124\1\125\1\0\1\6\1\126"+
    "\1\127\2\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
>>>>>>> release-0.3_card_105
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
<<<<<<< HEAD
    "\0\0\0\66\0\66\0\154\0\242\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\66\0\u05e8\0\u061e"+
    "\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\66\0\66"+
    "\0\66\0\66\0\u0798\0\66\0\66\0\u07ce\0\u0804\0\66"+
    "\0\u083a\0\u0870\0\u01b0\0\66\0\u08a6\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\66\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2"+
    "\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0e8e\0\66\0\u010e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u010e\0\u010e"+
<<<<<<< HEAD
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\66\0\u1224"+
    "\0\u125a\0\u010e\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e"+
    "\0\u13d4\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\u140a\0\u1440\0\u1476\0\66\0\u14ac\0\u14ac"+
    "\0\u0870\0\66\0\u14e2\0\66\0\66\0\u1518\0\u154e\0\u010e"+
    "\0\u010e\0\u1584\0\u15ba\0\u15f0\0\u010e\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\u010e\0\u010e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u010e\0\66\0\u010e\0\u1c44"+
    "\0\u1c7a\0\u1cb0\0\66\0\u1ce6\0\u1d1c\0\u010e\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u010e\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u140a"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\66\0\u010e\0\u010e\0\u1fda"+
    "\0\u2010\0\u2046\0\u010e\0\u207c\0\66\0\u010e\0\u20b2\0\u20e8"+
    "\0\u211e\0\66\0\u010e\0\u2154\0\u218a\0\u21c0\0\u010e\0\u21f6"+
    "\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u010e\0\u010e"+
    "\0\u2370\0\u23a6\0\u23dc\0\u010e\0\u2412\0\u2448\0\u247e\0\u24b4"+
    "\0\u010e\0\66\0\u010e\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2"+
    "\0\u25f8\0\u010e\0\66\0\u010e\0\u262e\0\u2664\0\u269a\0\u26d0"+
    "\0\u2706\0\66\0\u010e\0\u010e\0\u010e\0\u273c\0\u2772\0\u27a8"+
    "\0\u27de\0\u2814\0\u284a\0\u2880\0\66\0\u010e\0\u010e\0\u28b6"+
    "\0\u28ec\0\u2922\0\u2958\0\u298e\0\66\0\u010e\0\66\0\u010e"+
    "\0\u010e\0\u010e\0\66\0\66\0\u010e\0\u010e\0\u29c4\0\u29fa"+
    "\0\u2a30\0\66\0\u2a66\0\u010e\0\u2a9c\0\u010e\0\u010e\0\66"+
    "\0\u010e\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u010e\0\u010e\0\u2baa"+
    "\0\u2be0\0\u2c16\0\66\0\u010e\0\u2c4c\0\66\0\u010e\0\u010e"+
    "\0\u2c82\0\u2cb8\0\u010e\0\u2cee\0\u2d24\0\u010e\0\u010e\0\u2d5a"+
    "\0\u2d90\0\66\0\u010e\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e"+
    "\0\u2ed4\0\66\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[323];
=======
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\u1476\0\u14ac\0\u14e2\0\66\0\u1518\0\u1518"+
    "\0\u0870\0\66\0\u154e\0\66\0\66\0\u1584\0\u15ba\0\u010e"+
    "\0\u010e\0\u15f0\0\u1626\0\u165c\0\u010e\0\u1692\0\u16c8\0\u16fe"+
    "\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae"+
    "\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e"+
    "\0\u1a94\0\u1aca\0\u010e\0\u010e\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u010e\0\66\0\u010e\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\u1d52\0\66\0\u1d88\0\u1dbe\0\u1df4\0\u010e"+
    "\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u010e\0\u1f02\0\u1f38\0\u1f6e"+
    "\0\u1fa4\0\u1476\0\u1fda\0\u2010\0\u2046\0\u207c\0\66\0\u010e"+
    "\0\u010e\0\u20b2\0\u20e8\0\u211e\0\u010e\0\u2154\0\66\0\u010e"+
    "\0\u218a\0\u21c0\0\u21f6\0\66\0\u010e\0\u222c\0\u2262\0\u010e"+
    "\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u010e"+
    "\0\u010e\0\u2412\0\u2448\0\u247e\0\u010e\0\u24b4\0\u24ea\0\u2520"+
    "\0\u2556\0\u010e\0\66\0\u010e\0\u258c\0\u25c2\0\u25f8\0\u262e"+
    "\0\u2664\0\u269a\0\u26d0\0\u2706\0\u010e\0\66\0\u010e\0\u273c"+
    "\0\u2772\0\u27a8\0\u27de\0\u2814\0\66\0\u010e\0\u010e\0\u010e"+
    "\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\66\0\u010e\0\u010e"+
    "\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\66\0\u010e\0\66"+
    "\0\u010e\0\u010e\0\u010e\0\u2a66\0\66\0\66\0\u2a9c\0\u010e"+
    "\0\u010e\0\u2ad2\0\u2b08\0\u2b3e\0\66\0\u2b74\0\u010e\0\u2baa"+
    "\0\u010e\0\u010e\0\66\0\u010e\0\u2be0\0\u2c16\0\u010e\0\u010e"+
    "\0\u2c4c\0\u2c82\0\u2cb8\0\66\0\u010e\0\66\0\u010e\0\u2cee"+
    "\0\66\0\u010e\0\u010e\0\u010e\0\u2d24\0\u2d5a\0\u010e\0\u010e"+
    "\0\66\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[314];
>>>>>>> release-0.3_card_96
=======
    "\0\0\0\67\0\67\0\156\0\245\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\67\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\67\0\67"+
    "\0\67\0\67\0\u07bc\0\67\0\67\0\u07f3\0\u082a\0\67"+
    "\0\u0861\0\u0898\0\u01b8\0\67\0\u08cf\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\67\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\67\0\u0113\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u0113\0\u0113\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1"+
    "\0\67\0\u12e8\0\u131f\0\u0113\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\u14d7\0\u150e\0\u1545\0\67"+
    "\0\u157c\0\u157c\0\u0898\0\67\0\u15b3\0\67\0\67\0\u15ea"+
    "\0\u1621\0\u0113\0\u0113\0\u1658\0\u168f\0\u16c6\0\u0113\0\u16fd"+
    "\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5"+
    "\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d"+
    "\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u0113\0\u0113"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f"+
    "\0\u0113\0\67\0\u0113\0\u1da6\0\u1ddd\0\u1e14\0\67\0\u1e4b"+
    "\0\u1e82\0\u0113\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u0113\0\u1f95"+
    "\0\u1fcc\0\u2003\0\u203a\0\u14d7\0\u2071\0\u20a8\0\u20df\0\u2116"+
    "\0\67\0\u0113\0\u0113\0\u214d\0\u2184\0\u21bb\0\u0113\0\u21f2"+
    "\0\67\0\u0113\0\u2229\0\u2260\0\u2297\0\u22ce\0\67\0\u0113"+
    "\0\u2305\0\u233c\0\u0113\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f"+
    "\0\u0113\0\u2486\0\u24bd\0\u0113\0\u0113\0\u24f4\0\u252b\0\u2562"+
    "\0\u0113\0\u2599\0\u25d0\0\u2607\0\u263e\0\u0113\0\67\0\u0113"+
    "\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u0113\0\67"+
    "\0\u0113\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\67\0\u0113"+
    "\0\u0113\0\u0113\0\u28d2\0\u2909\0\u2940\0\u0113\0\u2977\0\u29ae"+
    "\0\67\0\u0113\0\u0113\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1"+
    "\0\67\0\u0113\0\67\0\u0113\0\u0113\0\u0113\0\67\0\67"+
    "\0\u0113\0\u0113\0\u2af8\0\u2b2f\0\u2b66\0\67\0\u2b9d\0\u0113"+
    "\0\u2bd4\0\u0113\0\u0113\0\67\0\u0113\0\u2c0b\0\u2c42\0\u0113"+
    "\0\u0113\0\u2c79\0\u2cb0\0\u2ce7\0\67\0\u0113\0\u2d1e\0\67"+
    "\0\u0113\0\u0113\0\u0113\0\u2d55\0\u2d8c\0\u0113\0\u0113\0\67"+
    "\0\u0113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
>>>>>>> release-0.3_card_105
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\11\1\2\1\12\2\2\1\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\7\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\7\1\32\1\33"+
    "\1\34\2\7\1\35\3\7\1\10\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\73\0\1\53\45\0\1\54\66\0\1\55"+
    "\21\0\1\56\2\0\1\57\40\0\1\57\1\60\23\0"+
    "\3\7\1\61\6\0\17\7\1\0\11\7\25\0\1\10"+
    "\1\0\1\62\36\0\1\10\24\0\3\7\7\0\17\7"+
    "\1\0\11\7\15\0\13\63\1\64\1\65\52\63\7\66"+
    "\1\67\1\66\1\70\2\66\1\71\2\66\1\72\1\66"+
    "\17\67\1\66\10\67\16\66\22\0\1\73\3\0\1\74"+
    "\14\0\1\75\32\0\3\7\1\61\6\0\1\7\1\76"+
    "\3\7\1\77\11\7\1\0\2\7\1\100\6\7\24\0"+
    "\3\7\1\61\6\0\2\7\1\101\14\7\1\0\1\7"+
    "\1\102\7\7\24\0\3\7\1\61\6\0\1\7\1\103"+
    "\2\7\1\104\1\7\1\105\4\7\1\106\3\7\1\0"+
<<<<<<< HEAD
    "\10\7\24\0\3\7\1\61\6\0\10\7\1\107\2\7"+
    "\1\110\2\7\1\111\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\12\7\1\112\1\113\2\7\1\114\1\0\10\7"+
    "\24\0\3\7\1\61\5\0\1\115\1\116\5\7\1\117"+
    "\10\7\1\0\10\7\24\0\3\7\1\61\6\0\1\7"+
    "\1\120\15\7\1\121\1\122\7\7\24\0\3\7\1\61"+
    "\5\0\1\123\1\124\16\7\1\0\1\7\1\125\3\7"+
    "\1\126\2\7\24\0\3\7\1\61\6\0\5\7\1\127"+
    "\4\7\1\130\4\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\1\7\1\131\2\7\1\132\1\7\1\133\10\7"+
    "\1\134\1\135\7\7\24\0\3\7\1\61\6\0\5\7"+
    "\1\136\4\7\1\137\4\7\1\0\1\7\1\140\6\7"+
    "\24\0\3\7\1\61\6\0\10\7\1\141\6\7\1\142"+
    "\1\143\7\7\24\0\3\7\1\61\6\0\16\7\1\144"+
    "\1\145\1\146\7\7\35\0\2\147\16\0\2\150\1\151"+
    "\32\0\3\7\1\61\5\0\1\147\1\152\16\7\1\150"+
    "\1\153\1\154\6\7\24\0\3\7\1\61\6\0\5\7"+
    "\1\155\2\7\1\156\2\7\1\157\3\7\1\0\5\7"+
    "\1\160\2\7\24\0\3\7\1\61\6\0\13\7\1\161"+
    "\3\7\1\0\10\7\66\0\1\162\65\0\1\163\1\164"+
    "\64\0\1\165\65\0\1\166\65\0\1\167\65\0\1\170"+
    "\65\0\1\171\65\0\1\172\14\0\4\173\1\174\61\173"+
    "\1\56\1\175\1\176\63\56\10\0\1\57\37\0\1\57"+
    "\24\0\1\177\1\0\1\200\7\0\17\177\1\0\7\177"+
    "\26\0\1\201\37\0\1\201\15\0\1\63\2\0\12\63"+
    "\2\0\47\63\14\66\1\71\2\66\1\72\55\66\3\67"+
    "\2\66\1\71\2\66\1\202\1\66\17\67\1\66\10\67"+
    "\24\66\3\67\2\66\1\71\2\66\1\72\1\66\17\67"+
    "\1\66\10\67\16\66\2\0\12\66\2\0\47\66\23\0"+
    "\1\203\1\0\1\204\75\0\1\205\50\0\2\206\53\0"+
    "\3\7\1\61\6\0\2\7\1\207\1\7\1\210\12\7"+
    "\1\0\10\7\24\0\3\7\1\61\6\0\14\7\1\211"+
    "\2\7\1\0\10\7\24\0\3\7\1\61\5\0\1\206"+
    "\1\212\16\7\1\0\10\7\24\0\3\7\1\61\5\0"+
    "\1\213\1\214\16\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\7\7\1\215\7\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\11\7\1\216\5\7\1\0\1\7\1\217"+
    "\6\7\24\0\3\7\1\61\6\0\12\7\1\220\4\7"+
    "\1\0\10\7\24\0\3\7\1\61\6\0\10\7\1\221"+
    "\6\7\1\0\10\7\24\0\3\7\1\61\6\0\15\7"+
    "\1\222\1\7\1\0\10\7\24\0\3\7\1\61\5\0"+
    "\1\223\1\224\16\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\5\7\1\225\11\7\1\0\1\7\1\226\6\7"+
    "\24\0\3\7\1\61\6\0\13\7\1\227\3\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\17\7\1\230\1\231"+
    "\7\7\24\0\2\7\1\232\1\61\6\0\17\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\1\7\1\233\15\7"+
    "\1\0\10\7\55\0\2\234\33\0\3\7\1\61\6\0"+
    "\17\7\1\234\1\235\7\7\24\0\3\7\1\61\6\0"+
    "\6\7\1\236\1\237\7\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\2\7\1\240\14\7\1\0\10\7\35\0"+
    "\2\241\53\0\3\7\1\61\5\0\1\241\1\242\16\7"+
    "\1\0\10\7\24\0\3\7\1\61\6\0\7\7\1\243"+
    "\7\7\1\0\10\7\24\0\3\7\1\61\6\0\17\7"+
    "\1\0\4\7\1\244\3\7\24\0\3\7\1\61\6\0"+
    "\2\7\1\245\14\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\13\7\1\246\3\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\6\7\1\247\10\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\12\7\1\250\4\7\1\0\10\7"+
    "\24\0\3\7\1\61\6\0\10\7\1\251\6\7\1\0"+
    "\10\7\62\0\1\252\27\0\3\7\1\61\6\0\17\7"+
    "\1\0\4\7\1\253\3\7\24\0\3\7\1\61\6\0"+
    "\4\7\1\254\12\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\17\7\1\0\6\7\1\255\1\7\57\0\1\256"+
    "\32\0\3\7\1\61\6\0\17\7\1\0\1\7\1\257"+
    "\6\7\24\0\3\7\1\61\6\0\1\7\1\260\15\7"+
    "\1\0\10\7\42\0\1\261\47\0\3\7\1\61\6\0"+
    "\4\7\1\262\12\7\1\0\10\7\57\0\1\263\55\0"+
    "\1\264\53\0\2\265\20\0\1\266\32\0\3\7\1\61"+
    "\6\0\17\7\1\0\1\7\1\267\6\7\24\0\3\7"+
    "\1\61\6\0\11\7\1\270\5\7\1\0\10\7\24\0"+
    "\3\7\1\61\5\0\1\265\1\271\16\7\1\0\1\7"+
    "\1\272\6\7\24\0\3\7\1\61\6\0\2\7\1\273"+
    "\14\7\1\0\10\7\24\0\3\7\1\61\6\0\4\7"+
    "\1\274\12\7\1\0\10\7\24\0\3\7\1\61\6\0"+
    "\4\7\1\275\12\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\2\7\1\276\14\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\17\7\1\277\1\300\7\7\15\0\4\173"+
    "\1\301\64\173\1\302\1\301\61\173\2\0\1\176\72\0"+
    "\3\177\7\0\17\177\1\0\10\177\37\0\1\303\73\0"+
    "\1\304\44\0\3\7\1\61\6\0\1\7\1\305\15\7"+
    "\1\0\10\7\24\0\3\7\1\61\6\0\7\7\1\306"+
    "\7\7\1\0\10\7\37\0\1\307\52\0\3\7\1\61"+
    "\6\0\1\7\1\310\15\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\4\7\1\311\12\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\17\7\1\0\4\7\1\312\3\7"+
    "\24\0\3\7\1\61\6\0\17\7\1\313\1\314\7\7"+
    "\24\0\3\7\1\61\6\0\7\7\1\315\7\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\1\7\1\316\15\7"+
    "\1\0\10\7\37\0\1\317\52\0\3\7\1\61\6\0"+
    "\1\7\1\320\15\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\17\7\1\0\1\7\1\321\6\7\24\0\3\7"+
    "\1\61\6\0\3\7\1\322\13\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\13\7\1\323\3\7\1\0\10\7"+
    "\52\0\1\324\37\0\3\7\1\61\6\0\14\7\1\325"+
    "\2\7\1\0\10\7\24\0\3\7\1\61\6\0\3\7"+
    "\1\326\3\7\1\327\7\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\17\7\1\0\1\7\1\330\6\7\57\0"+
    "\1\331\32\0\3\7\1\61\6\0\17\7\1\0\1\7"+
    "\1\332\6\7\24\0\3\7\1\61\6\0\1\7\1\333"+
    "\15\7\1\0\10\7\24\0\3\7\1\61\6\0\10\7"+
    "\1\334\6\7\1\0\10\7\24\0\3\7\1\61\6\0"+
    "\1\7\1\335\15\7\1\0\10\7\42\0\1\336\47\0"+
    "\3\7\1\61\6\0\4\7\1\337\12\7\1\0\10\7"+
    "\24\0\3\7\1\61\6\0\2\7\1\340\14\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\14\7\1\341\2\7"+
    "\1\0\10\7\24\0\3\7\1\61\6\0\2\7\1\342"+
    "\14\7\1\0\10\7\24\0\3\7\1\61\6\0\17\7"+
<<<<<<< HEAD
    "\1\275\1\276\7\7\15\0\4\173\1\277\64\173\1\300"+
    "\1\277\61\173\2\0\1\176\72\0\3\177\7\0\17\177"+
    "\1\0\10\177\37\0\1\301\73\0\1\302\44\0\3\7"+
    "\1\61\6\0\1\7\1\303\15\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\7\7\1\304\7\7\1\0\10\7"+
    "\37\0\1\305\52\0\3\7\1\61\6\0\1\7\1\306"+
    "\15\7\1\0\10\7\24\0\3\7\1\61\6\0\4\7"+
    "\1\307\12\7\1\0\10\7\24\0\3\7\1\61\6\0"+
    "\17\7\1\0\4\7\1\310\3\7\24\0\3\7\1\61"+
    "\6\0\17\7\1\311\1\312\7\7\24\0\3\7\1\61"+
    "\6\0\7\7\1\313\7\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\1\7\1\314\15\7\1\0\10\7\37\0"+
    "\1\315\52\0\3\7\1\61\6\0\1\7\1\316\15\7"+
    "\1\0\10\7\24\0\3\7\1\61\6\0\17\7\1\0"+
    "\1\7\1\317\6\7\24\0\3\7\1\61\6\0\3\7"+
    "\1\320\13\7\1\0\10\7\24\0\3\7\1\61\6\0"+
    "\13\7\1\321\3\7\1\0\10\7\52\0\1\322\37\0"+
    "\3\7\1\61\6\0\14\7\1\323\2\7\1\0\10\7"+
    "\24\0\3\7\1\61\6\0\3\7\1\324\1\325\2\7"+
    "\1\326\7\7\1\0\10\7\24\0\3\7\1\61\6\0"+
    "\17\7\1\0\1\7\1\327\6\7\57\0\1\330\32\0"+
    "\3\7\1\61\6\0\17\7\1\0\1\7\1\331\6\7"+
    "\24\0\3\7\1\61\6\0\1\7\1\332\15\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\10\7\1\333\6\7"+
    "\1\0\10\7\24\0\3\7\1\61\6\0\1\7\1\334"+
    "\15\7\1\0\10\7\42\0\1\335\47\0\3\7\1\61"+
    "\6\0\4\7\1\336\12\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\2\7\1\337\14\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\14\7\1\340\2\7\1\0\10\7"+
    "\24\0\3\7\1\61\6\0\2\7\1\341\14\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\17\7\1\342\1\343"+
    "\7\7\24\0\3\7\1\61\6\0\7\7\1\344\7\7"+
    "\1\0\10\7\54\0\1\345\35\0\3\7\1\61\6\0"+
    "\16\7\1\346\1\0\10\7\24\0\3\7\1\61\6\0"+
    "\1\7\1\347\15\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\12\7\1\350\4\7\1\0\1\7\1\351\6\7"+
    "\54\0\1\352\35\0\3\7\1\61\6\0\16\7\1\353"+
    "\1\0\10\7\42\0\1\354\62\0\1\355\52\0\3\7"+
    "\1\61\6\0\4\7\1\356\12\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\1\7\1\357\15\7\1\0\10\7"+
    "\24\0\3\7\1\61\6\0\2\7\1\360\14\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\5\7\1\361\11\7"+
    "\1\0\10\7\24\0\3\7\1\61\6\0\17\7\1\0"+
    "\7\7\1\362\57\0\1\363\32\0\3\7\1\61\6\0"+
    "\17\7\1\0\1\7\1\364\6\7\15\0\3\173\1\176"+
    "\1\277\61\173\24\0\1\365\72\0\1\366\43\0\3\7"+
    "\1\61\6\0\3\7\1\367\13\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\10\7\1\370\6\7\1\0\10\7"+
    "\24\0\3\7\1\61\6\0\4\7\1\371\12\7\1\0"+
    "\10\7\52\0\1\372\37\0\3\7\1\61\6\0\14\7"+
    "\1\373\2\7\1\0\10\7\24\0\3\7\1\61\6\0"+
    "\12\7\1\374\4\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\4\7\1\375\12\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\10\7\1\376\6\7\1\0\10\7\24\0"+
    "\3\7\1\61\5\0\1\377\1\u0100\16\7\1\0\10\7"+
    "\24\0\3\7\1\61\6\0\16\7\1\u0101\1\0\10\7"+
    "\24\0\3\7\1\61\6\0\17\7\1\u0102\1\u0103\7\7"+
    "\24\0\3\7\1\61\6\0\10\7\1\u0104\6\7\1\0"+
    "\10\7\62\0\1\u0105\27\0\3\7\1\61\6\0\17\7"+
    "\1\0\4\7\1\u0106\3\7\24\0\3\7\1\61\6\0"+
    "\12\7\1\u0107\4\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\4\7\1\u0108\12\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\4\7\1\u0109\12\7\1\0\10\7\55\0"+
    "\2\u010a\33\0\3\7\1\61\6\0\17\7\1\u010a\1\u010b"+
    "\7\7\24\0\3\7\1\61\6\0\10\7\1\u010c\6\7"+
    "\1\0\10\7\52\0\1\u010d\37\0\3\7\1\61\6\0"+
    "\14\7\1\u010e\2\7\1\0\10\7\42\0\1\u010f\47\0"+
    "\3\7\1\61\6\0\4\7\1\u0110\12\7\1\0\10\7"+
    "\24\0\3\7\1\61\6\0\12\7\1\u0111\4\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\1\7\1\u0112\15\7"+
    "\1\0\10\7\50\0\1\u0113\65\0\1\u0114\41\0\3\7"+
    "\1\61\6\0\12\7\1\u0115\4\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\12\7\1\u0116\4\7\1\0\10\7"+
    "\24\0\3\7\1\61\6\0\17\7\1\u0117\1\u0118\7\7"+
    "\24\0\3\7\1\61\6\0\12\7\1\u0119\4\7\1\0"+
    "\10\7\42\0\1\u011a\65\0\1\u011b\47\0\3\7\1\61"+
    "\6\0\4\7\1\u011c\12\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\4\7\1\u011d\12\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\16\7\1\u011e\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\4\7\1\u011f\12\7\1\0\10\7"+
    "\37\0\1\u0120\52\0\3\7\1\61\6\0\1\7\1\u0121"+
    "\15\7\1\0\10\7\24\0\3\7\1\61\6\0\10\7"+
    "\1\u0122\6\7\1\0\10\7\52\0\1\u0123\37\0\3\7"+
    "\1\61\6\0\14\7\1\u0124\2\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\4\7\1\u0125\12\7\1\0\10\7"+
    "\24\0\3\7\1\61\6\0\1\7\1\u0126\15\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\1\7\1\u0127\15\7"+
    "\1\0\10\7\57\0\1\u0128\32\0\3\7\1\61\6\0"+
    "\17\7\1\0\1\7\1\u0129\6\7\24\0\3\7\1\61"+
    "\6\0\3\7\1\u012a\13\7\1\0\10\7\47\0\1\u012b"+
    "\42\0\3\7\1\61\6\0\11\7\1\u012c\5\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\10\7\1\u012d\6\7"+
    "\1\0\10\7\37\0\1\u012e\52\0\3\7\1\61\6\0"+
    "\1\7\1\u012f\15\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\12\7\1\u0130\4\7\1\0\10\7\37\0\1\u0131"+
    "\52\0\3\7\1\61\6\0\1\7\1\u0132\15\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\1\7\1\u0133\15\7"+
    "\1\0\10\7\41\0\1\u0134\50\0\3\7\1\61\6\0"+
    "\3\7\1\u0135\13\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\1\7\1\u0136\15\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\2\7\1\u0137\14\7\1\0\10\7\35\0"+
    "\2\u0138\53\0\3\7\1\61\5\0\1\u0138\1\u0139\16\7"+
    "\1\0\10\7\42\0\1\u013a\47\0\3\7\1\61\6\0"+
    "\4\7\1\u013b\12\7\1\0\10\7\42\0\1\u013c\47\0"+
    "\3\7\1\61\6\0\4\7\1\u013d\12\7\1\0\10\7"+
    "\46\0\1\u013e\43\0\3\7\1\61\6\0\10\7\1\u013f"+
    "\6\7\1\0\10\7\52\0\1\u0140\37\0\3\7\1\61"+
    "\6\0\14\7\1\u0141\2\7\1\0\10\7\44\0\1\u0142"+
    "\45\0\3\7\1\61\6\0\6\7\1\u0143\10\7\1\0"+
    "\10\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12042];
=======
    "\1\343\1\344\7\7\24\0\3\7\1\61\6\0\7\7"+
    "\1\345\7\7\1\0\10\7\54\0\1\346\35\0\3\7"+
    "\1\61\6\0\16\7\1\347\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\1\7\1\350\15\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\12\7\1\351\4\7\1\0\1\7"+
    "\1\352\6\7\54\0\1\353\35\0\3\7\1\61\6\0"+
    "\16\7\1\354\1\0\10\7\43\0\1\355\64\0\1\356"+
    "\62\0\1\357\52\0\3\7\1\61\6\0\5\7\1\360"+
    "\11\7\1\0\10\7\24\0\3\7\1\61\6\0\4\7"+
    "\1\361\12\7\1\0\10\7\24\0\3\7\1\61\6\0"+
    "\1\7\1\362\15\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\2\7\1\363\14\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\5\7\1\364\11\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\17\7\1\0\7\7\1\365\57\0"+
    "\1\366\32\0\3\7\1\61\6\0\17\7\1\0\1\7"+
    "\1\367\6\7\15\0\3\173\1\176\1\301\61\173\24\0"+
    "\1\370\72\0\1\371\43\0\3\7\1\61\6\0\3\7"+
    "\1\372\13\7\1\0\10\7\24\0\3\7\1\61\6\0"+
    "\10\7\1\373\6\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\4\7\1\374\12\7\1\0\10\7\52\0\1\375"+
    "\37\0\3\7\1\61\6\0\14\7\1\376\2\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\12\7\1\377\4\7"+
    "\1\0\10\7\24\0\3\7\1\61\6\0\4\7\1\u0100"+
    "\12\7\1\0\10\7\24\0\3\7\1\61\6\0\10\7"+
    "\1\u0101\6\7\1\0\10\7\24\0\3\7\1\61\5\0"+
    "\1\u0102\1\u0103\16\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\16\7\1\u0104\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\10\7\1\u0105\6\7\1\0\10\7\62\0\1\u0106"+
    "\27\0\3\7\1\61\6\0\17\7\1\0\4\7\1\u0107"+
    "\3\7\24\0\3\7\1\61\6\0\12\7\1\u0108\4\7"+
    "\1\0\10\7\24\0\3\7\1\61\6\0\4\7\1\u0109"+
    "\12\7\1\0\10\7\24\0\3\7\1\61\6\0\4\7"+
    "\1\u010a\12\7\1\0\10\7\55\0\2\u010b\33\0\3\7"+
    "\1\61\6\0\17\7\1\u010b\1\u010c\7\7\24\0\3\7"+
    "\1\61\6\0\10\7\1\u010d\6\7\1\0\10\7\52\0"+
    "\1\u010e\37\0\3\7\1\61\6\0\14\7\1\u010f\2\7"+
    "\1\0\10\7\42\0\1\u0110\47\0\3\7\1\61\6\0"+
    "\4\7\1\u0111\12\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\12\7\1\u0112\4\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\1\7\1\u0113\15\7\1\0\10\7\40\0"+
    "\1\u0114\75\0\1\u0115\65\0\1\u0116\41\0\3\7\1\61"+
    "\6\0\2\7\1\u0117\14\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\12\7\1\u0118\4\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\12\7\1\u0119\4\7\1\0\10\7"+
    "\24\0\3\7\1\61\6\0\17\7\1\u011a\1\u011b\7\7"+
    "\24\0\3\7\1\61\6\0\12\7\1\u011c\4\7\1\0"+
    "\10\7\42\0\1\u011d\65\0\1\u011e\47\0\3\7\1\61"+
    "\6\0\4\7\1\u011f\12\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\4\7\1\u0120\12\7\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\16\7\1\u0121\1\0\10\7\24\0"+
    "\3\7\1\61\6\0\4\7\1\u0122\12\7\1\0\10\7"+
    "\37\0\1\u0123\52\0\3\7\1\61\6\0\1\7\1\u0124"+
    "\15\7\1\0\10\7\24\0\3\7\1\61\6\0\10\7"+
    "\1\u0125\6\7\1\0\10\7\24\0\3\7\1\61\6\0"+
    "\4\7\1\u0126\12\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\1\7\1\u0127\15\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\1\7\1\u0128\15\7\1\0\10\7\57\0"+
    "\1\u0129\32\0\3\7\1\61\6\0\17\7\1\0\1\7"+
    "\1\u012a\6\7\24\0\3\7\1\61\6\0\3\7\1\u012b"+
    "\13\7\1\0\10\7\40\0\1\u012c\51\0\3\7\1\61"+
    "\6\0\2\7\1\u012d\14\7\1\0\10\7\47\0\1\u012e"+
    "\42\0\3\7\1\61\6\0\11\7\1\u012f\5\7\1\0"+
    "\10\7\24\0\3\7\1\61\6\0\10\7\1\u0130\6\7"+
    "\1\0\10\7\37\0\1\u0131\52\0\3\7\1\61\6\0"+
    "\1\7\1\u0132\15\7\1\0\10\7\24\0\3\7\1\61"+
    "\6\0\12\7\1\u0133\4\7\1\0\10\7\24\0\3\7"+
    "\1\61\6\0\1\7\1\u0134\15\7\1\0\10\7\41\0"+
    "\1\u0135\50\0\3\7\1\61\6\0\3\7\1\u0136\13\7"+
    "\1\0\10\7\24\0\3\7\1\61\6\0\1\7\1\u0137"+
    "\15\7\1\0\10\7\24\0\3\7\1\61\6\0\2\7"+
    "\1\u0138\14\7\1\0\10\7\42\0\1\u0139\47\0\3\7"+
    "\1\61\6\0\4\7\1\u013a\12\7\1\0\10\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11664];
>>>>>>> release-0.3_card_96
=======
    "\11\7\24\0\3\7\1\61\6\0\10\7\1\107\2\7"+
    "\1\110\2\7\1\111\1\0\11\7\24\0\3\7\1\61"+
    "\6\0\10\7\1\112\1\7\1\113\1\114\2\7\1\115"+
    "\1\0\11\7\24\0\3\7\1\61\5\0\1\116\1\117"+
    "\5\7\1\120\10\7\1\0\11\7\24\0\3\7\1\61"+
    "\6\0\1\7\1\121\10\7\1\122\4\7\1\123\1\124"+
    "\10\7\24\0\3\7\1\61\5\0\1\125\1\126\16\7"+
    "\1\0\1\7\1\127\4\7\1\130\2\7\24\0\3\7"+
    "\1\61\6\0\5\7\1\131\4\7\1\132\4\7\1\0"+
    "\11\7\24\0\3\7\1\61\6\0\1\7\1\133\2\7"+
    "\1\134\1\7\1\135\10\7\1\136\1\137\10\7\24\0"+
    "\3\7\1\61\6\0\5\7\1\140\4\7\1\141\4\7"+
    "\1\0\1\7\1\142\7\7\24\0\3\7\1\61\6\0"+
    "\10\7\1\143\6\7\1\144\1\145\10\7\24\0\3\7"+
    "\1\61\6\0\16\7\1\146\1\147\1\150\10\7\35\0"+
    "\2\151\16\0\2\152\1\153\33\0\3\7\1\61\5\0"+
    "\1\151\1\154\16\7\1\152\1\155\1\156\7\7\24\0"+
    "\3\7\1\61\6\0\5\7\1\157\2\7\1\160\2\7"+
    "\1\161\3\7\1\0\6\7\1\162\2\7\24\0\3\7"+
    "\1\61\6\0\13\7\1\163\3\7\1\0\11\7\67\0"+
    "\1\164\66\0\1\165\1\166\65\0\1\167\66\0\1\170"+
    "\66\0\1\171\66\0\1\172\66\0\1\173\66\0\1\174"+
    "\14\0\4\175\1\176\62\175\1\56\1\177\1\200\64\56"+
    "\10\0\1\57\40\0\1\57\24\0\1\201\1\0\1\202"+
    "\7\0\17\201\1\0\10\201\26\0\1\203\40\0\1\203"+
    "\15\0\1\63\2\0\12\63\2\0\50\63\14\66\1\71"+
    "\2\66\1\72\56\66\3\67\2\66\1\71\2\66\1\204"+
    "\1\66\17\67\1\66\11\67\24\66\3\67\2\66\1\71"+
    "\2\66\1\72\1\66\17\67\1\66\11\67\16\66\2\0"+
    "\12\66\2\0\50\66\23\0\1\205\1\0\1\206\76\0"+
    "\1\207\51\0\2\210\54\0\3\7\1\61\6\0\2\7"+
    "\1\211\1\7\1\212\12\7\1\0\11\7\24\0\3\7"+
    "\1\61\6\0\14\7\1\213\2\7\1\0\11\7\24\0"+
    "\3\7\1\61\5\0\1\210\1\214\16\7\1\0\11\7"+
    "\24\0\3\7\1\61\5\0\1\215\1\216\16\7\1\0"+
    "\11\7\24\0\3\7\1\61\6\0\7\7\1\217\7\7"+
    "\1\0\11\7\24\0\3\7\1\61\6\0\11\7\1\220"+
    "\5\7\1\0\1\7\1\221\7\7\24\0\3\7\1\61"+
    "\6\0\12\7\1\222\4\7\1\0\11\7\24\0\3\7"+
    "\1\61\6\0\10\7\1\223\6\7\1\0\11\7\24\0"+
    "\3\7\1\61\6\0\15\7\1\224\1\7\1\0\11\7"+
    "\24\0\3\7\1\61\5\0\1\225\1\226\16\7\1\0"+
    "\11\7\24\0\3\7\1\61\6\0\5\7\1\227\11\7"+
    "\1\0\1\7\1\230\7\7\24\0\3\7\1\61\6\0"+
    "\13\7\1\231\3\7\1\0\11\7\24\0\3\7\1\61"+
    "\6\0\17\7\1\0\3\7\1\232\5\7\24\0\3\7"+
    "\1\61\6\0\17\7\1\233\1\234\10\7\24\0\2\7"+
    "\1\235\1\61\6\0\17\7\1\0\11\7\24\0\3\7"+
    "\1\61\6\0\1\7\1\236\15\7\1\0\11\7\55\0"+
    "\2\237\34\0\3\7\1\61\6\0\17\7\1\237\1\240"+
    "\10\7\24\0\3\7\1\61\6\0\6\7\1\241\1\242"+
    "\7\7\1\0\11\7\24\0\3\7\1\61\6\0\2\7"+
    "\1\243\14\7\1\0\11\7\24\0\3\7\1\61\6\0"+
    "\13\7\1\244\3\7\1\0\11\7\35\0\2\245\54\0"+
    "\3\7\1\61\5\0\1\245\1\246\16\7\1\0\11\7"+
    "\24\0\3\7\1\61\6\0\7\7\1\247\7\7\1\0"+
    "\11\7\24\0\3\7\1\61\6\0\17\7\1\0\5\7"+
    "\1\250\3\7\24\0\3\7\1\61\6\0\2\7\1\251"+
    "\14\7\1\0\11\7\24\0\3\7\1\61\6\0\13\7"+
    "\1\252\3\7\1\0\11\7\24\0\3\7\1\61\6\0"+
    "\6\7\1\253\10\7\1\0\11\7\24\0\3\7\1\61"+
    "\6\0\12\7\1\254\4\7\1\0\11\7\24\0\3\7"+
    "\1\61\6\0\10\7\1\255\6\7\1\0\11\7\63\0"+
    "\1\256\27\0\3\7\1\61\6\0\17\7\1\0\5\7"+
    "\1\257\3\7\24\0\3\7\1\61\6\0\4\7\1\260"+
    "\12\7\1\0\11\7\24\0\3\7\1\61\6\0\17\7"+
    "\1\0\7\7\1\261\1\7\57\0\1\262\33\0\3\7"+
    "\1\61\6\0\17\7\1\0\1\7\1\263\7\7\24\0"+
    "\3\7\1\61\6\0\1\7\1\264\15\7\1\0\11\7"+
    "\42\0\1\265\50\0\3\7\1\61\6\0\4\7\1\266"+
    "\12\7\1\0\11\7\47\0\1\267\54\0\2\270\20\0"+
    "\1\271\33\0\3\7\1\61\6\0\11\7\1\272\5\7"+
    "\1\0\11\7\24\0\3\7\1\61\5\0\1\270\1\273"+
    "\16\7\1\0\1\7\1\274\7\7\24\0\3\7\1\61"+
    "\6\0\2\7\1\275\14\7\1\0\11\7\24\0\3\7"+
    "\1\61\6\0\4\7\1\276\12\7\1\0\11\7\24\0"+
    "\3\7\1\61\6\0\4\7\1\277\12\7\1\0\11\7"+
    "\24\0\3\7\1\61\6\0\2\7\1\300\14\7\1\0"+
    "\11\7\24\0\3\7\1\61\6\0\17\7\1\301\1\302"+
    "\10\7\15\0\4\175\1\303\65\175\1\304\1\303\62\175"+
    "\2\0\1\200\73\0\3\201\7\0\17\201\1\0\11\201"+
    "\37\0\1\305\74\0\1\306\45\0\3\7\1\61\6\0"+
    "\1\7\1\307\15\7\1\0\11\7\24\0\3\7\1\61"+
    "\6\0\7\7\1\310\7\7\1\0\11\7\37\0\1\311"+
    "\53\0\3\7\1\61\6\0\1\7\1\312\15\7\1\0"+
    "\11\7\24\0\3\7\1\61\6\0\4\7\1\313\12\7"+
    "\1\0\11\7\24\0\3\7\1\61\6\0\17\7\1\0"+
    "\5\7\1\314\3\7\24\0\3\7\1\61\6\0\17\7"+
    "\1\315\1\316\10\7\24\0\3\7\1\61\6\0\7\7"+
    "\1\317\7\7\1\0\11\7\24\0\3\7\1\61\6\0"+
    "\1\7\1\320\15\7\1\0\11\7\37\0\1\321\53\0"+
    "\3\7\1\61\6\0\1\7\1\322\15\7\1\0\11\7"+
    "\24\0\3\7\1\61\6\0\17\7\1\0\1\7\1\323"+
    "\7\7\24\0\3\7\1\61\6\0\3\7\1\324\13\7"+
    "\1\0\11\7\24\0\3\7\1\61\6\0\13\7\1\325"+
    "\3\7\1\0\11\7\24\0\3\7\1\61\6\0\2\7"+
    "\1\326\14\7\1\0\11\7\52\0\1\327\40\0\3\7"+
    "\1\61\6\0\14\7\1\330\2\7\1\0\11\7\24\0"+
    "\3\7\1\61\6\0\3\7\1\331\3\7\1\332\7\7"+
    "\1\0\11\7\24\0\3\7\1\61\6\0\17\7\1\0"+
    "\1\7\1\333\7\7\57\0\1\334\33\0\3\7\1\61"+
    "\6\0\17\7\1\0\1\7\1\335\7\7\24\0\3\7"+
    "\1\61\6\0\1\7\1\336\15\7\1\0\11\7\24\0"+
    "\3\7\1\61\6\0\10\7\1\337\6\7\1\0\11\7"+
    "\24\0\3\7\1\61\6\0\1\7\1\340\15\7\1\0"+
    "\11\7\24\0\3\7\1\61\6\0\6\7\1\341\10\7"+
    "\1\0\11\7\42\0\1\342\50\0\3\7\1\61\6\0"+
    "\4\7\1\343\12\7\1\0\11\7\24\0\3\7\1\61"+
    "\6\0\2\7\1\344\14\7\1\0\11\7\24\0\3\7"+
    "\1\61\6\0\14\7\1\345\2\7\1\0\11\7\24\0"+
    "\3\7\1\61\6\0\2\7\1\346\14\7\1\0\11\7"+
    "\24\0\3\7\1\61\6\0\17\7\1\347\1\350\10\7"+
    "\24\0\3\7\1\61\6\0\7\7\1\351\7\7\1\0"+
    "\11\7\54\0\1\352\36\0\3\7\1\61\6\0\16\7"+
    "\1\353\1\0\11\7\24\0\3\7\1\61\6\0\1\7"+
    "\1\354\15\7\1\0\11\7\24\0\3\7\1\61\6\0"+
    "\12\7\1\355\4\7\1\0\1\7\1\356\7\7\54\0"+
    "\1\357\36\0\3\7\1\61\6\0\16\7\1\360\1\0"+
    "\11\7\42\0\1\361\63\0\1\362\53\0\3\7\1\61"+
    "\6\0\4\7\1\363\12\7\1\0\11\7\24\0\3\7"+
    "\1\61\6\0\1\7\1\364\15\7\1\0\11\7\24\0"+
    "\3\7\1\61\6\0\2\7\1\365\14\7\1\0\11\7"+
    "\24\0\3\7\1\61\6\0\5\7\1\366\11\7\1\0"+
    "\11\7\24\0\3\7\1\61\6\0\17\7\1\0\10\7"+
    "\1\367\57\0\1\370\33\0\3\7\1\61\6\0\17\7"+
    "\1\0\1\7\1\371\7\7\15\0\3\175\1\200\1\303"+
    "\62\175\24\0\1\372\73\0\1\373\44\0\3\7\1\61"+
    "\6\0\3\7\1\374\13\7\1\0\11\7\24\0\3\7"+
    "\1\61\6\0\10\7\1\375\6\7\1\0\11\7\24\0"+
    "\3\7\1\61\6\0\4\7\1\376\12\7\1\0\11\7"+
    "\52\0\1\377\40\0\3\7\1\61\6\0\14\7\1\u0100"+
    "\2\7\1\0\11\7\24\0\3\7\1\61\6\0\12\7"+
    "\1\u0101\4\7\1\0\11\7\24\0\3\7\1\61\6\0"+
    "\4\7\1\u0102\12\7\1\0\11\7\24\0\3\7\1\61"+
    "\6\0\10\7\1\u0103\6\7\1\0\11\7\24\0\3\7"+
    "\1\61\5\0\1\u0104\1\u0105\16\7\1\0\11\7\24\0"+
    "\3\7\1\61\6\0\1\7\1\u0106\15\7\1\0\11\7"+
    "\24\0\3\7\1\61\6\0\16\7\1\u0107\1\0\11\7"+
    "\24\0\3\7\1\61\6\0\10\7\1\u0108\6\7\1\0"+
    "\11\7\63\0\1\u0109\27\0\3\7\1\61\6\0\17\7"+
    "\1\0\5\7\1\u010a\3\7\24\0\3\7\1\61\6\0"+
    "\12\7\1\u010b\4\7\1\0\11\7\24\0\3\7\1\61"+
    "\6\0\4\7\1\u010c\12\7\1\0\11\7\24\0\3\7"+
    "\1\61\6\0\4\7\1\u010d\12\7\1\0\11\7\55\0"+
    "\2\u010e\34\0\3\7\1\61\6\0\17\7\1\u010e\1\u010f"+
    "\10\7\24\0\3\7\1\61\6\0\10\7\1\u0110\6\7"+
    "\1\0\11\7\52\0\1\u0111\40\0\3\7\1\61\6\0"+
    "\14\7\1\u0112\2\7\1\0\11\7\42\0\1\u0113\50\0"+
    "\3\7\1\61\6\0\4\7\1\u0114\12\7\1\0\11\7"+
    "\24\0\3\7\1\61\6\0\12\7\1\u0115\4\7\1\0"+
    "\11\7\24\0\3\7\1\61\6\0\1\7\1\u0116\15\7"+
    "\1\0\11\7\50\0\1\u0117\66\0\1\u0118\42\0\3\7"+
    "\1\61\6\0\12\7\1\u0119\4\7\1\0\11\7\24\0"+
    "\3\7\1\61\6\0\12\7\1\u011a\4\7\1\0\11\7"+
    "\24\0\3\7\1\61\6\0\17\7\1\u011b\1\u011c\10\7"+
    "\24\0\3\7\1\61\6\0\12\7\1\u011d\4\7\1\0"+
    "\11\7\42\0\1\u011e\66\0\1\u011f\50\0\3\7\1\61"+
    "\6\0\4\7\1\u0120\12\7\1\0\11\7\24\0\3\7"+
    "\1\61\6\0\4\7\1\u0121\12\7\1\0\11\7\24\0"+
    "\3\7\1\61\6\0\16\7\1\u0122\1\0\11\7\24\0"+
    "\3\7\1\61\6\0\4\7\1\u0123\12\7\1\0\11\7"+
    "\37\0\1\u0124\53\0\3\7\1\61\6\0\1\7\1\u0125"+
    "\15\7\1\0\11\7\24\0\3\7\1\61\6\0\10\7"+
    "\1\u0126\6\7\1\0\11\7\24\0\3\7\1\61\6\0"+
    "\4\7\1\u0127\12\7\1\0\11\7\24\0\3\7\1\61"+
    "\6\0\1\7\1\u0128\15\7\1\0\11\7\24\0\3\7"+
    "\1\61\6\0\1\7\1\u0129\15\7\1\0\11\7\57\0"+
    "\1\u012a\33\0\3\7\1\61\6\0\17\7\1\0\1\7"+
    "\1\u012b\7\7\24\0\3\7\1\61\6\0\3\7\1\u012c"+
    "\13\7\1\0\11\7\47\0\1\u012d\43\0\3\7\1\61"+
    "\6\0\11\7\1\u012e\5\7\1\0\11\7\24\0\3\7"+
    "\1\61\6\0\10\7\1\u012f\6\7\1\0\11\7\37\0"+
    "\1\u0130\53\0\3\7\1\61\6\0\1\7\1\u0131\15\7"+
    "\1\0\11\7\24\0\3\7\1\61\6\0\12\7\1\u0132"+
    "\4\7\1\0\11\7\24\0\3\7\1\61\6\0\1\7"+
    "\1\u0133\15\7\1\0\11\7\41\0\1\u0134\51\0\3\7"+
    "\1\61\6\0\3\7\1\u0135\13\7\1\0\11\7\24\0"+
    "\3\7\1\61\6\0\1\7\1\u0136\15\7\1\0\11\7"+
    "\24\0\3\7\1\61\6\0\2\7\1\u0137\14\7\1\0"+
    "\11\7\42\0\1\u0138\50\0\3\7\1\61\6\0\4\7"+
    "\1\u0139\12\7\1\0\11\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11715];
>>>>>>> release-0.3_card_105
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\32\1\1\11\10\1\4\11\1\0\2\11"+
<<<<<<< HEAD
    "\2\1\1\11\3\0\1\11\5\0\1\11\3\0\17\1"+
    "\1\0\3\1\1\0\1\1\1\11\10\1\1\0\5\1"+
    "\1\0\2\1\1\0\2\1\1\0\11\1\11\11\2\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\0\2\11"+
    "\1\0\4\1\1\0\7\1\1\0\4\1\1\0\3\1"+
    "\1\0\4\1\1\0\10\1\1\0\3\1\1\11\2\1"+
    "\1\0\1\1\1\0\1\11\2\0\10\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\11\3\1\1\0\3\1"+
<<<<<<< HEAD
    "\1\11\4\1\1\11\5\1\1\0\4\1\1\0\4\1"+
    "\1\0\2\1\1\0\4\1\1\11\1\1\2\0\5\1"+
    "\1\11\1\1\2\0\3\1\1\11\4\1\1\0\2\1"+
    "\1\0\2\1\1\11\4\1\1\0\2\1\1\11\1\1"+
    "\1\11\3\1\2\11\2\1\1\0\2\1\1\11\1\0"+
    "\4\1\1\11\2\1\1\0\4\1\1\0\2\1\1\11"+
    "\2\1\1\11\2\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[323];
=======
    "\1\11\4\1\1\11\4\1\1\0\4\1\1\0\4\1"+
    "\1\0\2\1\1\0\4\1\1\11\1\1\3\0\6\1"+
    "\1\11\1\1\2\0\3\1\1\11\4\1\1\0\3\1"+
=======
    "\2\1\1\11\3\0\1\11\5\0\1\11\3\0\20\1"+
    "\1\0\4\1\1\0\1\1\1\11\10\1\1\0\5\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\0\11\1\11\11"+
    "\2\0\1\1\1\11\1\1\1\0\1\1\1\11\1\0"+
    "\2\11\1\0\4\1\1\0\7\1\1\0\5\1\1\0"+
    "\3\1\1\0\5\1\1\0\10\1\1\0\3\1\1\11"+
    "\2\1\1\0\1\1\1\11\2\0\7\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\11\3\1\1\0\3\1"+
    "\1\11\5\1\1\11\4\1\1\0\5\1\1\0\4\1"+
    "\1\0\2\1\1\0\4\1\1\11\1\1\2\0\5\1"+
    "\1\11\1\1\2\0\3\1\1\11\4\1\1\0\4\1"+
>>>>>>> release-0.3_card_105
    "\1\11\4\1\1\0\2\1\1\11\1\1\1\11\3\1"+
    "\1\0\2\11\3\1\1\0\2\1\1\11\1\0\4\1"+
    "\1\11\5\1\1\0\2\1\1\11\1\1\1\11\2\1"+
    "\1\11\3\1\1\0\3\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
<<<<<<< HEAD
    int [] result = new int[314];
>>>>>>> release-0.3_card_96
=======
    int [] result = new int[313];
>>>>>>> release-0.3_card_105
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	// Initialize any necessary variables here
	
	// A table I will create to store Lexical Errors found | import library for LinkedList
	public LinkedList<TError> TableLE = new LinkedList<TError>();
	public LinkedList<String> StmtCopy = new LinkedList<String>(); // DELETE THIS, will be replaced by PrettyfiedStatement
	
	public LinkedList<PrettyStatement> PrettyfiedStatement = new LinkedList<PrettyStatement>();
	
		
	// Will need to create a structure to save the lexeme and its corresponding category code.
	public void prettyfier (String lexeme, int category) {
		
		PrettyStatement ps = new PrettyStatement(lexeme,category);
		PrettyfiedStatement.add(ps);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JFlex_Rules_SQL(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("\n### Lexical error (Illegal element) ### - '" + yytext() + "' line: " + yyline + ", column: " + yychar + "\n"); 
				  	  TError errors_found = new TError(yytext(),yyline,yycolumn,"Lexical Error","Unrecognized symbol.");
				  	  TableLE.add(errors_found); 
				  	  prettyfier(yytext(), Categories.ERROR);
					  return new Symbol(sym.ILLEGAL_CHAR, yyline, yycolumn, yytext());
            }
<<<<<<< HEAD
          case 88: break;
          case 2: 
            { System.out.println("Recognized space: " + yytext()); prettyfier(yytext(), Categories.NOTHING );
            }
          case 89: break;
          case 3: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDE, yyline+1, yycolumn+1, yytext());
            }
          case 90: break;
          case 4: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._STAR, yyline+1, yycolumn+1, yytext());
            }
          case 91: break;
          case 5: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUS, yyline+1, yycolumn+1, yytext());
            }
          case 92: break;
          case 6: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.IDENTIFIER, yyline+1, yycolumn+1, yytext());
            }
          case 93: break;
          case 7: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.INTEGER, yyline+1, yycolumn+1, yytext());
            }
          case 94: break;
          case 8: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._EQU, yyline+1, yycolumn+1, yytext());
            }
          case 95: break;
          case 9: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GT, yyline+1, yycolumn+1, yytext());
            }
          case 96: break;
          case 10: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LT, yyline+1, yycolumn+1, yytext());
            }
          case 97: break;
          case 11: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUS, yyline+1, yycolumn+1, yytext());
            }
          case 98: break;
          case 12: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OPENPAR, yyline+1, yycolumn+1, yytext());
            }
          case 99: break;
          case 13: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._CLOSEPAR, yyline+1, yycolumn+1, yytext());
            }
          case 100: break;
          case 14: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._SEMCOL2, yyline+1, yycolumn+1, yytext());
            }
          case 101: break;
          case 15: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._COMMA, yyline+1, yycolumn+1, yytext());
            }
          case 102: break;
          case 16: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDEEQ, yyline+1, yycolumn+1, yytext());
            }
          case 103: break;
          case 17: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._TIMESEQ, yyline+1, yycolumn+1, yytext());
            }
          case 104: break;
          case 18: 
            { System.out.println("Recognized comment: " + yytext()); prettyfier(yytext(), Categories.COMMENT );
            }
          case 105: break;
          case 19: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 106: break;
          case 20: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.LITERAL_STRING); return new Symbol(sym.LITERAL_STRING, yyline+1, yycolumn+1, yytext());
            }
          case 107: break;
          case 21: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QCOLALIAS, yyline+1, yycolumn+1, yytext());
            }
          case 108: break;
          case 22: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AS, yyline+1, yycolumn+1, yytext());
            }
          case 109: break;
          case 23: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._OR, yyline+1, yycolumn+1, yytext());
            }
          case 110: break;
          case 24: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ON, yyline+1, yycolumn+1, yytext());
            }
          case 111: break;
          case 25: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IS, yyline+1, yycolumn+1, yytext());
            }
          case 112: break;
          case 26: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IN, yyline+1, yycolumn+1, yytext());
            }
          case 113: break;
          case 27: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GET, yyline+1, yycolumn+1, yytext());
            }
          case 114: break;
          case 28: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LET, yyline+1, yycolumn+1, yytext());
            }
          case 115: break;
          case 29: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF, yyline+1, yycolumn+1, yytext());
            }
          case 116: break;
          case 30: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF2, yyline+1, yycolumn+1, yytext());
            }
          case 117: break;
          case 31: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 118: break;
          case 32: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MODEQ, yyline+1, yycolumn+1, yytext());
            }
          case 119: break;
          case 33: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._ANDEQ, yyline+1, yycolumn+1, yytext());
            }
          case 120: break;
          case 34: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._POWEQ, yyline+1, yycolumn+1, yytext());
            }
          case 121: break;
          case 35: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OREQ, yyline+1, yycolumn+1, yytext());
            }
          case 122: break;
          case 36: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.TABDOTCOL, yyline+1, yycolumn+1, yytext());
            }
          case 123: break;
          case 37: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.REAL, yyline+1, yycolumn+1, yytext());
            }
          case 124: break;
          case 38: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QTABLENAME, yyline+1, yycolumn+1, yytext());
            }
          case 125: break;
          case 39: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SET, yyline+1, yycolumn+1, yytext());
            }
          case 126: break;
          case 40: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SUM, yyline+1, yycolumn+1, yytext());
            }
          case 127: break;
          case 41: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.END, yyline+1, yycolumn+1, yytext());
            }
          case 128: break;
          case 42: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._AND, yyline+1, yycolumn+1, yytext());
            }
          case 129: break;
          case 43: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AVG, yyline+1, yycolumn+1, yytext());
            }
          case 130: break;
          case 44: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.MAX, yyline+1, yycolumn+1, yytext());
            }
          case 131: break;
          case 45: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.MIN, yyline+1, yycolumn+1, yytext());
            }
          case 132: break;
          case 46: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IIF, yyline+1, yycolumn+1, yytext());
            }
          case 133: break;
          case 47: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NOT, yyline+1, yycolumn+1, yytext());
            }
          case 134: break;
          case 48: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NVL, yyline+1, yycolumn+1, yytext());
            }
          case 135: break;
          case 49: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ELSE, yyline+1, yycolumn+1, yytext());
            }
          case 136: break;
          case 50: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LEFT, yyline+1, yycolumn+1, yytext());
            }
          case 137: break;
          case 51: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LPAD, yyline+1, yycolumn+1, yytext());
            }
          case 138: break;
          case 52: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CASE, yyline+1, yycolumn+1, yytext());
            }
          case 139: break;
          case 53: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TRIM, yyline+1, yycolumn+1, yytext());
            }
          case 140: break;
          case 54: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.THEN, yyline+1, yycolumn+1, yytext());
            }
          case 141: break;
=======
          case 89: break;
          case 2: 
            { System.out.println("Recognized space: " + yytext()); prettyfier(yytext(), Categories.NOTHING );
            }
          case 90: break;
          case 3: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDE, yyline+1, yycolumn+1, yytext());
            }
          case 91: break;
          case 4: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._STAR, yyline+1, yycolumn+1, yytext());
            }
          case 92: break;
          case 5: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUS, yyline+1, yycolumn+1, yytext());
            }
          case 93: break;
          case 6: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.IDENTIFIER, yyline+1, yycolumn+1, yytext());
            }
          case 94: break;
          case 7: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.INTEGER, yyline+1, yycolumn+1, yytext());
            }
          case 95: break;
          case 8: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._EQU, yyline+1, yycolumn+1, yytext());
            }
          case 96: break;
          case 9: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GT, yyline+1, yycolumn+1, yytext());
            }
          case 97: break;
          case 10: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LT, yyline+1, yycolumn+1, yytext());
            }
          case 98: break;
          case 11: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUS, yyline+1, yycolumn+1, yytext());
            }
          case 99: break;
          case 12: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OPENPAR, yyline+1, yycolumn+1, yytext());
            }
          case 100: break;
          case 13: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._CLOSEPAR, yyline+1, yycolumn+1, yytext());
            }
          case 101: break;
          case 14: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._SEMCOL2, yyline+1, yycolumn+1, yytext());
            }
          case 102: break;
          case 15: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._COMMA, yyline+1, yycolumn+1, yytext());
            }
          case 103: break;
          case 16: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIVIDEEQ, yyline+1, yycolumn+1, yytext());
            }
          case 104: break;
          case 17: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._TIMESEQ, yyline+1, yycolumn+1, yytext());
            }
          case 105: break;
          case 18: 
            { System.out.println("Recognized comment: " + yytext()); prettyfier(yytext(), Categories.COMMENT );
            }
          case 106: break;
          case 19: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MINUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 107: break;
          case 20: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.LITERAL_STRING); return new Symbol(sym.LITERAL_STRING, yyline+1, yycolumn+1, yytext());
            }
          case 108: break;
          case 21: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QCOLALIAS, yyline+1, yycolumn+1, yytext());
            }
          case 109: break;
          case 22: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AS, yyline+1, yycolumn+1, yytext());
            }
          case 110: break;
          case 23: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._OR, yyline+1, yycolumn+1, yytext());
            }
          case 111: break;
          case 24: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ON, yyline+1, yycolumn+1, yytext());
            }
          case 112: break;
          case 25: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IS, yyline+1, yycolumn+1, yytext());
            }
          case 113: break;
          case 26: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IN, yyline+1, yycolumn+1, yytext());
            }
          case 114: break;
          case 27: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._GET, yyline+1, yycolumn+1, yytext());
            }
          case 115: break;
          case 28: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._LET, yyline+1, yycolumn+1, yytext());
            }
          case 116: break;
          case 29: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF, yyline+1, yycolumn+1, yytext());
            }
          case 117: break;
          case 30: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._DIFF2, yyline+1, yycolumn+1, yytext());
            }
          case 118: break;
          case 31: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._PLUSEQ, yyline+1, yycolumn+1, yytext());
            }
          case 119: break;
          case 32: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._MODEQ, yyline+1, yycolumn+1, yytext());
            }
          case 120: break;
          case 33: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._ANDEQ, yyline+1, yycolumn+1, yytext());
            }
          case 121: break;
          case 34: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._POWEQ, yyline+1, yycolumn+1, yytext());
            }
          case 122: break;
          case 35: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NOTHING ); return new Symbol(sym._OREQ, yyline+1, yycolumn+1, yytext());
            }
          case 123: break;
          case 36: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.TABDOTCOL, yyline+1, yycolumn+1, yytext());
            }
          case 124: break;
          case 37: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.NUMBER); return new Symbol(sym.REAL, yyline+1, yycolumn+1, yytext());
            }
          case 125: break;
          case 38: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.IDENTIFIER); return new Symbol(sym.QTABLENAME, yyline+1, yycolumn+1, yytext());
            }
          case 126: break;
          case 39: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SET, yyline+1, yycolumn+1, yytext());
            }
          case 127: break;
          case 40: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SUM, yyline+1, yycolumn+1, yytext());
            }
          case 128: break;
          case 41: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.END, yyline+1, yycolumn+1, yytext());
            }
          case 129: break;
          case 42: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym._AND, yyline+1, yycolumn+1, yytext());
            }
          case 130: break;
          case 43: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.AVG, yyline+1, yycolumn+1, yytext());
            }
          case 131: break;
          case 44: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.MAX, yyline+1, yycolumn+1, yytext());
            }
          case 132: break;
          case 45: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.MIN, yyline+1, yycolumn+1, yytext());
            }
          case 133: break;
          case 46: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.IIF, yyline+1, yycolumn+1, yytext());
            }
          case 134: break;
          case 47: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NOT, yyline+1, yycolumn+1, yytext());
            }
          case 135: break;
          case 48: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NVL, yyline+1, yycolumn+1, yytext());
            }
          case 136: break;
          case 49: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ELSE, yyline+1, yycolumn+1, yytext());
            }
          case 137: break;
          case 50: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LEFT, yyline+1, yycolumn+1, yytext());
            }
          case 138: break;
          case 51: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LPAD, yyline+1, yycolumn+1, yytext());
            }
          case 139: break;
          case 52: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CASE, yyline+1, yycolumn+1, yytext());
            }
          case 140: break;
          case 53: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TRIM, yyline+1, yycolumn+1, yytext());
            }
          case 141: break;
          case 54: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.THEN, yyline+1, yycolumn+1, yytext());
            }
          case 142: break;
>>>>>>> release-0.3_card_105
          case 55: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DROP, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 142: break;
=======
          case 143: break;
>>>>>>> release-0.3_card_105
          case 56: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FULL, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 143: break;
=======
          case 144: break;
>>>>>>> release-0.3_card_105
          case 57: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.FROM, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 144: break;
=======
          case 145: break;
>>>>>>> release-0.3_card_105
          case 58: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RPAD, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 145: break;
=======
          case 146: break;
>>>>>>> release-0.3_card_105
          case 59: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHEN, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 146: break;
=======
          case 147: break;
>>>>>>> release-0.3_card_105
          case 60: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WITH, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 147: break;
=======
          case 148: break;
>>>>>>> release-0.3_card_105
          case 61: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NULL, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 148: break;
=======
          case 149: break;
>>>>>>> release-0.3_card_105
          case 62: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NVL2, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 149: break;
=======
          case 150: break;
>>>>>>> release-0.3_card_105
          case 63: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.JOIN, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 150: break;
=======
          case 151: break;
>>>>>>> release-0.3_card_105
          case 64: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LTRIM, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 151: break;
=======
          case 152: break;
>>>>>>> release-0.3_card_105
          case 65: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LOWER, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 152: break;
=======
          case 153: break;
>>>>>>> release-0.3_card_105
          case 66: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.COUNT, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 153: break;
=======
          case 154: break;
>>>>>>> release-0.3_card_105
          case 67: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TABLE, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 154: break;
=======
          case 155: break;
>>>>>>> release-0.3_card_105
          case 68: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.USING, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 155: break;
=======
          case 156: break;
>>>>>>> release-0.3_card_105
          case 69: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.UPPER, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 156: break;
=======
          case 157: break;
>>>>>>> release-0.3_card_105
          case 70: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RTRIM, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 157: break;
=======
          case 158: break;
>>>>>>> release-0.3_card_105
          case 71: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.RIGHT, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 158: break;
=======
          case 159: break;
>>>>>>> release-0.3_card_105
          case 72: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.OUTER, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 159: break;
=======
          case 160: break;
>>>>>>> release-0.3_card_105
          case 73: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.WHERE, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 160: break;
=======
          case 161: break;
>>>>>>> release-0.3_card_105
          case 74: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INSTR, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 161: break;
=======
          case 162: break;
>>>>>>> release-0.3_card_105
          case 75: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.INNER, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 162: break;
=======
          case 163: break;
>>>>>>> release-0.3_card_105
          case 76: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SELECT, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 163: break;
=======
          case 164: break;
>>>>>>> release-0.3_card_105
          case 77: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.LENGTH, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 164: break;
=======
          case 165: break;
>>>>>>> release-0.3_card_105
          case 78: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CONCAT, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 165: break;
=======
          case 166: break;
>>>>>>> release-0.3_card_105
          case 79: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.CHOOSE, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 166: break;
          case 80: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.ISNULL, yyline+1, yycolumn+1, yytext());
            }
          case 167: break;
          case 81: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NULLIF, yyline+1, yycolumn+1, yytext());
            }
          case 168: break;
          case 82: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SYSDATE, yyline+1, yycolumn+1, yytext());
            }
          case 169: break;
          case 83: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TO_CHAR, yyline+1, yycolumn+1, yytext());
            }
          case 170: break;
          case 84: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TO_DATE, yyline+1, yycolumn+1, yytext());
            }
          case 171: break;
          case 85: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.REPLACE, yyline+1, yycolumn+1, yytext());
            }
          case 172: break;
          case 86: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NATURAL, yyline+1, yycolumn+1, yytext());
            }
          case 173: break;
          case 87: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DISTINCT, yyline+1, yycolumn+1, yytext());
            }
<<<<<<< HEAD
          case 173: break;
          case 87: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TO_TIMESTAMP, yyline+1, yycolumn+1, yytext());
            }
=======
>>>>>>> release-0.3_card_96
          case 174: break;
=======
          case 167: break;
          case 80: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.UPDATE, yyline+1, yycolumn+1, yytext());
            }
          case 168: break;
          case 81: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DELETE, yyline+1, yycolumn+1, yytext());
            }
          case 169: break;
          case 82: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NULLIF, yyline+1, yycolumn+1, yytext());
            }
          case 170: break;
          case 83: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.SYSDATE, yyline+1, yycolumn+1, yytext());
            }
          case 171: break;
          case 84: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TO_CHAR, yyline+1, yycolumn+1, yytext());
            }
          case 172: break;
          case 85: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.TO_DATE, yyline+1, yycolumn+1, yytext());
            }
          case 173: break;
          case 86: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.REPLACE, yyline+1, yycolumn+1, yytext());
            }
          case 174: break;
          case 87: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.NATURAL, yyline+1, yycolumn+1, yytext());
            }
          case 175: break;
          case 88: 
            { System.out.println("Recognized: " + yytext()); prettyfier(yytext(), Categories.RESERVED); return new Symbol(sym.DISTINCT, yyline+1, yycolumn+1, yytext());
            }
          case 176: break;
>>>>>>> release-0.3_card_105
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
